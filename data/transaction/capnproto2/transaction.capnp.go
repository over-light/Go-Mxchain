// Code generated by capnpc-go. DO NOT EDIT.

package capnproto2

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// The Transaction class implements the transaction used for moving assets
type TxCapnp struct{ capnp.Struct }

// TxCapnp_TypeID is the unique identifier for the type TxCapnp.
const TxCapnp_TypeID = 0x8549a62f4371df5b

func NewTxCapnp(s *capnp.Segment) (TxCapnp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 10})
	return TxCapnp{st}, err
}

func NewRootTxCapnp(s *capnp.Segment) (TxCapnp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 10})
	return TxCapnp{st}, err
}

func ReadRootTxCapnp(msg *capnp.Message) (TxCapnp, error) {
	root, err := msg.RootPtr()
	return TxCapnp{root.Struct()}, err
}

func (s TxCapnp) String() string {
	str, _ := text.Marshal(0x8549a62f4371df5b, s.Struct)
	return str
}

func (s TxCapnp) Nonce() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasNonce() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetNonce(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TxCapnp) Value() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetValue(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TxCapnp) RcvAddr() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasRcvAddr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetRcvAddr(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s TxCapnp) SndAddr() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasSndAddr() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetSndAddr(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s TxCapnp) GasPrice() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasGasPrice() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetGasPrice(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s TxCapnp) GasLimit() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasGasLimit() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetGasLimit(v []byte) error {
	return s.Struct.SetData(5, v)
}

func (s TxCapnp) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasData() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetData(v []byte) error {
	return s.Struct.SetData(6, v)
}

func (s TxCapnp) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(7)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasSignature() bool {
	p, err := s.Struct.Ptr(7)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetSignature(v []byte) error {
	return s.Struct.SetData(7, v)
}

func (s TxCapnp) Challenge() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasChallenge() bool {
	p, err := s.Struct.Ptr(8)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetChallenge(v []byte) error {
	return s.Struct.SetData(8, v)
}

func (s TxCapnp) PubKey() ([]byte, error) {
	p, err := s.Struct.Ptr(9)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasPubKey() bool {
	p, err := s.Struct.Ptr(9)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetPubKey(v []byte) error {
	return s.Struct.SetData(9, v)
}

// TxCapnp_List is a list of TxCapnp.
type TxCapnp_List struct{ capnp.List }

// NewTxCapnp creates a new list of TxCapnp.
func NewTxCapnp_List(s *capnp.Segment, sz int32) (TxCapnp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 10}, sz)
	return TxCapnp_List{l}, err
}

func (s TxCapnp_List) At(i int) TxCapnp { return TxCapnp{s.List.Struct(i)} }

func (s TxCapnp_List) Set(i int, v TxCapnp) error { return s.List.SetStruct(i, v.Struct) }

func (s TxCapnp_List) String() string {
	str, _ := text.MarshalList(0x8549a62f4371df5b, s.List)
	return str
}

// TxCapnp_Promise is a wrapper for a TxCapnp promised by a client call.
type TxCapnp_Promise struct{ *capnp.Pipeline }

func (p TxCapnp_Promise) Struct() (TxCapnp, error) {
	s, err := p.Pipeline.Struct()
	return TxCapnp{s}, err
}

const schema_933ccff820d2c436 = "x\xdaL\xd1=\x8b\x13A\x1c\xc7\xf1\xdf\x7f\xb2\x9bd" +
	"\xe5\xc2%\xcc\x8a\x11\x84\x8cp\x85\xca\x9d\xb9\xf8\x18\x0e" +
	"\xc5{\xb09\xb5\xb8\xb8\xe9\x04a\xdc\x8c\xc9B2\x1b" +
	"w6A++\x1b\xdb{\x01v\x16\xbe\x07;\xad\x05" +
	"\x0b[_\x83\x9d\xd8\xac\xfc\xc3]\xd8n\xbe\x1ff\xf8" +
	"\x15\xd3\xfc\xb7/z\xfe%\x01\x0c\xda~\xb5x\xf1\xfb" +
	"\xcdQ\xf7\xf3\xf1\x07\xb4v\xa8\xb8\xf7\xed\xa7\xfa\xfb\xe3" +
	"\xc1)\xfc\x0b5\xa0\xf7\xe7\x0b\xc9\x80j2\xa0\xce\xed" +
	"c\xba/\xd0/F:\xd7\xdd<\xd3\xbeu:\xce\x93" +
	"\xd4vc=\xb7\xf3,\xcdS\xe6s\xbd\xb9\xd2\xbd\xe1" +
	"\xdb\xa3M>\x9c\x10\x0d<\x12\xc5\xcb\xd3O\x83\xaf\xbf" +
	">~\xc7\xc0\x13t\xb0K\xb4\x01\xf4\xe8P\x14\xc3\x89" +
	"Q\xc3L\xdb\xfa\xd9{\x15O\xb5s*\x99\xcd\xa7f" +
	"fl\xeeT>1\xaa4\xa0\x16\xce\x8c\xd4\xeb4S" +
	"\xb3t\x99\xd8\xb1\xd2\xce\x99\xdc\x01\x18\\\xabx\x80G" +
	"\x80\x0c\xe8\x16\x10yT\xa1\xa8I\x82ZD!\xb17" +
	"V^g\x0f\xd9\x85\x08I\x00\xb2E\x87@\xb4\xc1\xde" +
	"f\xafTB\xaa\x00\xf2\xe2\xca\x9b\xecW\xd8=/$" +
	"\x0f\x90\x97\xe9\x09\x10\xb5\xd9\xb7\xd8}?$\x1f\x90W" +
	"W\xae\xd8\xb7\xd9\xab\xd5\x90\xaa\x80\xbcN7\x80h\x8b" +
	"}\x97\xbdV\x0b\xa9\x06\xc8\x1dz\x0eD\xdb\xec}\xf6" +
	"z=\xa4: \xef\xae\xfc\x0e\xfb>{\x10\x84\x14\x00" +
	"\xf2!\xed\x01Q\x9f\xfd1\x09\xea\xd8\xd4\xc6\x86\x1a\x10" +
	"\xd4\x00u\x96z\xbaX\xd7\xfb,^\x1e\x8cF\xd9\xba" +
	"\x9d\x1d\x95\xbb\x18kw\x92%\xb1\x01P\xb6g\xc9," +
	"\xc9K\xb6\xc9\x1f\xbf\xbe\xe0\x92\xb1\xd5\xf9\"\x03\xad\x87" +
	"\x8ax\xa2\xa7Sc\xc7%{4_\xbczj\xde\x9d" +
	"\xe7\xff\x00\x00\x00\xff\xffMZ{\xcf"

func init() {
	schemas.Register(schema_933ccff820d2c436,
		0x8549a62f4371df5b)
}
