// Code generated by capnpc-go. DO NOT EDIT.

package capnproto2

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// The Transaction class implements the transaction used for moving assets
type TxCapnp struct{ capnp.Struct }

// TxCapnp_TypeID is the unique identifier for the type TxCapnp.
const TxCapnp_TypeID = 0x8549a62f4371df5b

func NewTxCapnp(s *capnp.Segment) (TxCapnp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 5})
	return TxCapnp{st}, err
}

func NewRootTxCapnp(s *capnp.Segment) (TxCapnp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 5})
	return TxCapnp{st}, err
}

func ReadRootTxCapnp(msg *capnp.Message) (TxCapnp, error) {
	root, err := msg.RootPtr()
	return TxCapnp{root.Struct()}, err
}

func (s TxCapnp) String() string {
	str, _ := text.Marshal(0x8549a62f4371df5b, s.Struct)
	return str
}

func (s TxCapnp) Nonce() uint64 {
	return s.Struct.Uint64(0)
}

func (s TxCapnp) SetNonce(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s TxCapnp) Value() uint64 {
	return s.Struct.Uint64(8)
}

func (s TxCapnp) SetValue(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TxCapnp) RcvAddr() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasRcvAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetRcvAddr(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TxCapnp) SndAddr() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasSndAddr() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetSndAddr(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TxCapnp) GasPrice() uint64 {
	return s.Struct.Uint64(16)
}

func (s TxCapnp) SetGasPrice(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s TxCapnp) GasLimit() uint64 {
	return s.Struct.Uint64(24)
}

func (s TxCapnp) SetGasLimit(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s TxCapnp) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasData() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetData(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s TxCapnp) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasSignature() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetSignature(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s TxCapnp) Challenge() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s TxCapnp) HasChallenge() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s TxCapnp) SetChallenge(v []byte) error {
	return s.Struct.SetData(4, v)
}

// TxCapnp_List is a list of TxCapnp.
type TxCapnp_List struct{ capnp.List }

// NewTxCapnp creates a new list of TxCapnp.
func NewTxCapnp_List(s *capnp.Segment, sz int32) (TxCapnp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 5}, sz)
	return TxCapnp_List{l}, err
}

func (s TxCapnp_List) At(i int) TxCapnp { return TxCapnp{s.List.Struct(i)} }

func (s TxCapnp_List) Set(i int, v TxCapnp) error { return s.List.SetStruct(i, v.Struct) }

func (s TxCapnp_List) String() string {
	str, _ := text.MarshalList(0x8549a62f4371df5b, s.List)
	return str
}

// TxCapnp_Promise is a wrapper for a TxCapnp promised by a client call.
type TxCapnp_Promise struct{ *capnp.Pipeline }

func (p TxCapnp_Promise) Struct() (TxCapnp, error) {
	s, err := p.Pipeline.Struct()
	return TxCapnp{s}, err
}

const schema_933ccff820d2c436 = "x\xdaL\xd11k\x14O\x1c\xc6\xf1\xe7\x99\xdd\xcd]" +
	"\xe0\x7f$\xcb-\xfc#\x08\xd9\"M\x84dM\x04\x11" +
	"\xb10\x09\x16\x06\x91l.\x9d Lv\xc7\xbd\xc5\xdb" +
	"\x99\xb8\xb3\x17\xd3\xa5\xb2\xb1\xcd\x0b\xb0\xb3\xf0=\xd8i" +
	"-X\xd8\xdaZ(\x18\x8c\x10!\xb22A\x8f\xeb\xe6" +
	"\xf9\xc0\x97)~\xf3?\xee\x8a\xb5\xe0\x7f\x01\xa4\x0b\xc1" +
	"L\xfb\xe8\xf3\xb3\xad\xe4\xf5\xfd\x17H+\xfa\xed\xcdw" +
	"\x1f\xe3\xf3\x0fwN\x10\x04\x1d`\xed\xf4\x8d\xd7_f" +
	"\xa7\xbf\xcc\xc5\x1b%[\xe2V\x9b\x0cM\xa5\x12\x99\xf7" +
	"\xeaR\xea\xa40\x89\xad\xb3\xa4(\x9b\xe1x\x7f53" +
	"UroT\x1b\x9d?T\xcdsS?M\xd4\xe5Z" +
	")\xcc\x8a\x95:\xdf7GI.\x1b\x994\xb5\xd4V" +
	"fMit\x92\xc9\x03}P\x9b\xc6\xacO\xf3\xea%" +
	"\xdf\xde;\xda\x9as\x8f\x1d2\xf5)\xda\xc7'\xaf\xd2" +
	"\xb7\x9f^\xbeG\xea\x0bn\\'\xff\x03\xd6\xb8)\xda" +
	"\xbd\xa1\x8a\xf7j\xa9\xbb\x7f\xfb8\x1bIk\xe3\xb2:" +
	"\x18\xa9J\xe9\xc6\xc6\xcdP\xc5S\x1f\xc4c\xab\xf2\xf8" +
	"\x89\xa9\xe3\xca\x1c\x96\xba\x88\xa5\xb5\xaa\xb1\x00\xd2%\xcf" +
	"\x07|\x02\xe1\xb7u \xfd\xe21=\x13\x0c\xc9\x88\x0e" +
	"O\x1d~\xf5\x98\x9e\x0bRD\x14@\xf8s\x13H\xbf" +
	"{L/\x04C\x8f\x11= \xfc\xe5\xf0\xcc\xe3.\x05" +
	"C_D\xf4\x81\xf0\xf76\x90^x\x1ct\x9d\x06^" +
	"\xc4\x00\xe8\x07\xdc\x06\x06>=\x0e\xe6\x9d\xcf\x88\x883" +
	"@\xbf\xc7k\xc0\xa0\xeb<r\xde\xf1\"v\x80~\xc8" +
	"]`0\xef\xfc\xaa\xf3\xae\x1f\xb1\x0b\xf4\xaf\\\xfa\x82" +
	"\xf3%\x0a.j\xa33\xc5Y\x08\xce\x82\x8b\x87r4" +
	"\x9e\xac\xe3:;\xdc\xc8\xf3\x9a=\x08\xf6\xc0c\xab\xf3" +
	"\xe9\xdd\x16\xd2\xee\xd4e\xa6\x00\xfck\x9c=(\xab\xb2" +
	"\x99\xb29w\xd1Id\xcbB\xcbf\\\x83jb\xd9" +
	"P\x8eFJ\x17S\xf6'\x00\x00\xff\xffQw\x9a\x10"

func init() {
	schemas.Register(schema_933ccff820d2c436,
		0x8549a62f4371df5b)
}
