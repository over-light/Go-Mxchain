// Code generated by capnpc-go. DO NOT EDIT.

package transaction

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// The Transaction class implements the transaction used for moving assets
type Transaction struct{ capnp.Struct }

// Transaction_TypeID is the unique identifier for the type Transaction.
const Transaction_TypeID = 0xddddc5d2bc26fb1f

func NewTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 10})
	return Transaction{st}, err
}

func NewRootTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 10})
	return Transaction{st}, err
}

func ReadRootTransaction(msg *capnp.Message) (Transaction, error) {
	root, err := msg.RootPtr()
	return Transaction{root.Struct()}, err
}

func (s Transaction) String() string {
	str, _ := text.Marshal(0xddddc5d2bc26fb1f, s.Struct)
	return str
}

func (s Transaction) Nonce() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Transaction) HasNonce() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Transaction) SetNonce(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Transaction) Value() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Transaction) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Transaction) SetValue(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Transaction) RcvAddr() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Transaction) HasRcvAddr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Transaction) SetRcvAddr(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Transaction) SndAddr() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Transaction) HasSndAddr() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Transaction) SetSndAddr(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Transaction) GasPrice() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Transaction) HasGasPrice() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Transaction) SetGasPrice(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Transaction) GasLimit() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Transaction) HasGasLimit() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Transaction) SetGasLimit(v []byte) error {
	return s.Struct.SetData(5, v)
}

func (s Transaction) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return []byte(p.Data()), err
}

func (s Transaction) HasData() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Transaction) SetData(v []byte) error {
	return s.Struct.SetData(6, v)
}

func (s Transaction) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(7)
	return []byte(p.Data()), err
}

func (s Transaction) HasSignature() bool {
	p, err := s.Struct.Ptr(7)
	return p.IsValid() || err != nil
}

func (s Transaction) SetSignature(v []byte) error {
	return s.Struct.SetData(7, v)
}

func (s Transaction) Challenge() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return []byte(p.Data()), err
}

func (s Transaction) HasChallenge() bool {
	p, err := s.Struct.Ptr(8)
	return p.IsValid() || err != nil
}

func (s Transaction) SetChallenge(v []byte) error {
	return s.Struct.SetData(8, v)
}

func (s Transaction) PubKey() ([]byte, error) {
	p, err := s.Struct.Ptr(9)
	return []byte(p.Data()), err
}

func (s Transaction) HasPubKey() bool {
	p, err := s.Struct.Ptr(9)
	return p.IsValid() || err != nil
}

func (s Transaction) SetPubKey(v []byte) error {
	return s.Struct.SetData(9, v)
}

// Transaction_List is a list of Transaction.
type Transaction_List struct{ capnp.List }

// NewTransaction creates a new list of Transaction.
func NewTransaction_List(s *capnp.Segment, sz int32) (Transaction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 10}, sz)
	return Transaction_List{l}, err
}

func (s Transaction_List) At(i int) Transaction { return Transaction{s.List.Struct(i)} }

func (s Transaction_List) Set(i int, v Transaction) error { return s.List.SetStruct(i, v.Struct) }

func (s Transaction_List) String() string {
	str, _ := text.MarshalList(0xddddc5d2bc26fb1f, s.List)
	return str
}

// Transaction_Promise is a wrapper for a Transaction promised by a client call.
type Transaction_Promise struct{ *capnp.Pipeline }

func (p Transaction_Promise) Struct() (Transaction, error) {
	s, err := p.Pipeline.Struct()
	return Transaction{s}, err
}

const schema_933ccff820d2c436 = "x\xdaL\xd1\xcb\x8a\x13M\x18\xc6\xf1\xe7\xa9t\xe7\xf0" +
	"1\xe1K\xa8\x16#\x08)q\x10\x95Q'\x1e\xc3\xa0" +
	"\xcc\x01\xdd\xa8\x8b\x89=k\xa1\xec\xb4IC\xd2\x09]" +
	"\x9d\x80n\xdc\xbb\x9d\x0b\xf0Ft\xe7\xac\x85Y\xb8\x9b" +
	"\x8bp\xa7\xb8hy\xa3\x13zW\xff\x1fU\xf5.\xde" +
	"\xd6\xaf=\xd5\xf3/*`\xd0\xf1\xabE\xf7\xf7\xb5\xcf" +
	"\xa7'ggh_e\xf1\xf0\xeb\xa9\xf9\xf9\xed\xf11" +
	"\xfc\xffj@\xef\xc7{j\x9f5\xed\xb3{\xef\x19\x1f" +
	")\xf4\x8b\xa1\xcd\xed\x9d<\xb3^\xeal\x94'\xb3T" +
	"\xe2\xfc|;\xb2\xf3t\xbes$\xb2\xfb\x97\x0e\xc9\x81" +
	"GU\xbc>\xfe4\xf8\xf2\xfd\xe3\x09\x06\x9e\xe2\xfe6" +
	"\xb9\x01\xf4x\xa0\x8a\xa3ql\xe4A\xfd\xdf\x1f&\x9a" +
	"X\xe7L2\x9dO\xe2i\x9c\xe6\xce\xe4\xe3\xd8\x94\x86" +
	"\x98\x85\x8b\x87\xe6\xed,3\xd3\xd92IG\xc6:\x17" +
	"\xe7\x0e\xc0\xe0z\xc5\x03<\x02\xba\xc1\xbb@\xe8\xb1\xc2" +
	"\xb0E\xc56\x19P\xbc\xb9\xf2\xbax \xaeT@\x05" +
	"\xe86\x0f\x80pC\xbc#^\xa9\x04\xac\x00\xfa\xc2\xca" +
	"[\xe2\x97\xc5=/\xa0\x07\xe8K|\x0e\x84\x1d\xf1M" +
	"q\xdf\x0f\xe8\x03\xfa\xca\xca\x8d\xf8\x96x\xb5\x1a\xb0\x0a" +
	"\xe8\x1b\xbc\x09\x84\x9b\xe2\xdb\xe2\xb5Z\xc0\x1a\xa0o\xf1" +
	"\x15\x10n\x89\xf7\xc5\xeb\xf5\x80u@?X\xf9}\xf1" +
	"=\xf1F#`\x03\xd0O\xb8\x03\x84}\xf1\xa7T\xec" +
	"\xa6\xb34\x8a\xd9\x84b\x13\xec.\xedd\xb1\xae\x0fY" +
	"\xb4\xdc\x1f\x0e\xb3u\xbbtX\xeebd\xdda\x96D" +
	"1\x80\xb2\xbdL\xa6I^\xb2\xffe\xe5\xeb\x0b.\x19" +
	"\xa56_d\xe0zP\x11\x8d\xedd\x12\xa7\xa3\x92\xed" +
	"\xce\x17o^\xc4\xef\xce\xf3O\x00\x00\x00\xff\xff\xc3\xe1" +
	"{6"

func init() {
	schemas.Register(schema_933ccff820d2c436,
		0xddddc5d2bc26fb1f)
}
