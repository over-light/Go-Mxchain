// Code generated by capnpc-go. DO NOT EDIT.

package transaction

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// The Transaction class implements the transaction used for moving assets
type Transaction struct{ capnp.Struct }

// Transaction_TypeID is the unique identifier for the type Transaction.
const Transaction_TypeID = 0xddddc5d2bc26fb1f

func NewTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 10})
	return Transaction{st}, err
}

func NewRootTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 10})
	return Transaction{st}, err
}

func ReadRootTransaction(msg *capnp.Message) (Transaction, error) {
	root, err := msg.RootPtr()
	return Transaction{root.Struct()}, err
}

func (s Transaction) String() string {
	str, _ := text.Marshal(0xddddc5d2bc26fb1f, s.Struct)
	return str
}

func (s Transaction) Nonce() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasNonce() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Transaction) SetNonce(v capnp.UInt8List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNonce sets the nonce field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewNonce(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Transaction) Value() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Transaction) SetValue(v capnp.UInt8List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewValue sets the value field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewValue(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Transaction) RcvAddr() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasRcvAddr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Transaction) SetRcvAddr(v capnp.UInt8List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewRcvAddr sets the rcvAddr field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewRcvAddr(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Transaction) SndAddr() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasSndAddr() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Transaction) SetSndAddr(v capnp.UInt8List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewSndAddr sets the sndAddr field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewSndAddr(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s Transaction) GasPrice() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasGasPrice() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Transaction) SetGasPrice(v capnp.UInt8List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewGasPrice sets the gasPrice field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewGasPrice(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s Transaction) GasLimit() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasGasLimit() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Transaction) SetGasLimit(v capnp.UInt8List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewGasLimit sets the gasLimit field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewGasLimit(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s Transaction) Data() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasData() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Transaction) SetData(v capnp.UInt8List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewData(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s Transaction) Signature() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasSignature() bool {
	p, err := s.Struct.Ptr(7)
	return p.IsValid() || err != nil
}

func (s Transaction) SetSignature(v capnp.UInt8List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewSignature sets the signature field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewSignature(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s Transaction) Challenge() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasChallenge() bool {
	p, err := s.Struct.Ptr(8)
	return p.IsValid() || err != nil
}

func (s Transaction) SetChallenge(v capnp.UInt8List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewChallenge sets the challenge field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewChallenge(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s Transaction) PubKey() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Transaction) HasPubKey() bool {
	p, err := s.Struct.Ptr(9)
	return p.IsValid() || err != nil
}

func (s Transaction) SetPubKey(v capnp.UInt8List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewPubKey sets the pubKey field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Transaction) NewPubKey(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

// Transaction_List is a list of Transaction.
type Transaction_List struct{ capnp.List }

// NewTransaction creates a new list of Transaction.
func NewTransaction_List(s *capnp.Segment, sz int32) (Transaction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 10}, sz)
	return Transaction_List{l}, err
}

func (s Transaction_List) At(i int) Transaction { return Transaction{s.List.Struct(i)} }

func (s Transaction_List) Set(i int, v Transaction) error { return s.List.SetStruct(i, v.Struct) }

func (s Transaction_List) String() string {
	str, _ := text.MarshalList(0xddddc5d2bc26fb1f, s.List)
	return str
}

// Transaction_Promise is a wrapper for a Transaction promised by a client call.
type Transaction_Promise struct{ *capnp.Pipeline }

func (p Transaction_Promise) Struct() (Transaction, error) {
	s, err := p.Pipeline.Struct()
	return Transaction{s}, err
}

const schema_933ccff820d2c436 = "x\xdal\xd2?k\x14O\x1c\x06\xf0\xe7;\xbb{{" +
	"\x17~\xfc\xe4\x98\x05\xd3\xc8M!\"bL\xce\xff\x04" +
	"\xc1$ \x88Zd\xdd\x14\x0a\"Lv\xc7\xcb\xc2\xde" +
	"\xec\xb9\xb3whec\xa3\xd8\xa5U\xf4E(Xh" +
	"g\xc0F\x94\x14v\xe9|\x03v\x82\xc5\xca\xf7\x10\x0c" +
	"\x97t\x0f\x9fg\x1ef\x8aY:N+\xa2\x1f\x1c\x15" +
	"@<\x1f\xb4\x9a\xde\xef\x13\x1fvw\xf6\xf6\xd0\xbd@" +
	"\xcd\xc5O\xbb\xea\xd7\xd7+\xdb\x08\xe6B\xa0\xffsN" +
	"\xc8.\x85\xb2K\xbds1]\x12\xb8\xdc\x98\xa2*m" +
	"\xb60\x08\xcb\x05\xa7m\xb6Y>Z\xcct\xad\x17\xeb" +
	"J[\xa7\xd3:/\xed\xfe|&\xd5#;Z\xde\xf8" +
	"'\xc0:Q\xec\x93h\xeeo\xbf\x8e?~\x7f\xbe\x83" +
	"\xd8\x17\xb4\xbaD\xf4\x1f\xd0\xa75\xd1ll\x19\xc5\x8b" +
	"\xf6\xdf\x89J\x0b\xed\x9c\xca\x87\xa3\xc2\x0c\x8d\xad\x9d\xaa" +
	"\xb7\x8c\xdaw\x8b\x1a;\x93\xa9\x07e\xa5\x86\xe5$\xb7" +
	"\x03\xa5\x9d3\xb5\x03\x10\x9f\xf4|\xc0'@v\xe8," +
	"\x90\xf8\xe4Q\xa2HP\x97(\"\xf6cS\x9fg?" +
	"\xcf.DD\x02\x90}Z\x03\x92\xd3\xec\xd7\xd9=/" +
	"\"\x0f\x90\xd7\xa6\xbe\xc2~\x8f\xdd\xf7#\xf2\x01y\x97" +
	"n\x00\xc9\x1d\xf6\x9a=\x08\"\x0a\x00\xf9p\xea#\xf6" +
	"\x17\xec\xadVD-@>\xa3S@\xf2\x94\xfd\x0d{" +
	"\x18F\x14\x02\xf2\x15\xdd\x06\x92\x97\xec\xef\xd9\xdb\xed\x88" +
	"\xda\x80|7\xf5\xb7\xec\xdf\xd8;\x9d\x88:\x80\xfcB" +
	"\xcb@\xf2\x99\xfd\x07\x09\xea\xd9\xd2\xa6\x86\xfe\x07\xad{" +
	"D-\x08\x8e\xbd\x89.\xc6\xb3\xf8\xa4J'\xabYV" +
	"\xcd\xb2\xb3\xd9!\xdc\x0c\xb4[\xaf\xf2\xd4\x008\xa4\xba" +
	"\x95\x0f\xf3\xfa`u\x84?\xc7\xecq\x97\x0f\xac\xae\xc7" +
	"\x15h\xf6IM\xba\xa5\x8b\xc2\xd8\xc1\xc1\xea\xeah\xbc" +
	"y\xd3<\x9e\xd1?\x01\x00\x00\xff\xffE\x97\x8d\x9b"

func init() {
	schemas.Register(schema_933ccff820d2c436,
		0xddddc5d2bc26fb1f)
}
