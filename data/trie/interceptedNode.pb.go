// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interceptedNode.proto

package trie

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SerializedNode struct {
	NodeBytes []byte `protobuf:"bytes,1,opt,name=NodeBytes,proto3" json:"NodeBytes,omitempty"`
}

func (m *SerializedNode) Reset()      { *m = SerializedNode{} }
func (*SerializedNode) ProtoMessage() {}
func (*SerializedNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_518d9c0e9e659a6b, []int{0}
}
func (m *SerializedNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializedNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializedNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializedNode.Merge(m, src)
}
func (m *SerializedNode) XXX_Size() int {
	return m.Size()
}
func (m *SerializedNode) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializedNode.DiscardUnknown(m)
}

var xxx_messageInfo_SerializedNode proto.InternalMessageInfo

func (m *SerializedNode) GetNodeBytes() []byte {
	if m != nil {
		return m.NodeBytes
	}
	return nil
}

func init() {
	proto.RegisterType((*SerializedNode)(nil), "proto.SerializedNode")
}

func init() { proto.RegisterFile("interceptedNode.proto", fileDescriptor_518d9c0e9e659a6b) }

var fileDescriptor_518d9c0e9e659a6b = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0xcc, 0x2b, 0x49,
	0x2d, 0x4a, 0x4e, 0x2d, 0x28, 0x49, 0x4d, 0xf1, 0xcb, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9,
	0xb9, 0xfa, 0xe9, 0xf9, 0xe9, 0xf9, 0xfa, 0x60, 0xe1, 0xa4, 0xd2, 0x34, 0x30, 0x0f, 0xcc, 0x01,
	0xb3, 0x20, 0xba, 0x94, 0xf4, 0xb8, 0xf8, 0x82, 0x53, 0x8b, 0x32, 0x13, 0x73, 0x32, 0xab, 0x20,
	0xa6, 0x09, 0xc9, 0x70, 0x71, 0x82, 0x68, 0xa7, 0xca, 0x92, 0xd4, 0x62, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0x9e, 0x20, 0x84, 0x80, 0x93, 0xdd, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c,
	0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18,
	0x2f, 0x3c, 0x92, 0x63, 0xbc, 0xf1, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4,
	0x18, 0x3e, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f,
	0xe5, 0x18, 0xa2, 0x58, 0x4a, 0x8a, 0x32, 0x53, 0x93, 0xd8, 0xc0, 0xd6, 0x1a, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xb8, 0x9c, 0x58, 0x85, 0xc5, 0x00, 0x00, 0x00,
}

func (this *SerializedNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerializedNode)
	if !ok {
		that2, ok := that.(SerializedNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.NodeBytes, that1.NodeBytes) {
		return false
	}
	return true
}
func (this *SerializedNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&trie.SerializedNode{")
	s = append(s, "NodeBytes: "+fmt.Sprintf("%#v", this.NodeBytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInterceptedNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SerializedNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializedNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializedNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeBytes) > 0 {
		i -= len(m.NodeBytes)
		copy(dAtA[i:], m.NodeBytes)
		i = encodeVarintInterceptedNode(dAtA, i, uint64(len(m.NodeBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterceptedNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterceptedNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SerializedNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeBytes)
	if l > 0 {
		n += 1 + l + sovInterceptedNode(uint64(l))
	}
	return n
}

func sovInterceptedNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterceptedNode(x uint64) (n int) {
	return sovInterceptedNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SerializedNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializedNode{`,
		`NodeBytes:` + fmt.Sprintf("%v", this.NodeBytes) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInterceptedNode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SerializedNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterceptedNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializedNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializedNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterceptedNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterceptedNode
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterceptedNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeBytes = append(m.NodeBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeBytes == nil {
				m.NodeBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterceptedNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterceptedNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterceptedNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterceptedNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterceptedNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterceptedNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterceptedNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterceptedNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterceptedNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterceptedNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterceptedNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterceptedNode = fmt.Errorf("proto: unexpected end of group")
)
