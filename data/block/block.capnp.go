// Code generated by capnpc-go. DO NOT EDIT.

package block

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Block of data, containing hashes of transaction
type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0x9c7d523b025c5d0c

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0x9c7d523b025c5d0c, s.Struct)
	return str
}

func (s Block) MiniBlocks() (Block_MiniBlock_List, error) {
	p, err := s.Struct.Ptr(0)
	return Block_MiniBlock_List{List: p.List()}, err
}

func (s Block) HasMiniBlocks() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetMiniBlocks(v Block_MiniBlock_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMiniBlocks sets the miniBlocks field to a newly
// allocated Block_MiniBlock_List, preferring placement in s's segment.
func (s Block) NewMiniBlocks(n int32) (Block_MiniBlock_List, error) {
	l, err := NewBlock_MiniBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return Block_MiniBlock_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0x9c7d523b025c5d0c, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

type Block_MiniBlock struct{ capnp.Struct }

// Block_MiniBlock_TypeID is the unique identifier for the type Block_MiniBlock.
const Block_MiniBlock_TypeID = 0xc790ef4f274e678f

func NewBlock_MiniBlock(s *capnp.Segment) (Block_MiniBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Block_MiniBlock{st}, err
}

func NewRootBlock_MiniBlock(s *capnp.Segment) (Block_MiniBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Block_MiniBlock{st}, err
}

func ReadRootBlock_MiniBlock(msg *capnp.Message) (Block_MiniBlock, error) {
	root, err := msg.RootPtr()
	return Block_MiniBlock{root.Struct()}, err
}

func (s Block_MiniBlock) String() string {
	str, _ := text.Marshal(0xc790ef4f274e678f, s.Struct)
	return str
}

func (s Block_MiniBlock) TxHashes() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Block_MiniBlock) HasTxHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block_MiniBlock) SetTxHashes(v capnp.UInt8List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTxHashes sets the txHashes field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Block_MiniBlock) NewTxHashes(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Block_MiniBlock) DestShardID() uint32 {
	return s.Struct.Uint32(0)
}

func (s Block_MiniBlock) SetDestShardID(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Block_MiniBlock_List is a list of Block_MiniBlock.
type Block_MiniBlock_List struct{ capnp.List }

// NewBlock_MiniBlock creates a new list of Block_MiniBlock.
func NewBlock_MiniBlock_List(s *capnp.Segment, sz int32) (Block_MiniBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Block_MiniBlock_List{l}, err
}

func (s Block_MiniBlock_List) At(i int) Block_MiniBlock { return Block_MiniBlock{s.List.Struct(i)} }

func (s Block_MiniBlock_List) Set(i int, v Block_MiniBlock) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Block_MiniBlock_List) String() string {
	str, _ := text.MarshalList(0xc790ef4f274e678f, s.List)
	return str
}

// Block_MiniBlock_Promise is a wrapper for a Block_MiniBlock promised by a client call.
type Block_MiniBlock_Promise struct{ *capnp.Pipeline }

func (p Block_MiniBlock_Promise) Struct() (Block_MiniBlock, error) {
	s, err := p.Pipeline.Struct()
	return Block_MiniBlock{s}, err
}

const schema_ec208700833b2f3f = "x\xda\x84\x8fO\xeb\x12A\x1c\xc6\x9fgvW=X" +
	"(\x1bt)\xdaC\x90B\xbaH\x97\xc8\x83\x1a\x1e*" +
	"\xfa\xe3\xd8-*\x18w\xfd\xb3h3\xe2n$A\x97" +
	":\x04]\x0a\xba\x06\x9d;\xf4\x12:t\x90\xa0\x17\xd0" +
	"\xab\x08|\x09\x13\xab\xa8\xdd~\x97a\xe6\xfb\x9d\x87\xcf" +
	"\xf3\xa9|\xef\x8a\x96g\x04 /y\x05[~\xf6T" +
	"\xb4\x87o\xbe\xa0Z\xe7\xb6\x13\xb6\xdf\xbd\x0f\xfez," +
	"\x027.\xf35\xfd\x16/\xfa=^\xf1_\xb2\x03\xda" +
	"\x8f\xd3\x87\xd7\x1em?\xfd\x82\x0c\xc9St\xff\xff\x1b" +
	"\x7f\xd3\xdf\xe4W\xff'_\xe1\xa6\x1d/VF\xc7\x8d" +
	"\xa9k\x1a\xa9\xd2\xf1\xc8\xac\xc3Xe*\x1c-L4" +
	"\xdf\x9f\xcdH-\xf5\xb2s\xebv\xfe\x90.\xffCT" +
	"9\xb4\x0f\x12\x9d\xe4+0_\x0a\xfb\xfc\xf3W\xf9\xe3" +
	"\xcf\x87\x0d\xa4+\xd8\xbbJ\x96\x81\x16\xdf\xd2\xee\xf2\x81" +
	"\x99xAN\xb8\x1eDFg*\xd1\x89\x9e\x063\x95" +
	"\xce\xc6i`&A\xb6R:UQ\x96\x18\x0d@\xba" +
	"\x8e\x0b\xb8\x04\xaa\xe7\x9e\x00\xb2\xecP\xd6\x04\xed\x8b\x03" +
	"\xd3\x99\xa7<\x0f\x0e\x1c\xb2r\xaa\x05\xe6\xc3\xa3[\xe1" +
	",\xb7\xbdZ\xf3`2\x07\x06\xa4,\x1d\xd9\xf5{\x80" +
	"\xac9\x94}A\xf2\x02\xf3Yo\x04\xc8\xaeCy_" +
	"\xd0f\xeb;;\x03\x00\x87:\x05\x88]\x89x\x9cf" +
	"\x8fgj\x85b|\xb7\xcf\x12\x04K\xe0\xbf\x00\x00\x00" +
	"\xff\xff\x87P\x80A"

func init() {
	schemas.Register(schema_ec208700833b2f3f,
		0x9c7d523b025c5d0c,
		0xc790ef4f274e678f)
}
