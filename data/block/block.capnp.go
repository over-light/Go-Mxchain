// Code generated by capnpc-go. DO NOT EDIT.

package block

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Block of data, containing hashes of transaction
type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0x9c7d523b025c5d0c

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0x9c7d523b025c5d0c, s.Struct)
	return str
}

func (s Block) MiniBlocks() (Block_MiniBlock_List, error) {
	p, err := s.Struct.Ptr(0)
	return Block_MiniBlock_List{List: p.List()}, err
}

func (s Block) HasMiniBlocks() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetMiniBlocks(v Block_MiniBlock_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMiniBlocks sets the miniBlocks field to a newly
// allocated Block_MiniBlock_List, preferring placement in s's segment.
func (s Block) NewMiniBlocks(n int32) (Block_MiniBlock_List, error) {
	l, err := NewBlock_MiniBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return Block_MiniBlock_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0x9c7d523b025c5d0c, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

type Block_MiniBlock struct{ capnp.Struct }

// Block_MiniBlock_TypeID is the unique identifier for the type Block_MiniBlock.
const Block_MiniBlock_TypeID = 0xc790ef4f274e678f

func NewBlock_MiniBlock(s *capnp.Segment) (Block_MiniBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Block_MiniBlock{st}, err
}

func NewRootBlock_MiniBlock(s *capnp.Segment) (Block_MiniBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Block_MiniBlock{st}, err
}

func ReadRootBlock_MiniBlock(msg *capnp.Message) (Block_MiniBlock, error) {
	root, err := msg.RootPtr()
	return Block_MiniBlock{root.Struct()}, err
}

func (s Block_MiniBlock) String() string {
	str, _ := text.Marshal(0xc790ef4f274e678f, s.Struct)
	return str
}

func (s Block_MiniBlock) TxHashes() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Block_MiniBlock) HasTxHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block_MiniBlock) SetTxHashes(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTxHashes sets the txHashes field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Block_MiniBlock) NewTxHashes(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Block_MiniBlock) DestShardID() uint32 {
	return s.Struct.Uint32(0)
}

func (s Block_MiniBlock) SetDestShardID(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Block_MiniBlock_List is a list of Block_MiniBlock.
type Block_MiniBlock_List struct{ capnp.List }

// NewBlock_MiniBlock creates a new list of Block_MiniBlock.
func NewBlock_MiniBlock_List(s *capnp.Segment, sz int32) (Block_MiniBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Block_MiniBlock_List{l}, err
}

func (s Block_MiniBlock_List) At(i int) Block_MiniBlock { return Block_MiniBlock{s.List.Struct(i)} }

func (s Block_MiniBlock_List) Set(i int, v Block_MiniBlock) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Block_MiniBlock_List) String() string {
	str, _ := text.MarshalList(0xc790ef4f274e678f, s.List)
	return str
}

// Block_MiniBlock_Promise is a wrapper for a Block_MiniBlock promised by a client call.
type Block_MiniBlock_Promise struct{ *capnp.Pipeline }

func (p Block_MiniBlock_Promise) Struct() (Block_MiniBlock, error) {
	s, err := p.Pipeline.Struct()
	return Block_MiniBlock{s}, err
}

const schema_ec208700833b2f3f = "x\xda\\\x8f\xbd\x8a\x13Q\x1c\xc5\xcf\xb93\x93\xa4\x88" +
	"\x9a0B\x1a\x83S\x08& \x86`\xa3I\x11\x0d\x16" +
	"*Ds\xa3\x95D\xe1f\xf25Lr'd\x06\xb4" +
	"\xb1\xd1B\xb0Q\xb0\x15\xc4^\x0b\x1f`\xcbe\xdf`" +
	"\x1fbY\xc8#\xdcef7\xc9\xb2\xd5\xff\xde\xff\xc7" +
	"\xf9\x9dS\xfa\xfbX4\x9dH\x00\xf2\x96\x933\xc5w" +
	"C\xd1\x1e|\xfa\x85r\x85\x9bN\xa3\xfd\xe5\xabw\xea" +
	"0\x0f\xb8U\x9e\xb8uV\xdcG\xbc\xed.\xd9\x01\xcd" +
	"\xf7\xd9\xcb\xbb\xaf6?\x8e \xab\xe4\xfe2[\x7f\xf0" +
	"\x87-\xba\xff\xb3\xcb\x7f\xfc\x80\x87f\xac\x12\xd5\x18-" +
	"\"\xe1\x87i\xf1\xc3\xfb\xbeZ\xe9U\xab{#\xfdH" +
	"\x9b\x97\x04\xcb\x1c\x98^\xa0\x83\xee\"\xf2\xc1t(\xcc" +
	"\xfb\x9f\xbf\xe5\xc1\xf1\xb7CH[\xf0\xc9\x1d\xb2\x084" +
	"\xf9\x99&]\x0a\xbdh\xeax)\xe2\x9e\xe7G:Q" +
	"\x81\x0e\xf4\xcc\x9b\xabx>\x89\xbdh\xea%k\xa5c" +
	"\xe5'A\xa4\x01H\xdb\xb2\x01\x9b@\xf9\xda[@\x16" +
	"-\xca\x9a\xa0Yn\x99V\x18\xf3:\xd8\xb7\xc8\xd2\xde" +
	"\x16\x986wI\xac\xabI\xb2w/\xd0\x9dL$\xec" +
	"\x93\xb2\xb0\x03\xd5_\x00\xb2fQ\xbe\x11$o2\xed" +
	"\xc9\x11 \xfb\x16\xe5P\xd0$\x1f\x9fev\x01l\xd9" +
	"\x17%\x07q\x0e\x9e\xc4\xc9\xeb\xb9Z#?~\xfe\x94" +
	"\x05\x08\x16\xc0\xb3\x00\x00\x00\xff\xff\xa7or\x9d"

func init() {
	schemas.Register(schema_ec208700833b2f3f,
		0x9c7d523b025c5d0c,
		0xc790ef4f274e678f)
}
