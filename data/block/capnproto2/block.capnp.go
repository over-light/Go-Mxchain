// Code generated by capnpc-go. DO NOT EDIT.

package capnproto2

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Block of data, containing hashes of transaction
type BlockCapnp struct{ capnp.Struct }

// BlockCapnp_TypeID is the unique identifier for the type BlockCapnp.
const BlockCapnp_TypeID = 0xc1e03ff39686963e

func NewBlockCapnp(s *capnp.Segment) (BlockCapnp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockCapnp{st}, err
}

func NewRootBlockCapnp(s *capnp.Segment) (BlockCapnp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockCapnp{st}, err
}

func ReadRootBlockCapnp(msg *capnp.Message) (BlockCapnp, error) {
	root, err := msg.RootPtr()
	return BlockCapnp{root.Struct()}, err
}

func (s BlockCapnp) String() string {
	str, _ := text.Marshal(0xc1e03ff39686963e, s.Struct)
	return str
}

func (s BlockCapnp) MiniBlocks() (BlockCapnp_MiniBlock_List, error) {
	p, err := s.Struct.Ptr(0)
	return BlockCapnp_MiniBlock_List{List: p.List()}, err
}

func (s BlockCapnp) HasMiniBlocks() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockCapnp) SetMiniBlocks(v BlockCapnp_MiniBlock_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMiniBlocks sets the miniBlocks field to a newly
// allocated BlockCapnp_MiniBlock_List, preferring placement in s's segment.
func (s BlockCapnp) NewMiniBlocks(n int32) (BlockCapnp_MiniBlock_List, error) {
	l, err := NewBlockCapnp_MiniBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return BlockCapnp_MiniBlock_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// BlockCapnp_List is a list of BlockCapnp.
type BlockCapnp_List struct{ capnp.List }

// NewBlockCapnp creates a new list of BlockCapnp.
func NewBlockCapnp_List(s *capnp.Segment, sz int32) (BlockCapnp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return BlockCapnp_List{l}, err
}

func (s BlockCapnp_List) At(i int) BlockCapnp { return BlockCapnp{s.List.Struct(i)} }

func (s BlockCapnp_List) Set(i int, v BlockCapnp) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockCapnp_List) String() string {
	str, _ := text.MarshalList(0xc1e03ff39686963e, s.List)
	return str
}

// BlockCapnp_Promise is a wrapper for a BlockCapnp promised by a client call.
type BlockCapnp_Promise struct{ *capnp.Pipeline }

func (p BlockCapnp_Promise) Struct() (BlockCapnp, error) {
	s, err := p.Pipeline.Struct()
	return BlockCapnp{s}, err
}

type BlockCapnp_MiniBlock struct{ capnp.Struct }

// BlockCapnp_MiniBlock_TypeID is the unique identifier for the type BlockCapnp_MiniBlock.
const BlockCapnp_MiniBlock_TypeID = 0xddc4e0a03e7ddada

func NewBlockCapnp_MiniBlock(s *capnp.Segment) (BlockCapnp_MiniBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BlockCapnp_MiniBlock{st}, err
}

func NewRootBlockCapnp_MiniBlock(s *capnp.Segment) (BlockCapnp_MiniBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BlockCapnp_MiniBlock{st}, err
}

func ReadRootBlockCapnp_MiniBlock(msg *capnp.Message) (BlockCapnp_MiniBlock, error) {
	root, err := msg.RootPtr()
	return BlockCapnp_MiniBlock{root.Struct()}, err
}

func (s BlockCapnp_MiniBlock) String() string {
	str, _ := text.Marshal(0xddc4e0a03e7ddada, s.Struct)
	return str
}

func (s BlockCapnp_MiniBlock) TxHashes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s BlockCapnp_MiniBlock) HasTxHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockCapnp_MiniBlock) SetTxHashes(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTxHashes sets the txHashes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s BlockCapnp_MiniBlock) NewTxHashes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s BlockCapnp_MiniBlock) DestShardID() uint32 {
	return s.Struct.Uint32(0)
}

func (s BlockCapnp_MiniBlock) SetDestShardID(v uint32) {
	s.Struct.SetUint32(0, v)
}

// BlockCapnp_MiniBlock_List is a list of BlockCapnp_MiniBlock.
type BlockCapnp_MiniBlock_List struct{ capnp.List }

// NewBlockCapnp_MiniBlock creates a new list of BlockCapnp_MiniBlock.
func NewBlockCapnp_MiniBlock_List(s *capnp.Segment, sz int32) (BlockCapnp_MiniBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return BlockCapnp_MiniBlock_List{l}, err
}

func (s BlockCapnp_MiniBlock_List) At(i int) BlockCapnp_MiniBlock {
	return BlockCapnp_MiniBlock{s.List.Struct(i)}
}

func (s BlockCapnp_MiniBlock_List) Set(i int, v BlockCapnp_MiniBlock) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BlockCapnp_MiniBlock_List) String() string {
	str, _ := text.MarshalList(0xddc4e0a03e7ddada, s.List)
	return str
}

// BlockCapnp_MiniBlock_Promise is a wrapper for a BlockCapnp_MiniBlock promised by a client call.
type BlockCapnp_MiniBlock_Promise struct{ *capnp.Pipeline }

func (p BlockCapnp_MiniBlock_Promise) Struct() (BlockCapnp_MiniBlock, error) {
	s, err := p.Pipeline.Struct()
	return BlockCapnp_MiniBlock{s}, err
}

const schema_ec208700833b2f3f = "x\xda\x84\x8f?\xab\x13A\x14\xc5\xcf\x99\xdd5)\xde" +
	"\x93\x17V\xb0Q\xde\x0a\x16\x11BB\xb0\x11\x85\xfc\xd1" +
	"\x14*\x0a\x19\xed,\x84\xc9&1\xcb\xea\xcc\x92]\xd1" +
	"\xc6FA\xc1VH\xab\xad`e\x9f\"\xa0_\xc1\"" +
	" \xe4\x03\x08\x16~\x80\x91\xd9\x90\xc4\xce\xee\xde\xc3\xbd" +
	"\xe7\xfc\xce\xc9\x97\x9eh\x07F\x00\xf2Bp\xc6v\x16" +
	"o\x17\x7f\xba\x9b\x15j\x97\xf8\xbb\xdb\xba\xf1\xe6]\xf4" +
	"+`\x05\xb8z\x91#\x86m\x9e\x0f\xfb<\x0d\x9f\xb3" +
	"\x0b\xda\xf5\xfaU\xe7\xd3\xe6\xdbO\xc8\x06yx\xdd\xde" +
	"\x7f\xe6W\x86+7\x86K\xbe\xc05;V\x85j\x8d" +
	"\x9e\x1a?N[\xb1\xcat67\x85qB\x9c6\xcb" +
	"\xfd\xfaM7\xdfR\x95Lg\xd2\xe7?\xfe5>\xb0" +
	"\xf7\x13\x9d\xb8\x030\x95>\x85}\xfc\xe1\xa3\\\xfex" +
	"\xff\x1d\xd2\x17\xec_&\x8f\x806_\xd3\x96.\x91\x99" +
	"\x06\x91KlD\xb1\xd1\x85Jt\xa2\x9fD3\x95\xcf" +
	"&yd\xa6Q1W:Wq\x91\x18\x0d@\xfa\x9e" +
	"\x0f\xf8\x04j\xc7\x8f\x00y\xe4Q\xd6\x05\xed\xb3]\xa6" +
	"\x97\xe6<\x0b\x0e=\xf2\xe4\x80\x05:q_,\xf8_" +
	"\xb1LgMW\xe3\xb4\xdc\x87\xa4\xac\xees\xaf\xdc\x05" +
	"d\xdd\xa3\x1c\x08\x92\xe7\xe8\xb4\xfe\x08\x90=\x8f\xf2\x9e" +
	"\xa0-^\xde.\xe9\x01\xecP\x8e!\xb6\x00\x93\xbcx" +
	"8SsT\xc6w\x06\xacB\xb0\x0a\xfe\x0d\x00\x00\xff" +
	"\xfff\xc3\x87\x90"

func init() {
	schemas.Register(schema_ec208700833b2f3f,
		0xc1e03ff39686963e,
		0xddc4e0a03e7ddada)
}
