// Code generated by capnpc-go. DO NOT EDIT.

package capnproto2

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Block of data, containing hashes of transaction
type BlockCapnp struct{ capnp.Struct }

// BlockCapnp_TypeID is the unique identifier for the type BlockCapnp.
const BlockCapnp_TypeID = 0xc1e03ff39686963e

func NewBlockCapnp(s *capnp.Segment) (BlockCapnp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockCapnp{st}, err
}

func NewRootBlockCapnp(s *capnp.Segment) (BlockCapnp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BlockCapnp{st}, err
}

func ReadRootBlockCapnp(msg *capnp.Message) (BlockCapnp, error) {
	root, err := msg.RootPtr()
	return BlockCapnp{root.Struct()}, err
}

func (s BlockCapnp) String() string {
	str, _ := text.Marshal(0xc1e03ff39686963e, s.Struct)
	return str
}

func (s BlockCapnp) MiniBlocks() (BlockCapnp_MiniBlock_List, error) {
	p, err := s.Struct.Ptr(0)
	return BlockCapnp_MiniBlock_List{List: p.List()}, err
}

func (s BlockCapnp) HasMiniBlocks() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockCapnp) SetMiniBlocks(v BlockCapnp_MiniBlock_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMiniBlocks sets the miniBlocks field to a newly
// allocated BlockCapnp_MiniBlock_List, preferring placement in s's segment.
func (s BlockCapnp) NewMiniBlocks(n int32) (BlockCapnp_MiniBlock_List, error) {
	l, err := NewBlockCapnp_MiniBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return BlockCapnp_MiniBlock_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// BlockCapnp_List is a list of BlockCapnp.
type BlockCapnp_List struct{ capnp.List }

// NewBlockCapnp creates a new list of BlockCapnp.
func NewBlockCapnp_List(s *capnp.Segment, sz int32) (BlockCapnp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return BlockCapnp_List{l}, err
}

func (s BlockCapnp_List) At(i int) BlockCapnp { return BlockCapnp{s.List.Struct(i)} }

func (s BlockCapnp_List) Set(i int, v BlockCapnp) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockCapnp_List) String() string {
	str, _ := text.MarshalList(0xc1e03ff39686963e, s.List)
	return str
}

// BlockCapnp_Promise is a wrapper for a BlockCapnp promised by a client call.
type BlockCapnp_Promise struct{ *capnp.Pipeline }

func (p BlockCapnp_Promise) Struct() (BlockCapnp, error) {
	s, err := p.Pipeline.Struct()
	return BlockCapnp{s}, err
}

type BlockCapnp_MiniBlock struct{ capnp.Struct }

// BlockCapnp_MiniBlock_TypeID is the unique identifier for the type BlockCapnp_MiniBlock.
const BlockCapnp_MiniBlock_TypeID = 0xddc4e0a03e7ddada

func NewBlockCapnp_MiniBlock(s *capnp.Segment) (BlockCapnp_MiniBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BlockCapnp_MiniBlock{st}, err
}

func NewRootBlockCapnp_MiniBlock(s *capnp.Segment) (BlockCapnp_MiniBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BlockCapnp_MiniBlock{st}, err
}

func ReadRootBlockCapnp_MiniBlock(msg *capnp.Message) (BlockCapnp_MiniBlock, error) {
	root, err := msg.RootPtr()
	return BlockCapnp_MiniBlock{root.Struct()}, err
}

func (s BlockCapnp_MiniBlock) String() string {
	str, _ := text.Marshal(0xddc4e0a03e7ddada, s.Struct)
	return str
}

func (s BlockCapnp_MiniBlock) TxHashes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s BlockCapnp_MiniBlock) HasTxHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockCapnp_MiniBlock) SetTxHashes(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTxHashes sets the txHashes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s BlockCapnp_MiniBlock) NewTxHashes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s BlockCapnp_MiniBlock) DestShardID() uint32 {
	return s.Struct.Uint32(0)
}

func (s BlockCapnp_MiniBlock) SetDestShardID(v uint32) {
	s.Struct.SetUint32(0, v)
}

// BlockCapnp_MiniBlock_List is a list of BlockCapnp_MiniBlock.
type BlockCapnp_MiniBlock_List struct{ capnp.List }

// NewBlockCapnp_MiniBlock creates a new list of BlockCapnp_MiniBlock.
func NewBlockCapnp_MiniBlock_List(s *capnp.Segment, sz int32) (BlockCapnp_MiniBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return BlockCapnp_MiniBlock_List{l}, err
}

func (s BlockCapnp_MiniBlock_List) At(i int) BlockCapnp_MiniBlock {
	return BlockCapnp_MiniBlock{s.List.Struct(i)}
}

func (s BlockCapnp_MiniBlock_List) Set(i int, v BlockCapnp_MiniBlock) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BlockCapnp_MiniBlock_List) String() string {
	str, _ := text.MarshalList(0xddc4e0a03e7ddada, s.List)
	return str
}

// BlockCapnp_MiniBlock_Promise is a wrapper for a BlockCapnp_MiniBlock promised by a client call.
type BlockCapnp_MiniBlock_Promise struct{ *capnp.Pipeline }

func (p BlockCapnp_MiniBlock_Promise) Struct() (BlockCapnp_MiniBlock, error) {
	s, err := p.Pipeline.Struct()
	return BlockCapnp_MiniBlock{s}, err
}

const schema_ec208700833b2f3f = "x\xda\xb4\x90?k\x14A\x18\xc6\x9fgv\xcf\xbb\xe2" +
	"Nr\xac`\xa3d\x0b\x8b\x08\xe6\x86h#\x0a\xb9D" +
	"#\xa8\xa8d\xb4\xb3\x10f\xff\xe4v\xb9\xbb\x99ew" +
	"$il\x14\x14l\xc5\xb4\xfa\x19\xac\xb5\x10\xb4\xf0\x0b" +
	"X\x04\x84|\x00\xc1\xc2ZVvCr~\x01\xbby" +
	"\x7f\xbc\xf3>\x7f\x96>n\x88\xb5\x8e\x15\x80:\xd79" +
	"U\xaf\xef\xbf\xdc\xff=>\xfc\x8c\xa1\xe6\xaf\xb1\xbc\xfe" +
	"\xe2U\xf8\xb3\xc3.p\xe5<#/P<\x1bh." +
	"\x07o9\x06\xeb\x83\x83g\xeb\xef\x0f\xbf\xfc\x80\x9a\x91" +
	"\x8b\xafG\xfb\xdf\xf8\xc1\x0b(\xba@\xf0\x87\xbb\xb8Z" +
	"\xcb\xcc\xceS\xa9\x93~\x99k#'VVe,'" +
	"\xb9\xcb\x9eF\xa3\xd8\xce\xe5\xadYiM\xf2 u\xbb" +
	"\xb6\x9c\xca\xb4\x9dV'v\xb5\xd2&\x89\xec\x9eL\xb4" +
	"\xd32\x9a\xd9x*c]\x98\xa2\xb4\xce^>\x02\xa3" +
	"\x16\\\xbb\xd1\xbco\xeana\x0a\xe5\xf3\x1f\x7fC>" +
	"\xac\xef\xe7&o\x16\xc0\xa9\xf2)\xea'o\xde\xa9O" +
	"\xdf_\x7f\x85\xf2\x057/\x90}`\x8d\xcfY\xb7W" +
	"B\xbb\xd3\x09\x1b\xc5Kal\x8d\xd3\xb9\xc9\xcd$\xcc" +
	"t\x95\xa5UhwBWjS\xe9\xd8\xe5\xd6\x00P" +
	"\xbe\xe7\x03>\x81\xe1\xe01\xa0\xfa\x1e\xd5\x8a`=?" +
	"\xd6\xf4\xa6\x15O\x83\xdb\x1e\xb9\xb4\xb0\x056\xf0\xa4\x98" +
	"\xc1\xff.\xa60\xc5\xa8\xa9a\xb9\x9d\xb7I\xd5;\xf1" +
	"}\xf1.\xa0V<\xaa-A\xf2\x0c\x1b\xb6\x19\x01j" +
	"\xc3\xa3\xba'X\xbb\xbd\xdbmz\x00\xc7Q\x06\x10m" +
	"\x80$\xad\xdc\xa3L\x97\xe8&w\xb6\xd8\x83`\x0f\xfc" +
	"\x1b\x00\x00\xff\xff\xd3\xb4\xb7\xb7"

func init() {
	schemas.Register(schema_ec208700833b2f3f,
		0xc1e03ff39686963e,
		0xddc4e0a03e7ddada)
}
