// Code generated by capnpc-go. DO NOT EDIT.

package capnproto2

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// header information, attachable to blocks or miniblocks
type HeaderCapnp struct{ capnp.Struct }

// HeaderCapnp_TypeID is the unique identifier for the type HeaderCapnp.
const HeaderCapnp_TypeID = 0xe95bb16f30c95e7e

func NewHeaderCapnp(s *capnp.Segment) (HeaderCapnp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return HeaderCapnp{st}, err
}

func NewRootHeaderCapnp(s *capnp.Segment) (HeaderCapnp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return HeaderCapnp{st}, err
}

func ReadRootHeaderCapnp(msg *capnp.Message) (HeaderCapnp, error) {
	root, err := msg.RootPtr()
	return HeaderCapnp{root.Struct()}, err
}

func (s HeaderCapnp) String() string {
	str, _ := text.Marshal(0xe95bb16f30c95e7e, s.Struct)
	return str
}

func (s HeaderCapnp) Nonce() uint64 {
	return s.Struct.Uint64(0)
}

func (s HeaderCapnp) SetNonce(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HeaderCapnp) PrevHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HeaderCapnp) HasPrevHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HeaderCapnp) SetPrevHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s HeaderCapnp) PubKeys() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s HeaderCapnp) HasPubKeys() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HeaderCapnp) SetPubKeys(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPubKeys sets the pubKeys field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s HeaderCapnp) NewPubKeys(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s HeaderCapnp) ShardId() uint32 {
	return s.Struct.Uint32(8)
}

func (s HeaderCapnp) SetShardId(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s HeaderCapnp) TimeStamp() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s HeaderCapnp) HasTimeStamp() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s HeaderCapnp) SetTimeStamp(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s HeaderCapnp) Round() uint32 {
	return s.Struct.Uint32(12)
}

func (s HeaderCapnp) SetRound(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s HeaderCapnp) BlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s HeaderCapnp) HasBlockHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s HeaderCapnp) SetBlockHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s HeaderCapnp) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s HeaderCapnp) HasSignature() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s HeaderCapnp) SetSignature(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s HeaderCapnp) Commitment() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s HeaderCapnp) HasCommitment() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s HeaderCapnp) SetCommitment(v []byte) error {
	return s.Struct.SetData(5, v)
}

// HeaderCapnp_List is a list of HeaderCapnp.
type HeaderCapnp_List struct{ capnp.List }

// NewHeaderCapnp creates a new list of HeaderCapnp.
func NewHeaderCapnp_List(s *capnp.Segment, sz int32) (HeaderCapnp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6}, sz)
	return HeaderCapnp_List{l}, err
}

func (s HeaderCapnp_List) At(i int) HeaderCapnp { return HeaderCapnp{s.List.Struct(i)} }

func (s HeaderCapnp_List) Set(i int, v HeaderCapnp) error { return s.List.SetStruct(i, v.Struct) }

func (s HeaderCapnp_List) String() string {
	str, _ := text.MarshalList(0xe95bb16f30c95e7e, s.List)
	return str
}

// HeaderCapnp_Promise is a wrapper for a HeaderCapnp promised by a client call.
type HeaderCapnp_Promise struct{ *capnp.Pipeline }

func (p HeaderCapnp_Promise) Struct() (HeaderCapnp, error) {
	s, err := p.Pipeline.Struct()
	return HeaderCapnp{s}, err
}

const schema_9096faa5d587481d = "x\xdaD\xd0\xcfj\xd4\\\x1c\xc6\xf1\xe79If\xa6" +
	"\xd0\x96\x0e\x09\xbc\xaf\xd02Y\xb4\xd0E\xdb\xb4uS" +
	"\xdc\xa8\x15aT\x90\xc6\xec\x14\x0bg\x928\x09mr" +
	"\x86\x933\xfe\xd9\xd8\xa5\xe0J\x10\xdc\xba\xf2\x02\xdc\x0a" +
	".]x\x01z\x0d\xba\x10,\xd4\x85\"D\x922\xba" +
	"\xfc~x~\x1c8K?\xae\x88\x1d\xe7?\x01\x84\xff" +
	";\x9d\xfa\xe9\xe1\xc7m\xf5\xf6\xdeW\x84#\x8aze" +
	"\xf8\xec\xd3\x9b_\xaf^\xc0\xe9t\x81\x9dSm\xb9k" +
	"\xec\xbak\x1c\\\xbc\xcf\x9a\xd8\xab\x83L\x15i \x93" +
	"y\x9d\xcb2\x18\xab\xa0\xd2q0\xceM6\x1dm\xc5" +
	"\xaa\x08\xae\x1fkU&\xb7S\xf3H\xe9\xa3 mk" +
	"s\xac6+Y&#\xf58H\xa4\x91\xc1\xe8X\xc5" +
	"GA,'\xe5D+\xa3v\x83,\x95I\xaa\xb7Z" +
	"\xb94lcp\xad\x89\x032\xb4)\xea\xc3\x97\xaf\xc3" +
	"\xf7\x9f\x9f\x7f@h\x0b^]'\xe7\x81\x1d\xbec}" +
	"~\xe9\xe7N\xf9@\xe9B\x9a\\\x95\x1b\xbe4F\xc6" +
	"\x99\x1c\x1d\xa7\xbeQ~\xfbZ\xe5+\xed\x17y\x99_" +
	">O \\\xb5l\xc0&\xd0\xff\xb6\x0b\x84_,\x86" +
	"g\x82\xa4\xc7\xc6No\x02\xe1w\x8b\xe1o\xc1\xbe\xa0" +
	"G\x01\xf4\x7f\xee\x03\xe1\x99\xc5h\x89\x82}Kx\xb4" +
	"\x00w\x81\xfb@\xd4\xa3\xc5\xc8k\xdc\x16\x1em\xc0\xed" +
	"\xf3\x0e\x10-5\xbe\xdc\xb8cyt\x00\xf7\x02w\x81" +
	"\xc8k\xdco\xbccy\xec\x00\xeeJ\xbb_n|\xbd" +
	"\xf1\xae\xed\xb1\x0b\xb8k\xad\xaf6\xbe\xddx\xcf\xf1\xd8" +
	"\x03\xdcM\xde\x05\xa2\x8d\xc6\xf7(8(U\x19\xa7\x9c" +
	"\x83\xe0\x1cXOt\xfap(\xab\x0c\x00\x17 \xb8\x00" +
	"\x9eL\xa6\xa3[\xe9\x93\x8a\x8b\xe0\x81\xc5\x96\x17\xc1\x93" +
	"*\x93:\xb9\x91\xb0\x07\xc1\x1eX\x9b\xbcH##\x0b" +
	"p2;\x1dh5-\xff-\xdaO\x1c\xca\x0a\xccf" +
	"\x8b\xba\xca\xc7\xa54S\x0d\xa6\x7f-VE\x91\x9b\"" +
	"\x85U\x9a\x19\xfe\x09\x00\x00\xff\xffbu\x92\x85"

func init() {
	schemas.Register(schema_9096faa5d587481d,
		0xe95bb16f30c95e7e)
}
