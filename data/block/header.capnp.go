// Code generated by capnpc-go. DO NOT EDIT.

package block

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// header information, attachable to blocks or miniblocks
type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0xc072f9bae0228573

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0xc072f9bae0228573, s.Struct)
	return str
}

func (s Header) Nonce() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasNonce() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetNonce(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) PrevHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasPrevHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetPrevHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) PubKeys() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.DataList{List: p.List()}, err
}

func (s Header) HasPubKeys() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetPubKeys(v capnp.DataList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPubKeys sets the pubKeys field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Header) NewPubKeys(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Header) ShardId() uint32 {
	return s.Struct.Uint32(0)
}

func (s Header) SetShardId(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Header) TimeStamp() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Header) HasTimeStamp() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetTimeStamp(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Header) Round() uint32 {
	return s.Struct.Uint32(4)
}

func (s Header) SetRound(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Header) BlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Header) HasBlockHash() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetBlockHash(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Header) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Header) HasSignature() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Header) SetSignature(v []byte) error {
	return s.Struct.SetData(5, v)
}

func (s Header) Commitment() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return []byte(p.Data()), err
}

func (s Header) HasCommitment() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Header) SetCommitment(v []byte) error {
	return s.Struct.SetData(6, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0xc072f9bae0228573, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

const schema_9096faa5d587481d = "x\xdaD\xd01k\x14A\x1c\x05\xf0\xf7fv\xef\xae" +
	"\xf0\xc2-;`\x84\x84[$B\x8ahLD\x086" +
	"\xd1T\xa76\x19\xb7\xb3\x10\xe6\xf6Vo\xc9\xed\xee\xb1" +
	";'X\xa5\x12\xc1J\x10l\xad\xfc\x12\x01\xc1\xc6\x8f" +
	"\xa0\xb5\xa5 \x82\x814\x09\x86\x95\xb9p\xa6|?\xde" +
	"c\x86\x7f\xef\xd7}\xb1\xe5_\x15\x80^\xf6[M\xfd" +
	"\xfa\xfa\x8f\xa3\xd3\xea\x0b\xf42\xd9\xac\x0e\xde|\xfbt" +
	"\xf6\xe1\x1d\xfcv\x1b\x08\x8e\xcf\x82\xf3vp\xde\xbfs" +
	"\x97\x0d\xb1\xd3\x8c\x8c5\x9b\xc3I)\x92\x83\xcdqj" +
	"Fiu+1\xd3bzow0O\xfb\xa4\xf6(" +
	"\x9ag\xef?\xea\xcf\xdf\xdf~\x85\xf6\x04\x1f\xac\x93W" +
	"\x80-\x1e\xb1\xb9\x18E\x99_</\xab\xdc\xd8\xac," +
	"6\"c\xadI\xc6f8I#[F\xc3I\x99\x1c" +
	"\xd4QYEyVd\xbb\x17\x11\xd0k\xd2\x03<\x02" +
	"\xc1\xefm@\xff\x94\xd4'\x82\x01\xa9\xe8\xf0\xf8\x11\xa0" +
	"\xffH\xea\xbf\x82\x81\x10\x8a\x02\x08N\xf7\x00}\"\x19" +
	"\xf7(H\xa9(\x81\xb0\xcb= \xeeP2V\x14\x0c" +
	"<\xa9\xe8\x01a\xc0'@\xdcs\xbe\xe2\xdc\xa7\xa2\x0f" +
	"\x84\xd7\xb8\x0d\xc4\xcay\xe4\xbc\xe5)\xb6\x80pu\xde" +
	"_q\xbe\xee\xbc\xed+\xb6\x81\xf0\xc6\xdc\xd7\x9c\xdfv" +
	"\xdei)v\x80\xf0&\x9f\x02\xf1\x86\xf3\x1d\x0a\xf6\x8b" +
	"\xb2HRv!\xd8\x05\x9bi\x95\xbe\x1c\x98z\x0c`" +
	"a\x87\xd3\xd9\xf0q\xfa\xaa\xe6\x12\xb8/9\xe7%\xf0" +
	"\xb0\x1e\x9bj\xf4p\xc4\x0e\x04;`c\xb3<\x8d\xad" +
	"\xc9\xc1\xe9b\xda\xaf\xcaYq\xd9\x98\x1fq`jp" +
	"\xfc\xff\xc1:{Q\x18;\xab\xc0\xcbO$e\x9eg" +
	"6O!\x0b\xbb\xc0\x7f\x01\x00\x00\xff\xff\x9a\xbbw&"

func init() {
	schemas.Register(schema_9096faa5d587481d,
		0xc072f9bae0228573)
}
