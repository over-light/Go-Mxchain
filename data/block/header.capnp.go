// Code generated by capnpc-go. DO NOT EDIT.

package block

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// header information, attachable to blocks or miniblocks
type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0xc072f9bae0228573

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0xc072f9bae0228573, s.Struct)
	return str
}

func (s Header) Nonce() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasNonce() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetNonce(v capnp.UInt8List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNonce sets the nonce field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewNonce(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Header) PrevHash() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasPrevHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetPrevHash(v capnp.UInt8List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPrevHash sets the prevHash field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewPrevHash(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Header) PubKeys() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.PointerList{List: p.List()}, err
}

func (s Header) HasPubKeys() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetPubKeys(v capnp.PointerList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPubKeys sets the pubKeys field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Header) NewPubKeys(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Header) ShardId() uint32 {
	return s.Struct.Uint32(0)
}

func (s Header) SetShardId(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Header) TimeStamp() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasTimeStamp() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetTimeStamp(v capnp.UInt8List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewTimeStamp sets the timeStamp field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewTimeStamp(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s Header) Round() uint32 {
	return s.Struct.Uint32(4)
}

func (s Header) SetRound(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Header) BlockHash() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasBlockHash() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetBlockHash(v capnp.UInt8List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewBlockHash sets the blockHash field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewBlockHash(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s Header) Signature() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasSignature() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Header) SetSignature(v capnp.UInt8List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewSignature sets the signature field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewSignature(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s Header) Commitment() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasCommitment() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Header) SetCommitment(v capnp.UInt8List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewCommitment sets the commitment field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewCommitment(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0xc072f9bae0228573, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

const schema_9096faa5d587481d = "x\xdad\xd01\x8b\x13A\x1c\x05\xf0\xf7fw\x93\x9c" +
	"\x88p\xcc\x82\x0aJ\x16\xb1\x10\xf1\x8c9\x9bC\x10\x13" +
	"\xb1\x88\xda\xdc\xde\xda(\xa78\xc9\xae\x97\xc5\xecL\xd8" +
	"\x9d\xc8YY\x89p(\x1c\x08\xb6V\x82\x9f\xe1@\xb0" +
	"\xf1#hmica\xa9\xcd\xca\xec!B\xae\x9b\xff" +
	"\xef\xbd\x19\xfe\xcc\x95c\x1c\x88~pR\x00\xf1\xa9\xa0" +
	"UW/\xcf}?\xf8]~F|\x91\xac\xcf\x8e^" +
	"}\xfd\xf0\xe7\xdd>\x82v\x1b\xe8\xff\xda\xa3\\a[" +
	"\xae\xb0{u\xc8\x9a\xd8\xa8\xb3Yit\xba\xb6\x13\x98" +
	"\xb5J\xe9tlv{\xa9\xb2\xaa7\x9e\x99\xc9\xd3\xde" +
	"4SiV^\x9e\xa8\xb9\x9e_\x1b5\x03\xb0I\xc6" +
	">E\xfd\xe8\xed\xfb\xf8\xd3\xb7\xbd/\x88}\xc1\xe1\x05" +
	"\xf28\xd0\xe7\x01\xeb\xc3[Q\x1e\xe8'\xa6,\x94\xcd" +
	"\x8d\xbe\x14)k\xd5d\xaa\xc6\xb3,\xb2&j\x9e\xaf" +
	"\"SFE\xae\xf3\x1b\x87#\x10\x9f\xf7|\xc0'\xb0" +
	"\xfas\x1d\x88\x7fxL|\x0a\xae\x92!\x09H\xf2\x0e" +
	"\xb0E\x8f\xc9\x19\xc7B\x84\x14\x80<\xcd\x9b@\x12:" +
	"\x1fP\x90^H\x0f\x90\xd7\x1b\xdep|\xcb\xd5}/" +
	"\xa4\x0f\xc8!\xb7\x80d\xe0|\xdby\xc0\x90\x01 \xef" +
	"s\x1dH\xee9\x7f\xec\xbc\xe5\x87l\x01\xf2a\xd3\xdf" +
	"v\xbe\xeb\xbc\x1d\x84l\x03r\xd1\xb8u\xbe\xef\xbc\xd3" +
	"\x0a\xd9\x01\xe4\x1b>\x00\x92\xd7\xce?R\xb0\xab\x8d\x9e" +
	"d<\x01nzd\x0b\xc2\x1d\xeby\x99=\x1b\xa9j" +
	"\x0a`)z1_\x8c\xeff\xcf\xab\x7f\xbc\x94VS" +
	"U\xa6\xb7Sv \xd8\x01k\x9b\x17YbU\x01\xce" +
	"\x97\xaa\xdd\xd2,\xf4\xffb\xf3\xcb#U\x81\xd3\xe5e" +
	"\xaa|G+\xbb(\xc1#{NLQ\xe4\xb6\xc8\xe0" +
	"i\xbb\x94\xfd\x0d\x00\x00\xff\xff\xa8\x9f};"

func init() {
	schemas.Register(schema_9096faa5d587481d,
		0xc072f9bae0228573)
}
