// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peerAccountData.proto

package state

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_data "github.com/ElrondNetwork/elrond-go/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TimeStamp is a moment defined by epoch and round
type TimeStamp struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Round uint64 `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
}

func (m *TimeStamp) Reset()      { *m = TimeStamp{} }
func (*TimeStamp) ProtoMessage() {}
func (*TimeStamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bd0314afcce126, []int{0}
}
func (m *TimeStamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeStamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TimeStamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeStamp.Merge(m, src)
}
func (m *TimeStamp) XXX_Size() int {
	return m.Size()
}
func (m *TimeStamp) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeStamp.DiscardUnknown(m)
}

var xxx_messageInfo_TimeStamp proto.InternalMessageInfo

func (m *TimeStamp) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *TimeStamp) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

// TimePeriod holds start and end time
type TimePeriod struct {
	StartTime TimeStamp `protobuf:"bytes,1,opt,name=StartTime,proto3" json:"StartTime"`
	EndTime   TimeStamp `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime"`
}

func (m *TimePeriod) Reset()      { *m = TimePeriod{} }
func (*TimePeriod) ProtoMessage() {}
func (*TimePeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bd0314afcce126, []int{1}
}
func (m *TimePeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimePeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TimePeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimePeriod.Merge(m, src)
}
func (m *TimePeriod) XXX_Size() int {
	return m.Size()
}
func (m *TimePeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_TimePeriod.DiscardUnknown(m)
}

var xxx_messageInfo_TimePeriod proto.InternalMessageInfo

func (m *TimePeriod) GetStartTime() TimeStamp {
	if m != nil {
		return m.StartTime
	}
	return TimeStamp{}
}

func (m *TimePeriod) GetEndTime() TimeStamp {
	if m != nil {
		return m.EndTime
	}
	return TimeStamp{}
}

// SignRate is used to keep the number of success and failed signings
type SignRate struct {
	NrSuccess uint32 `protobuf:"varint,1,opt,name=NrSuccess,proto3" json:"NrSuccess,omitempty"`
	NrFailure uint32 `protobuf:"varint,2,opt,name=NrFailure,proto3" json:"NrFailure,omitempty"`
}

func (m *SignRate) Reset()      { *m = SignRate{} }
func (*SignRate) ProtoMessage() {}
func (*SignRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bd0314afcce126, []int{2}
}
func (m *SignRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SignRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignRate.Merge(m, src)
}
func (m *SignRate) XXX_Size() int {
	return m.Size()
}
func (m *SignRate) XXX_DiscardUnknown() {
	xxx_messageInfo_SignRate.DiscardUnknown(m)
}

var xxx_messageInfo_SignRate proto.InternalMessageInfo

func (m *SignRate) GetNrSuccess() uint32 {
	if m != nil {
		return m.NrSuccess
	}
	return 0
}

func (m *SignRate) GetNrFailure() uint32 {
	if m != nil {
		return m.NrFailure
	}
	return 0
}

// ValidatorApiResponse represents the data which is fetched from each validator for returning it in API call
type ValidatorApiResponse struct {
	NrLeaderSuccess    uint32  `protobuf:"varint,1,opt,name=NrLeaderSuccess,proto3" json:"nrLeaderSuccess"`
	NrLeaderFailure    uint32  `protobuf:"varint,2,opt,name=NrLeaderFailure,proto3" json:"nrLeaderFailure"`
	NrValidatorSuccess uint32  `protobuf:"varint,3,opt,name=NrValidatorSuccess,proto3" json:"nrValidatorSuccess"`
	NrValidatorFailure uint32  `protobuf:"varint,4,opt,name=NrValidatorFailure,proto3" json:"nrValidatorFailure"`
	Rating             float32 `protobuf:"fixed32,5,opt,name=Rating,proto3" json:"rating"`
	TempRating         float32 `protobuf:"fixed32,6,opt,name=TempRating,proto3" json:"tempRating"`
}

func (m *ValidatorApiResponse) Reset()      { *m = ValidatorApiResponse{} }
func (*ValidatorApiResponse) ProtoMessage() {}
func (*ValidatorApiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bd0314afcce126, []int{3}
}
func (m *ValidatorApiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorApiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidatorApiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorApiResponse.Merge(m, src)
}
func (m *ValidatorApiResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorApiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorApiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorApiResponse proto.InternalMessageInfo

func (m *ValidatorApiResponse) GetNrLeaderSuccess() uint32 {
	if m != nil {
		return m.NrLeaderSuccess
	}
	return 0
}

func (m *ValidatorApiResponse) GetNrLeaderFailure() uint32 {
	if m != nil {
		return m.NrLeaderFailure
	}
	return 0
}

func (m *ValidatorApiResponse) GetNrValidatorSuccess() uint32 {
	if m != nil {
		return m.NrValidatorSuccess
	}
	return 0
}

func (m *ValidatorApiResponse) GetNrValidatorFailure() uint32 {
	if m != nil {
		return m.NrValidatorFailure
	}
	return 0
}

func (m *ValidatorApiResponse) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *ValidatorApiResponse) GetTempRating() float32 {
	if m != nil {
		return m.TempRating
	}
	return 0
}

type PeerAccountData struct {
	BLSPublicKey               []byte        `protobuf:"bytes,1,opt,name=BLSPublicKey,proto3" json:"BLSPublicKey,omitempty"`
	SchnorrPublicKey           []byte        `protobuf:"bytes,2,opt,name=SchnorrPublicKey,proto3" json:"SchnorrPublicKey,omitempty"`
	RewardAddress              []byte        `protobuf:"bytes,3,opt,name=RewardAddress,proto3" json:"RewardAddress,omitempty"`
	Stake                      *math_big.Int `protobuf:"bytes,4,opt,name=Stake,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"Stake,omitempty"`
	AccumulatedFees            *math_big.Int `protobuf:"bytes,18,opt,name=AccumulatedFees,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"AccumulatedFees,omitempty"`
	JailTime                   TimePeriod    `protobuf:"bytes,5,opt,name=JailTime,proto3" json:"JailTime"`
	PastJailTimes              []TimePeriod  `protobuf:"bytes,6,rep,name=PastJailTimes,proto3" json:"PastJailTimes"`
	CurrentShardId             uint32        `protobuf:"varint,7,opt,name=CurrentShardId,proto3" json:"CurrentShardId,omitempty"`
	NextShardId                uint32        `protobuf:"varint,8,opt,name=NextShardId,proto3" json:"NextShardId,omitempty"`
	NodeInWaitingList          bool          `protobuf:"varint,9,opt,name=NodeInWaitingList,proto3" json:"NodeInWaitingList,omitempty"`
	UnStakedNonce              uint64        `protobuf:"varint,10,opt,name=UnStakedNonce,proto3" json:"UnStakedNonce,omitempty"`
	ValidatorSuccessRate       SignRate      `protobuf:"bytes,11,opt,name=ValidatorSuccessRate,proto3" json:"ValidatorSuccessRate"`
	LeaderSuccessRate          SignRate      `protobuf:"bytes,12,opt,name=LeaderSuccessRate,proto3" json:"LeaderSuccessRate"`
	NumSelectedInSuccessBlocks uint32        `protobuf:"varint,19,opt,name=NumSelectedInSuccessBlocks,proto3" json:"NumSelectedInSuccessBlocks,omitempty"`
	IndexInList                int32         `protobuf:"varint,20,opt,name=IndexInList,proto3" json:"IndexInList,omitempty"`
	List                       string        `protobuf:"bytes,21,opt,name=List,proto3" json:"List,omitempty"`
	CodeHash                   []byte        `protobuf:"bytes,13,opt,name=CodeHash,proto3" json:"CodeHash,omitempty"`
	Rating                     uint32        `protobuf:"varint,14,opt,name=Rating,proto3" json:"Rating,omitempty"`
	TempRating                 uint32        `protobuf:"varint,17,opt,name=TempRating,proto3" json:"TempRating,omitempty"`
	RootHash                   []byte        `protobuf:"bytes,15,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	Nonce                      uint64        `protobuf:"varint,16,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
}

func (m *PeerAccountData) Reset()      { *m = PeerAccountData{} }
func (*PeerAccountData) ProtoMessage() {}
func (*PeerAccountData) Descriptor() ([]byte, []int) {
	return fileDescriptor_26bd0314afcce126, []int{4}
}
func (m *PeerAccountData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerAccountData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PeerAccountData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerAccountData.Merge(m, src)
}
func (m *PeerAccountData) XXX_Size() int {
	return m.Size()
}
func (m *PeerAccountData) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerAccountData.DiscardUnknown(m)
}

var xxx_messageInfo_PeerAccountData proto.InternalMessageInfo

func (m *PeerAccountData) GetBLSPublicKey() []byte {
	if m != nil {
		return m.BLSPublicKey
	}
	return nil
}

func (m *PeerAccountData) GetSchnorrPublicKey() []byte {
	if m != nil {
		return m.SchnorrPublicKey
	}
	return nil
}

func (m *PeerAccountData) GetRewardAddress() []byte {
	if m != nil {
		return m.RewardAddress
	}
	return nil
}

func (m *PeerAccountData) GetStake() *math_big.Int {
	if m != nil {
		return m.Stake
	}
	return nil
}

func (m *PeerAccountData) GetAccumulatedFees() *math_big.Int {
	if m != nil {
		return m.AccumulatedFees
	}
	return nil
}

func (m *PeerAccountData) GetJailTime() TimePeriod {
	if m != nil {
		return m.JailTime
	}
	return TimePeriod{}
}

func (m *PeerAccountData) GetPastJailTimes() []TimePeriod {
	if m != nil {
		return m.PastJailTimes
	}
	return nil
}

func (m *PeerAccountData) GetCurrentShardId() uint32 {
	if m != nil {
		return m.CurrentShardId
	}
	return 0
}

func (m *PeerAccountData) GetNextShardId() uint32 {
	if m != nil {
		return m.NextShardId
	}
	return 0
}

func (m *PeerAccountData) GetNodeInWaitingList() bool {
	if m != nil {
		return m.NodeInWaitingList
	}
	return false
}

func (m *PeerAccountData) GetUnStakedNonce() uint64 {
	if m != nil {
		return m.UnStakedNonce
	}
	return 0
}

func (m *PeerAccountData) GetValidatorSuccessRate() SignRate {
	if m != nil {
		return m.ValidatorSuccessRate
	}
	return SignRate{}
}

func (m *PeerAccountData) GetLeaderSuccessRate() SignRate {
	if m != nil {
		return m.LeaderSuccessRate
	}
	return SignRate{}
}

func (m *PeerAccountData) GetNumSelectedInSuccessBlocks() uint32 {
	if m != nil {
		return m.NumSelectedInSuccessBlocks
	}
	return 0
}

func (m *PeerAccountData) GetIndexInList() int32 {
	if m != nil {
		return m.IndexInList
	}
	return 0
}

func (m *PeerAccountData) GetList() string {
	if m != nil {
		return m.List
	}
	return ""
}

func (m *PeerAccountData) GetCodeHash() []byte {
	if m != nil {
		return m.CodeHash
	}
	return nil
}

func (m *PeerAccountData) GetRating() uint32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *PeerAccountData) GetTempRating() uint32 {
	if m != nil {
		return m.TempRating
	}
	return 0
}

func (m *PeerAccountData) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *PeerAccountData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*TimeStamp)(nil), "proto.TimeStamp")
	proto.RegisterType((*TimePeriod)(nil), "proto.TimePeriod")
	proto.RegisterType((*SignRate)(nil), "proto.SignRate")
	proto.RegisterType((*ValidatorApiResponse)(nil), "proto.ValidatorApiResponse")
	proto.RegisterType((*PeerAccountData)(nil), "proto.PeerAccountData")
}

func init() { proto.RegisterFile("peerAccountData.proto", fileDescriptor_26bd0314afcce126) }

var fileDescriptor_26bd0314afcce126 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0xb3, 0x49, 0x9b, 0x4c, 0x93, 0x4d, 0x33, 0xdb, 0x5d, 0x59, 0x15, 0x72, 0xa2, 0x08,
	0xa1, 0x08, 0xb1, 0x09, 0x62, 0x91, 0x38, 0xa0, 0x05, 0x25, 0x21, 0x11, 0x86, 0xca, 0x8a, 0xc6,
	0x0b, 0x48, 0x70, 0x9a, 0x78, 0x06, 0xc7, 0xaa, 0x33, 0x13, 0x8d, 0xc7, 0x6a, 0xb9, 0xf1, 0x13,
	0xf8, 0x11, 0x1c, 0x10, 0xbf, 0xa4, 0xc7, 0x1e, 0x7b, 0x2a, 0xd4, 0xbd, 0xa0, 0x9e, 0x2a, 0xf1,
	0x07, 0x90, 0xc7, 0x76, 0x1a, 0x27, 0x51, 0x4e, 0x9c, 0x92, 0xf7, 0xbd, 0xef, 0xfb, 0xde, 0xcc,
	0xf3, 0x7b, 0x03, 0x5e, 0x2e, 0x29, 0x15, 0x03, 0xc7, 0xe1, 0x21, 0x93, 0x5f, 0x61, 0x89, 0x7b,
	0x4b, 0xc1, 0x25, 0x87, 0x65, 0xf5, 0x73, 0xfa, 0xda, 0xf5, 0xe4, 0x3c, 0x9c, 0xf5, 0x1c, 0xbe,
	0xe8, 0xbb, 0xdc, 0xe5, 0x7d, 0x05, 0xcf, 0xc2, 0x9f, 0x55, 0xa4, 0x02, 0xf5, 0x2f, 0x51, 0x75,
	0x3e, 0x03, 0xd5, 0x77, 0xde, 0x82, 0xda, 0x12, 0x2f, 0x96, 0xf0, 0x04, 0x94, 0xc7, 0x4b, 0xee,
	0xcc, 0x75, 0xad, 0xad, 0x75, 0x4b, 0x28, 0x09, 0x62, 0x14, 0xf1, 0x90, 0x11, 0xbd, 0x98, 0xa0,
	0x2a, 0xe8, 0x48, 0x00, 0x62, 0xe1, 0x94, 0x0a, 0x8f, 0x13, 0xf8, 0x29, 0xa8, 0xda, 0x12, 0x0b,
	0x19, 0x43, 0x4a, 0x7d, 0xf4, 0xc9, 0x71, 0x52, 0xa1, 0xb7, 0xb2, 0x1f, 0x96, 0xae, 0x6e, 0x5b,
	0x05, 0xf4, 0x44, 0x84, 0x1f, 0x83, 0xc3, 0x31, 0x23, 0x4a, 0x53, 0xdc, 0xab, 0xc9, 0x68, 0x9d,
	0x09, 0xa8, 0xd8, 0x9e, 0xcb, 0x10, 0x96, 0x14, 0xbe, 0x07, 0xaa, 0x96, 0xb0, 0x43, 0xc7, 0xa1,
	0x41, 0xa0, 0x6a, 0xd6, 0xd1, 0x13, 0x90, 0x64, 0x27, 0xd8, 0xf3, 0x43, 0x91, 0xb8, 0xab, 0x6c,
	0x0a, 0x74, 0x7e, 0x2f, 0x82, 0x93, 0xef, 0xb1, 0xef, 0x11, 0x2c, 0xb9, 0x18, 0x2c, 0x3d, 0x44,
	0x83, 0x25, 0x67, 0x01, 0x85, 0x6f, 0x41, 0xc3, 0x12, 0x67, 0x14, 0x13, 0x9a, 0xb7, 0x1e, 0xbe,
	0x78, 0xb8, 0x6d, 0x35, 0x58, 0x3e, 0x85, 0x36, 0xb9, 0xeb, 0xf2, 0x5c, 0xed, 0xbc, 0x3c, 0x4d,
	0xa1, 0x4d, 0x2e, 0x9c, 0x00, 0x68, 0x89, 0xd5, 0xb9, 0xb2, 0x03, 0x3c, 0x53, 0x0e, 0xaf, 0x1e,
	0x6e, 0x5b, 0x90, 0x6d, 0x65, 0xd1, 0x0e, 0xc5, 0x86, 0x4f, 0x76, 0x92, 0xd2, 0x4e, 0x9f, 0xec,
	0x30, 0x3b, 0x14, 0x9d, 0x7f, 0x0f, 0x41, 0x63, 0x9a, 0x9f, 0x36, 0xd8, 0x01, 0xb5, 0xe1, 0x99,
	0x3d, 0x0d, 0x67, 0xbe, 0xe7, 0x7c, 0x4b, 0x7f, 0x51, 0xed, 0xa9, 0xa1, 0x1c, 0x06, 0x3f, 0x04,
	0xc7, 0xb6, 0x33, 0x67, 0x5c, 0x88, 0x27, 0x5e, 0x51, 0xf1, 0xb6, 0x70, 0xf8, 0x3e, 0xa8, 0x23,
	0x7a, 0x81, 0x05, 0x19, 0x10, 0x22, 0xb2, 0xeb, 0xd6, 0x50, 0x1e, 0x84, 0x3f, 0x81, 0xb2, 0x2d,
	0xf1, 0x79, 0x72, 0x89, 0xda, 0x70, 0xfc, 0xe7, 0x5f, 0xad, 0xc1, 0x02, 0xcb, 0x79, 0x7f, 0xe6,
	0xb9, 0x3d, 0x93, 0xc9, 0xcf, 0xd7, 0xc6, 0x7e, 0xec, 0x0b, 0xce, 0x88, 0x45, 0xe5, 0x05, 0x17,
	0xe7, 0x7d, 0xaa, 0xa2, 0xd7, 0x2e, 0xef, 0x93, 0x78, 0x59, 0x86, 0x9e, 0x6b, 0x32, 0x39, 0xc2,
	0x81, 0xa4, 0x02, 0x25, 0x9e, 0x90, 0x83, 0xc6, 0xc0, 0x71, 0xc2, 0x45, 0xe8, 0x63, 0x49, 0xc9,
	0x84, 0xd2, 0x40, 0x87, 0xff, 0x67, 0x99, 0x4d, 0x77, 0xf8, 0x06, 0x54, 0xbe, 0xc1, 0x9e, 0xaf,
	0x26, 0xbf, 0xac, 0x26, 0xbf, 0xb9, 0x36, 0xf9, 0xc9, 0x4e, 0xa5, 0xa3, 0xbf, 0x22, 0xc2, 0xb7,
	0xa0, 0x3e, 0xc5, 0x81, 0xcc, 0xe2, 0x40, 0x3f, 0x68, 0x3f, 0xdb, 0xa7, 0xcc, 0xb3, 0xe1, 0x07,
	0xe0, 0xf9, 0x28, 0x14, 0x82, 0x32, 0x69, 0xcf, 0xb1, 0x20, 0x26, 0xd1, 0x0f, 0xd5, 0x56, 0x6c,
	0xa0, 0xb0, 0x0d, 0x8e, 0x2c, 0x7a, 0xb9, 0x22, 0x55, 0x14, 0x69, 0x1d, 0x82, 0x1f, 0x81, 0xa6,
	0xc5, 0x09, 0x35, 0xd9, 0x0f, 0xd8, 0x93, 0x1e, 0x73, 0xcf, 0xbc, 0x40, 0xea, 0xd5, 0xb6, 0xd6,
	0xad, 0xa0, 0xed, 0x44, 0xfc, 0x7d, 0xbf, 0x63, 0xaa, 0xcf, 0xc4, 0xe2, 0xcc, 0xa1, 0x3a, 0x50,
	0xcf, 0x48, 0x1e, 0x84, 0xe6, 0xda, 0x3e, 0x66, 0x93, 0x8d, 0x25, 0xd5, 0x8f, 0x54, 0x77, 0x1a,
	0xe9, 0x1d, 0xb3, 0xdd, 0x4f, 0x6f, 0xb8, 0x53, 0x02, 0x47, 0xa0, 0x99, 0xdf, 0xd2, 0xd8, 0xa7,
	0xb6, 0xcf, 0x67, 0x9b, 0x0f, 0xbf, 0x00, 0xa7, 0x56, 0xb8, 0xb0, 0xa9, 0x4f, 0x1d, 0x49, 0x89,
	0xc9, 0xd2, 0xdc, 0xd0, 0xe7, 0xce, 0x79, 0xa0, 0xbf, 0x50, 0x4d, 0xd9, 0xc3, 0x88, 0xbb, 0x68,
	0x32, 0x42, 0x2f, 0x4d, 0xa6, 0xba, 0x73, 0xd2, 0xd6, 0xba, 0x65, 0xb4, 0x0e, 0x41, 0x08, 0x4a,
	0x2a, 0xf5, 0xb2, 0xad, 0x75, 0xab, 0x48, 0xfd, 0x87, 0xa7, 0xa0, 0x32, 0xe2, 0x84, 0x7e, 0x8d,
	0x83, 0xb9, 0x5e, 0x57, 0x6b, 0xb0, 0x8a, 0xe1, 0x2b, 0x70, 0x80, 0x70, 0xdc, 0x55, 0xfd, 0xb9,
	0xaa, 0x9e, 0x46, 0xd0, 0x00, 0xe0, 0x1d, 0x5d, 0x2c, 0xd3, 0x5c, 0x53, 0xe5, 0xd6, 0x90, 0xd8,
	0x13, 0x71, 0x2e, 0x95, 0x67, 0x23, 0xf1, 0xcc, 0xe2, 0xf8, 0x69, 0x4f, 0xbe, 0xc9, 0x71, 0xf2,
	0xb4, 0xab, 0x60, 0xf8, 0xe5, 0xf5, 0x9d, 0x51, 0xb8, 0xb9, 0x33, 0x0a, 0x8f, 0x77, 0x86, 0xf6,
	0x6b, 0x64, 0x68, 0x7f, 0x44, 0x86, 0x76, 0x15, 0x19, 0xda, 0x75, 0x64, 0x68, 0x37, 0x91, 0xa1,
	0xfd, 0x1d, 0x19, 0xda, 0x3f, 0x91, 0x51, 0x78, 0x8c, 0x0c, 0xed, 0xb7, 0x7b, 0xa3, 0x70, 0x7d,
	0x6f, 0x14, 0x6e, 0xee, 0x8d, 0xc2, 0x8f, 0xe5, 0x40, 0x62, 0x49, 0x67, 0x07, 0xaa, 0xcb, 0x6f,
	0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x49, 0x50, 0xbe, 0xaa, 0x06, 0x00, 0x00,
}

func (this *TimeStamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeStamp)
	if !ok {
		that2, ok := that.(TimeStamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	return true
}
func (this *TimePeriod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimePeriod)
	if !ok {
		that2, ok := that.(TimePeriod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartTime.Equal(&that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(&that1.EndTime) {
		return false
	}
	return true
}
func (this *SignRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignRate)
	if !ok {
		that2, ok := that.(SignRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NrSuccess != that1.NrSuccess {
		return false
	}
	if this.NrFailure != that1.NrFailure {
		return false
	}
	return true
}
func (this *ValidatorApiResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorApiResponse)
	if !ok {
		that2, ok := that.(ValidatorApiResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NrLeaderSuccess != that1.NrLeaderSuccess {
		return false
	}
	if this.NrLeaderFailure != that1.NrLeaderFailure {
		return false
	}
	if this.NrValidatorSuccess != that1.NrValidatorSuccess {
		return false
	}
	if this.NrValidatorFailure != that1.NrValidatorFailure {
		return false
	}
	if this.Rating != that1.Rating {
		return false
	}
	if this.TempRating != that1.TempRating {
		return false
	}
	return true
}
func (this *PeerAccountData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerAccountData)
	if !ok {
		that2, ok := that.(PeerAccountData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BLSPublicKey, that1.BLSPublicKey) {
		return false
	}
	if !bytes.Equal(this.SchnorrPublicKey, that1.SchnorrPublicKey) {
		return false
	}
	if !bytes.Equal(this.RewardAddress, that1.RewardAddress) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.Stake, that1.Stake) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.AccumulatedFees, that1.AccumulatedFees) {
			return false
		}
	}
	if !this.JailTime.Equal(&that1.JailTime) {
		return false
	}
	if len(this.PastJailTimes) != len(that1.PastJailTimes) {
		return false
	}
	for i := range this.PastJailTimes {
		if !this.PastJailTimes[i].Equal(&that1.PastJailTimes[i]) {
			return false
		}
	}
	if this.CurrentShardId != that1.CurrentShardId {
		return false
	}
	if this.NextShardId != that1.NextShardId {
		return false
	}
	if this.NodeInWaitingList != that1.NodeInWaitingList {
		return false
	}
	if this.UnStakedNonce != that1.UnStakedNonce {
		return false
	}
	if !this.ValidatorSuccessRate.Equal(&that1.ValidatorSuccessRate) {
		return false
	}
	if !this.LeaderSuccessRate.Equal(&that1.LeaderSuccessRate) {
		return false
	}
	if this.NumSelectedInSuccessBlocks != that1.NumSelectedInSuccessBlocks {
		return false
	}
	if this.IndexInList != that1.IndexInList {
		return false
	}
	if this.List != that1.List {
		return false
	}
	if !bytes.Equal(this.CodeHash, that1.CodeHash) {
		return false
	}
	if this.Rating != that1.Rating {
		return false
	}
	if this.TempRating != that1.TempRating {
		return false
	}
	if !bytes.Equal(this.RootHash, that1.RootHash) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	return true
}
func (this *TimeStamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&state.TimeStamp{")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimePeriod) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&state.TimePeriod{")
	s = append(s, "StartTime: "+strings.Replace(this.StartTime.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "EndTime: "+strings.Replace(this.EndTime.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignRate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&state.SignRate{")
	s = append(s, "NrSuccess: "+fmt.Sprintf("%#v", this.NrSuccess)+",\n")
	s = append(s, "NrFailure: "+fmt.Sprintf("%#v", this.NrFailure)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidatorApiResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&state.ValidatorApiResponse{")
	s = append(s, "NrLeaderSuccess: "+fmt.Sprintf("%#v", this.NrLeaderSuccess)+",\n")
	s = append(s, "NrLeaderFailure: "+fmt.Sprintf("%#v", this.NrLeaderFailure)+",\n")
	s = append(s, "NrValidatorSuccess: "+fmt.Sprintf("%#v", this.NrValidatorSuccess)+",\n")
	s = append(s, "NrValidatorFailure: "+fmt.Sprintf("%#v", this.NrValidatorFailure)+",\n")
	s = append(s, "Rating: "+fmt.Sprintf("%#v", this.Rating)+",\n")
	s = append(s, "TempRating: "+fmt.Sprintf("%#v", this.TempRating)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerAccountData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&state.PeerAccountData{")
	s = append(s, "BLSPublicKey: "+fmt.Sprintf("%#v", this.BLSPublicKey)+",\n")
	s = append(s, "SchnorrPublicKey: "+fmt.Sprintf("%#v", this.SchnorrPublicKey)+",\n")
	s = append(s, "RewardAddress: "+fmt.Sprintf("%#v", this.RewardAddress)+",\n")
	s = append(s, "Stake: "+fmt.Sprintf("%#v", this.Stake)+",\n")
	s = append(s, "AccumulatedFees: "+fmt.Sprintf("%#v", this.AccumulatedFees)+",\n")
	s = append(s, "JailTime: "+strings.Replace(this.JailTime.GoString(), `&`, ``, 1)+",\n")
	if this.PastJailTimes != nil {
		vs := make([]TimePeriod, len(this.PastJailTimes))
		for i := range vs {
			vs[i] = this.PastJailTimes[i]
		}
		s = append(s, "PastJailTimes: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "CurrentShardId: "+fmt.Sprintf("%#v", this.CurrentShardId)+",\n")
	s = append(s, "NextShardId: "+fmt.Sprintf("%#v", this.NextShardId)+",\n")
	s = append(s, "NodeInWaitingList: "+fmt.Sprintf("%#v", this.NodeInWaitingList)+",\n")
	s = append(s, "UnStakedNonce: "+fmt.Sprintf("%#v", this.UnStakedNonce)+",\n")
	s = append(s, "ValidatorSuccessRate: "+strings.Replace(this.ValidatorSuccessRate.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "LeaderSuccessRate: "+strings.Replace(this.LeaderSuccessRate.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "NumSelectedInSuccessBlocks: "+fmt.Sprintf("%#v", this.NumSelectedInSuccessBlocks)+",\n")
	s = append(s, "IndexInList: "+fmt.Sprintf("%#v", this.IndexInList)+",\n")
	s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	s = append(s, "CodeHash: "+fmt.Sprintf("%#v", this.CodeHash)+",\n")
	s = append(s, "Rating: "+fmt.Sprintf("%#v", this.Rating)+",\n")
	s = append(s, "TempRating: "+fmt.Sprintf("%#v", this.TempRating)+",\n")
	s = append(s, "RootHash: "+fmt.Sprintf("%#v", this.RootHash)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPeerAccountData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TimeStamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeStamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeStamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Epoch != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimePeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimePeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimePeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SignRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NrFailure != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NrFailure))
		i--
		dAtA[i] = 0x10
	}
	if m.NrSuccess != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NrSuccess))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorApiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorApiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorApiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TempRating != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TempRating))))
		i--
		dAtA[i] = 0x35
	}
	if m.Rating != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rating))))
		i--
		dAtA[i] = 0x2d
	}
	if m.NrValidatorFailure != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NrValidatorFailure))
		i--
		dAtA[i] = 0x20
	}
	if m.NrValidatorSuccess != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NrValidatorSuccess))
		i--
		dAtA[i] = 0x18
	}
	if m.NrLeaderFailure != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NrLeaderFailure))
		i--
		dAtA[i] = 0x10
	}
	if m.NrLeaderSuccess != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NrLeaderSuccess))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerAccountData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerAccountData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerAccountData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		i -= len(m.List)
		copy(dAtA[i:], m.List)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.List)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.IndexInList != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.IndexInList))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.NumSelectedInSuccessBlocks != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NumSelectedInSuccessBlocks))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.AccumulatedFees)
		i -= size
		if _, err := __caster.MarshalTo(m.AccumulatedFees, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if m.TempRating != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.TempRating))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Nonce != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Rating != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.Rating))
		i--
		dAtA[i] = 0x70
	}
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size, err := m.LeaderSuccessRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.ValidatorSuccessRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.UnStakedNonce != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.UnStakedNonce))
		i--
		dAtA[i] = 0x50
	}
	if m.NodeInWaitingList {
		i--
		if m.NodeInWaitingList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.NextShardId != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.NextShardId))
		i--
		dAtA[i] = 0x40
	}
	if m.CurrentShardId != 0 {
		i = encodeVarintPeerAccountData(dAtA, i, uint64(m.CurrentShardId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PastJailTimes) > 0 {
		for iNdEx := len(m.PastJailTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PastJailTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.JailTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.Stake)
		i -= size
		if _, err := __caster.MarshalTo(m.Stake, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPeerAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SchnorrPublicKey) > 0 {
		i -= len(m.SchnorrPublicKey)
		copy(dAtA[i:], m.SchnorrPublicKey)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.SchnorrPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BLSPublicKey) > 0 {
		i -= len(m.BLSPublicKey)
		copy(dAtA[i:], m.BLSPublicKey)
		i = encodeVarintPeerAccountData(dAtA, i, uint64(len(m.BLSPublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPeerAccountData(dAtA []byte, offset int, v uint64) int {
	offset -= sovPeerAccountData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimeStamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovPeerAccountData(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovPeerAccountData(uint64(m.Round))
	}
	return n
}

func (m *TimePeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StartTime.Size()
	n += 1 + l + sovPeerAccountData(uint64(l))
	l = m.EndTime.Size()
	n += 1 + l + sovPeerAccountData(uint64(l))
	return n
}

func (m *SignRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NrSuccess != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NrSuccess))
	}
	if m.NrFailure != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NrFailure))
	}
	return n
}

func (m *ValidatorApiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NrLeaderSuccess != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NrLeaderSuccess))
	}
	if m.NrLeaderFailure != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NrLeaderFailure))
	}
	if m.NrValidatorSuccess != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NrValidatorSuccess))
	}
	if m.NrValidatorFailure != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NrValidatorFailure))
	}
	if m.Rating != 0 {
		n += 5
	}
	if m.TempRating != 0 {
		n += 5
	}
	return n
}

func (m *PeerAccountData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BLSPublicKey)
	if l > 0 {
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	l = len(m.SchnorrPublicKey)
	if l > 0 {
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.Stake)
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	l = m.JailTime.Size()
	n += 1 + l + sovPeerAccountData(uint64(l))
	if len(m.PastJailTimes) > 0 {
		for _, e := range m.PastJailTimes {
			l = e.Size()
			n += 1 + l + sovPeerAccountData(uint64(l))
		}
	}
	if m.CurrentShardId != 0 {
		n += 1 + sovPeerAccountData(uint64(m.CurrentShardId))
	}
	if m.NextShardId != 0 {
		n += 1 + sovPeerAccountData(uint64(m.NextShardId))
	}
	if m.NodeInWaitingList {
		n += 2
	}
	if m.UnStakedNonce != 0 {
		n += 1 + sovPeerAccountData(uint64(m.UnStakedNonce))
	}
	l = m.ValidatorSuccessRate.Size()
	n += 1 + l + sovPeerAccountData(uint64(l))
	l = m.LeaderSuccessRate.Size()
	n += 1 + l + sovPeerAccountData(uint64(l))
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	if m.Rating != 0 {
		n += 1 + sovPeerAccountData(uint64(m.Rating))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovPeerAccountData(uint64(l))
	}
	if m.Nonce != 0 {
		n += 2 + sovPeerAccountData(uint64(m.Nonce))
	}
	if m.TempRating != 0 {
		n += 2 + sovPeerAccountData(uint64(m.TempRating))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.AccumulatedFees)
		n += 2 + l + sovPeerAccountData(uint64(l))
	}
	if m.NumSelectedInSuccessBlocks != 0 {
		n += 2 + sovPeerAccountData(uint64(m.NumSelectedInSuccessBlocks))
	}
	if m.IndexInList != 0 {
		n += 2 + sovPeerAccountData(uint64(m.IndexInList))
	}
	l = len(m.List)
	if l > 0 {
		n += 2 + l + sovPeerAccountData(uint64(l))
	}
	return n
}

func sovPeerAccountData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPeerAccountData(x uint64) (n int) {
	return sovPeerAccountData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TimeStamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeStamp{`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimePeriod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimePeriod{`,
		`StartTime:` + strings.Replace(strings.Replace(this.StartTime.String(), "TimeStamp", "TimeStamp", 1), `&`, ``, 1) + `,`,
		`EndTime:` + strings.Replace(strings.Replace(this.EndTime.String(), "TimeStamp", "TimeStamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignRate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignRate{`,
		`NrSuccess:` + fmt.Sprintf("%v", this.NrSuccess) + `,`,
		`NrFailure:` + fmt.Sprintf("%v", this.NrFailure) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidatorApiResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidatorApiResponse{`,
		`NrLeaderSuccess:` + fmt.Sprintf("%v", this.NrLeaderSuccess) + `,`,
		`NrLeaderFailure:` + fmt.Sprintf("%v", this.NrLeaderFailure) + `,`,
		`NrValidatorSuccess:` + fmt.Sprintf("%v", this.NrValidatorSuccess) + `,`,
		`NrValidatorFailure:` + fmt.Sprintf("%v", this.NrValidatorFailure) + `,`,
		`Rating:` + fmt.Sprintf("%v", this.Rating) + `,`,
		`TempRating:` + fmt.Sprintf("%v", this.TempRating) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerAccountData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPastJailTimes := "[]TimePeriod{"
	for _, f := range this.PastJailTimes {
		repeatedStringForPastJailTimes += strings.Replace(strings.Replace(f.String(), "TimePeriod", "TimePeriod", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPastJailTimes += "}"
	s := strings.Join([]string{`&PeerAccountData{`,
		`BLSPublicKey:` + fmt.Sprintf("%v", this.BLSPublicKey) + `,`,
		`SchnorrPublicKey:` + fmt.Sprintf("%v", this.SchnorrPublicKey) + `,`,
		`RewardAddress:` + fmt.Sprintf("%v", this.RewardAddress) + `,`,
		`Stake:` + fmt.Sprintf("%v", this.Stake) + `,`,
		`JailTime:` + strings.Replace(strings.Replace(this.JailTime.String(), "TimePeriod", "TimePeriod", 1), `&`, ``, 1) + `,`,
		`PastJailTimes:` + repeatedStringForPastJailTimes + `,`,
		`CurrentShardId:` + fmt.Sprintf("%v", this.CurrentShardId) + `,`,
		`NextShardId:` + fmt.Sprintf("%v", this.NextShardId) + `,`,
		`NodeInWaitingList:` + fmt.Sprintf("%v", this.NodeInWaitingList) + `,`,
		`UnStakedNonce:` + fmt.Sprintf("%v", this.UnStakedNonce) + `,`,
		`ValidatorSuccessRate:` + strings.Replace(strings.Replace(this.ValidatorSuccessRate.String(), "SignRate", "SignRate", 1), `&`, ``, 1) + `,`,
		`LeaderSuccessRate:` + strings.Replace(strings.Replace(this.LeaderSuccessRate.String(), "SignRate", "SignRate", 1), `&`, ``, 1) + `,`,
		`CodeHash:` + fmt.Sprintf("%v", this.CodeHash) + `,`,
		`Rating:` + fmt.Sprintf("%v", this.Rating) + `,`,
		`RootHash:` + fmt.Sprintf("%v", this.RootHash) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`TempRating:` + fmt.Sprintf("%v", this.TempRating) + `,`,
		`AccumulatedFees:` + fmt.Sprintf("%v", this.AccumulatedFees) + `,`,
		`NumSelectedInSuccessBlocks:` + fmt.Sprintf("%v", this.NumSelectedInSuccessBlocks) + `,`,
		`IndexInList:` + fmt.Sprintf("%v", this.IndexInList) + `,`,
		`List:` + fmt.Sprintf("%v", this.List) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPeerAccountData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TimeStamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeerAccountData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeStamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeStamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeerAccountData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimePeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeerAccountData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimePeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimePeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeerAccountData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeerAccountData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrSuccess", wireType)
			}
			m.NrSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrSuccess |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrFailure", wireType)
			}
			m.NrFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrFailure |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeerAccountData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorApiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeerAccountData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorApiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorApiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrLeaderSuccess", wireType)
			}
			m.NrLeaderSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrLeaderSuccess |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrLeaderFailure", wireType)
			}
			m.NrLeaderFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrLeaderFailure |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrValidatorSuccess", wireType)
			}
			m.NrValidatorSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrValidatorSuccess |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrValidatorFailure", wireType)
			}
			m.NrValidatorFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrValidatorFailure |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rating = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempRating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TempRating = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPeerAccountData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerAccountData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeerAccountData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerAccountData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerAccountData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BLSPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BLSPublicKey = append(m.BLSPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BLSPublicKey == nil {
				m.BLSPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchnorrPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchnorrPublicKey = append(m.SchnorrPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SchnorrPublicKey == nil {
				m.SchnorrPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = append(m.RewardAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAddress == nil {
				m.RewardAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Stake = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JailTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PastJailTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PastJailTimes = append(m.PastJailTimes, TimePeriod{})
			if err := m.PastJailTimes[len(m.PastJailTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentShardId", wireType)
			}
			m.CurrentShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextShardId", wireType)
			}
			m.NextShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInWaitingList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeInWaitingList = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedNonce", wireType)
			}
			m.UnStakedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnStakedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSuccessRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorSuccessRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderSuccessRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaderSuccessRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = append(m.CodeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeHash == nil {
				m.CodeHash = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			m.Rating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rating |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempRating", wireType)
			}
			m.TempRating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempRating |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFees", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.AccumulatedFees = tmp
				}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSelectedInSuccessBlocks", wireType)
			}
			m.NumSelectedInSuccessBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSelectedInSuccessBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexInList", wireType)
			}
			m.IndexInList = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexInList |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeerAccountData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeerAccountData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPeerAccountData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPeerAccountData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeerAccountData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPeerAccountData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPeerAccountData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPeerAccountData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPeerAccountData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPeerAccountData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPeerAccountData = fmt.Errorf("proto: unexpected end of group")
)
