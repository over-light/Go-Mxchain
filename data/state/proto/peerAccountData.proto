syntax = "proto3";

package proto;

option go_package = "state";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";



// TimeStamp is a moment defined by epoch and round
message TimeStamp {
	uint64 Epoch = 1;
	uint64 Round = 2;
}

// TimePeriod holds start and end time
message TimePeriod {
	TimeStamp StartTime = 1 [(gogoproto.nullable) = false];
	TimeStamp EndTime   = 2 [(gogoproto.nullable) = false];
}

// SignRate is used to keep the number of success and failed signings
message SignRate {
	uint32 NrSuccess = 1;
	uint32 NrFailure = 2;
}

// ValidatorApiResponse represents the data which is fetched from each validator for returning it in API call
message ValidatorApiResponse {
	uint32 NrLeaderSuccess = 1 [(gogoproto.jsontag) = "nrLeaderSuccess"];
	uint32 NrLeaderFailure = 2 [(gogoproto.jsontag) = "nrLeaderFailure"];
	uint32 NrValidatorSuccess = 3 [(gogoproto.jsontag) = "nrValidatorSuccess"];
	uint32 NrValidatorFailure = 4 [(gogoproto.jsontag) = "nrValidatorFailure"];
	uint32 Rating = 5 [(gogoproto.jsontag) = "rating"];
	uint32 TempRating = 6 [(gogoproto.jsontag) = "tempRating"];
}


message PeerAccountData {
	bytes BLSPublicKey     = 1;
	bytes SchnorrPublicKey = 2;
	bytes RewardAddress    = 3;
	bytes Stake            = 4 [(gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
	bytes AccumulatedFees  = 18 [(gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];

	TimePeriod          JailTime      = 5 [(gogoproto.nullable) = false];
	repeated TimePeriod PastJailTimes = 6 [(gogoproto.nullable) = false];

	uint32 CurrentShardId    = 7;
	uint32 NextShardId       = 8;
	bool   NodeInWaitingList = 9;
	uint64 UnStakedNonce     = 10;

	SignRate ValidatorSuccessRate     = 11 [(gogoproto.nullable) = false];
	SignRate LeaderSuccessRate        = 12 [(gogoproto.nullable) = false];
	uint32 NumSelectedInSuccessBlocks = 19;

	bytes CodeHash = 13;

	uint32 Rating     = 14;
	uint32 TempRating = 17;

	bytes  RootHash = 15;
	uint64 Nonce    = 16;
}
