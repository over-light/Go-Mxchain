// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metaAccountData.proto

package state

import (
	bytes "bytes"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_data "github.com/ElrondNetwork/elrond-go/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MiniBlockData is the data to be saved in shard account for any shard
type MiniBlockData struct {
	Hash            []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ReceiverShardId uint32 `protobuf:"varint,2,opt,name=ReceiverShardId,proto3" json:"ReceiverShardId,omitempty"`
	SenderShardId   uint32 `protobuf:"varint,3,opt,name=SenderShardId,proto3" json:"SenderShardId,omitempty"`
	TxCount         uint32 `protobuf:"varint,4,opt,name=TxCount,proto3" json:"TxCount,omitempty"`
}

func (m *MiniBlockData) Reset()      { *m = MiniBlockData{} }
func (*MiniBlockData) ProtoMessage() {}
func (*MiniBlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f1348e7402ebb78, []int{0}
}
func (m *MiniBlockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiniBlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiniBlockData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiniBlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiniBlockData.Merge(m, src)
}
func (m *MiniBlockData) XXX_Size() int {
	return m.Size()
}
func (m *MiniBlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_MiniBlockData.DiscardUnknown(m)
}

var xxx_messageInfo_MiniBlockData proto.InternalMessageInfo

func (m *MiniBlockData) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MiniBlockData) GetReceiverShardId() uint32 {
	if m != nil {
		return m.ReceiverShardId
	}
	return 0
}

func (m *MiniBlockData) GetSenderShardId() uint32 {
	if m != nil {
		return m.SenderShardId
	}
	return 0
}

func (m *MiniBlockData) GetTxCount() uint32 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

// MetaAccountData is the struct used in serialization/deserialization
type MetaAccountData struct {
	Round         uint64           `protobuf:"varint,1,opt,name=Round,proto3" json:"Round,omitempty"`
	Nonce         uint64           `protobuf:"varint,2,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	TxCount       *math_big.Int    `protobuf:"bytes,3,opt,name=TxCount,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"TxCount,omitempty"`
	CodeHash      []byte           `protobuf:"bytes,4,opt,name=CodeHash,proto3" json:"CodeHash,omitempty"`
	RootHash      []byte           `protobuf:"bytes,5,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	MiniBlocks    []*MiniBlockData `protobuf:"bytes,6,rep,name=MiniBlocks,proto3" json:"MiniBlocks,omitempty"`
	PubKeyLeader  []byte           `protobuf:"bytes,7,opt,name=PubKeyLeader,proto3" json:"PubKeyLeader,omitempty"`
	ShardRootHash []byte           `protobuf:"bytes,8,opt,name=ShardRootHash,proto3" json:"ShardRootHash,omitempty"`
	Address       []byte           `protobuf:"bytes,9,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (m *MetaAccountData) Reset()      { *m = MetaAccountData{} }
func (*MetaAccountData) ProtoMessage() {}
func (*MetaAccountData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f1348e7402ebb78, []int{1}
}
func (m *MetaAccountData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaAccountData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaAccountData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaAccountData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaAccountData.Merge(m, src)
}
func (m *MetaAccountData) XXX_Size() int {
	return m.Size()
}
func (m *MetaAccountData) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaAccountData.DiscardUnknown(m)
}

var xxx_messageInfo_MetaAccountData proto.InternalMessageInfo

func (m *MetaAccountData) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *MetaAccountData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MetaAccountData) GetTxCount() *math_big.Int {
	if m != nil {
		return m.TxCount
	}
	return nil
}

func (m *MetaAccountData) GetCodeHash() []byte {
	if m != nil {
		return m.CodeHash
	}
	return nil
}

func (m *MetaAccountData) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *MetaAccountData) GetMiniBlocks() []*MiniBlockData {
	if m != nil {
		return m.MiniBlocks
	}
	return nil
}

func (m *MetaAccountData) GetPubKeyLeader() []byte {
	if m != nil {
		return m.PubKeyLeader
	}
	return nil
}

func (m *MetaAccountData) GetShardRootHash() []byte {
	if m != nil {
		return m.ShardRootHash
	}
	return nil
}

func (m *MetaAccountData) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterType((*MiniBlockData)(nil), "proto.MiniBlockData")
	proto.RegisterType((*MetaAccountData)(nil), "proto.MetaAccountData")
}

func init() { proto.RegisterFile("metaAccountData.proto", fileDescriptor_2f1348e7402ebb78) }

var fileDescriptor_2f1348e7402ebb78 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x3f, 0x6f, 0xd4, 0x30,
	0x18, 0xc6, 0xe3, 0x36, 0xd7, 0x16, 0x73, 0xa7, 0x4a, 0x56, 0x91, 0xa2, 0x0e, 0xe6, 0x74, 0x62,
	0xc8, 0xd2, 0x44, 0x02, 0xb6, 0x4e, 0x97, 0xa3, 0x12, 0x27, 0x68, 0x85, 0x5c, 0x26, 0x16, 0xe4,
	0xc4, 0x26, 0x89, 0xda, 0xb3, 0x91, 0xe3, 0xf0, 0x67, 0xe3, 0x0b, 0x20, 0xf1, 0x31, 0x10, 0x9f,
	0x84, 0xf1, 0xc6, 0x6e, 0x70, 0xb9, 0x85, 0xf1, 0x3e, 0x02, 0xf2, 0x1b, 0x5d, 0xda, 0x74, 0x8a,
	0x7f, 0xcf, 0xf3, 0xe6, 0xf5, 0xfb, 0x3e, 0xc6, 0x8f, 0x16, 0xd2, 0xf2, 0x69, 0x96, 0xe9, 0x5a,
	0xd9, 0x17, 0xdc, 0xf2, 0xe8, 0xa3, 0xd1, 0x56, 0x93, 0x01, 0x7c, 0x8e, 0x4f, 0xf2, 0xd2, 0x16,
	0x75, 0x1a, 0x65, 0x7a, 0x11, 0xe7, 0x3a, 0xd7, 0x31, 0xc8, 0x69, 0xfd, 0x01, 0x08, 0x00, 0x4e,
	0xed, 0x5f, 0x93, 0xef, 0x08, 0x8f, 0xce, 0x4b, 0x55, 0x26, 0xd7, 0x3a, 0xbb, 0x72, 0xdd, 0x08,
	0xc1, 0xfe, 0x4b, 0x5e, 0x15, 0x01, 0x1a, 0xa3, 0x70, 0xc8, 0xe0, 0x4c, 0x42, 0x7c, 0xc8, 0x64,
	0x26, 0xcb, 0x4f, 0xd2, 0x5c, 0x16, 0xdc, 0x88, 0xb9, 0x08, 0x76, 0xc6, 0x28, 0x1c, 0xb1, 0xfb,
	0x32, 0x79, 0x82, 0x47, 0x97, 0x52, 0x89, 0xdb, 0xba, 0x5d, 0xa8, 0xeb, 0x8b, 0x24, 0xc0, 0xfb,
	0x6f, 0xbf, 0xcc, 0xdc, 0x02, 0x81, 0x0f, 0xfe, 0x16, 0x27, 0x9b, 0x1d, 0x7c, 0x78, 0xde, 0xdf,
	0x8f, 0x1c, 0xe1, 0x01, 0xd3, 0xb5, 0x12, 0x30, 0x92, 0xcf, 0x5a, 0x70, 0xea, 0x85, 0x56, 0x99,
	0x84, 0x49, 0x7c, 0xd6, 0x02, 0x79, 0x7f, 0xdb, 0xd9, 0xdd, 0x3c, 0x4c, 0xce, 0x7e, 0xfd, 0x79,
	0x3c, 0x5d, 0x70, 0x5b, 0xc4, 0x69, 0x99, 0x47, 0x73, 0x65, 0x4f, 0xef, 0x04, 0x74, 0x76, 0x6d,
	0xb4, 0x12, 0x17, 0xd2, 0x7e, 0xd6, 0xe6, 0x2a, 0x96, 0x40, 0x27, 0xb9, 0x8e, 0x85, 0x8b, 0x35,
	0x29, 0xf3, 0xb9, 0xb2, 0x33, 0x5e, 0x59, 0x69, 0xba, 0x01, 0xc9, 0x31, 0x3e, 0x98, 0x69, 0x21,
	0x21, 0x22, 0x1f, 0x22, 0xea, 0xd8, 0x79, 0x4c, 0x6b, 0x0b, 0xde, 0xa0, 0xf5, 0xb6, 0x4c, 0x9e,
	0x63, 0xdc, 0xe5, 0x5c, 0x05, 0x7b, 0xe3, 0xdd, 0xf0, 0xe1, 0xd3, 0xa3, 0xf6, 0x11, 0xa2, 0xde,
	0x03, 0xb0, 0x3b, 0x75, 0x64, 0x82, 0x87, 0x6f, 0xea, 0xf4, 0x95, 0xfc, 0xfa, 0x5a, 0x72, 0x21,
	0x4d, 0xb0, 0x0f, 0x5d, 0x7b, 0x1a, 0x44, 0xee, 0x72, 0xed, 0xae, 0x3e, 0x80, 0xa2, 0xbe, 0xe8,
	0x22, 0x9f, 0x0a, 0x61, 0x64, 0x55, 0x05, 0x0f, 0xc0, 0xdf, 0x62, 0x72, 0xba, 0x5c, 0x51, 0xef,
	0x66, 0x45, 0xbd, 0xcd, 0x8a, 0xa2, 0x6f, 0x0d, 0x45, 0x3f, 0x1b, 0x8a, 0x7e, 0x37, 0x14, 0x2d,
	0x1b, 0x8a, 0xfe, 0x36, 0x14, 0xfd, 0x6b, 0xa8, 0xb7, 0x69, 0x28, 0xfa, 0xb1, 0xa6, 0xde, 0x72,
	0x4d, 0xbd, 0x9b, 0x35, 0xf5, 0xde, 0x0d, 0x2a, 0xcb, 0xad, 0x4c, 0xf7, 0x60, 0x83, 0x67, 0xff,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x59, 0x70, 0x81, 0xae, 0x95, 0x02, 0x00, 0x00,
}

func (this *MiniBlockData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MiniBlockData)
	if !ok {
		that2, ok := that.(MiniBlockData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if this.ReceiverShardId != that1.ReceiverShardId {
		return false
	}
	if this.SenderShardId != that1.SenderShardId {
		return false
	}
	if this.TxCount != that1.TxCount {
		return false
	}
	return true
}
func (this *MetaAccountData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetaAccountData)
	if !ok {
		that2, ok := that.(MetaAccountData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.TxCount, that1.TxCount) {
			return false
		}
	}
	if !bytes.Equal(this.CodeHash, that1.CodeHash) {
		return false
	}
	if !bytes.Equal(this.RootHash, that1.RootHash) {
		return false
	}
	if len(this.MiniBlocks) != len(that1.MiniBlocks) {
		return false
	}
	for i := range this.MiniBlocks {
		if !this.MiniBlocks[i].Equal(that1.MiniBlocks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.PubKeyLeader, that1.PubKeyLeader) {
		return false
	}
	if !bytes.Equal(this.ShardRootHash, that1.ShardRootHash) {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	return true
}
func (this *MiniBlockData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&state.MiniBlockData{")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "ReceiverShardId: "+fmt.Sprintf("%#v", this.ReceiverShardId)+",\n")
	s = append(s, "SenderShardId: "+fmt.Sprintf("%#v", this.SenderShardId)+",\n")
	s = append(s, "TxCount: "+fmt.Sprintf("%#v", this.TxCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetaAccountData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&state.MetaAccountData{")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "TxCount: "+fmt.Sprintf("%#v", this.TxCount)+",\n")
	s = append(s, "CodeHash: "+fmt.Sprintf("%#v", this.CodeHash)+",\n")
	s = append(s, "RootHash: "+fmt.Sprintf("%#v", this.RootHash)+",\n")
	if this.MiniBlocks != nil {
		s = append(s, "MiniBlocks: "+fmt.Sprintf("%#v", this.MiniBlocks)+",\n")
	}
	s = append(s, "PubKeyLeader: "+fmt.Sprintf("%#v", this.PubKeyLeader)+",\n")
	s = append(s, "ShardRootHash: "+fmt.Sprintf("%#v", this.ShardRootHash)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMetaAccountData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MiniBlockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiniBlockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiniBlockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxCount != 0 {
		i = encodeVarintMetaAccountData(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x20
	}
	if m.SenderShardId != 0 {
		i = encodeVarintMetaAccountData(dAtA, i, uint64(m.SenderShardId))
		i--
		dAtA[i] = 0x18
	}
	if m.ReceiverShardId != 0 {
		i = encodeVarintMetaAccountData(dAtA, i, uint64(m.ReceiverShardId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMetaAccountData(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetaAccountData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaAccountData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaAccountData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMetaAccountData(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ShardRootHash) > 0 {
		i -= len(m.ShardRootHash)
		copy(dAtA[i:], m.ShardRootHash)
		i = encodeVarintMetaAccountData(dAtA, i, uint64(len(m.ShardRootHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PubKeyLeader) > 0 {
		i -= len(m.PubKeyLeader)
		copy(dAtA[i:], m.PubKeyLeader)
		i = encodeVarintMetaAccountData(dAtA, i, uint64(len(m.PubKeyLeader)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MiniBlocks) > 0 {
		for iNdEx := len(m.MiniBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MiniBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetaAccountData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintMetaAccountData(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintMetaAccountData(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0x22
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.TxCount)
		i -= size
		if _, err := __caster.MarshalTo(m.TxCount, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetaAccountData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Nonce != 0 {
		i = encodeVarintMetaAccountData(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.Round != 0 {
		i = encodeVarintMetaAccountData(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetaAccountData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetaAccountData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MiniBlockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMetaAccountData(uint64(l))
	}
	if m.ReceiverShardId != 0 {
		n += 1 + sovMetaAccountData(uint64(m.ReceiverShardId))
	}
	if m.SenderShardId != 0 {
		n += 1 + sovMetaAccountData(uint64(m.SenderShardId))
	}
	if m.TxCount != 0 {
		n += 1 + sovMetaAccountData(uint64(m.TxCount))
	}
	return n
}

func (m *MetaAccountData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Round != 0 {
		n += 1 + sovMetaAccountData(uint64(m.Round))
	}
	if m.Nonce != 0 {
		n += 1 + sovMetaAccountData(uint64(m.Nonce))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.TxCount)
		n += 1 + l + sovMetaAccountData(uint64(l))
	}
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovMetaAccountData(uint64(l))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovMetaAccountData(uint64(l))
	}
	if len(m.MiniBlocks) > 0 {
		for _, e := range m.MiniBlocks {
			l = e.Size()
			n += 1 + l + sovMetaAccountData(uint64(l))
		}
	}
	l = len(m.PubKeyLeader)
	if l > 0 {
		n += 1 + l + sovMetaAccountData(uint64(l))
	}
	l = len(m.ShardRootHash)
	if l > 0 {
		n += 1 + l + sovMetaAccountData(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMetaAccountData(uint64(l))
	}
	return n
}

func sovMetaAccountData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetaAccountData(x uint64) (n int) {
	return sovMetaAccountData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MiniBlockData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MiniBlockData{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`ReceiverShardId:` + fmt.Sprintf("%v", this.ReceiverShardId) + `,`,
		`SenderShardId:` + fmt.Sprintf("%v", this.SenderShardId) + `,`,
		`TxCount:` + fmt.Sprintf("%v", this.TxCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetaAccountData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMiniBlocks := "[]*MiniBlockData{"
	for _, f := range this.MiniBlocks {
		repeatedStringForMiniBlocks += strings.Replace(f.String(), "MiniBlockData", "MiniBlockData", 1) + ","
	}
	repeatedStringForMiniBlocks += "}"
	s := strings.Join([]string{`&MetaAccountData{`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`TxCount:` + fmt.Sprintf("%v", this.TxCount) + `,`,
		`CodeHash:` + fmt.Sprintf("%v", this.CodeHash) + `,`,
		`RootHash:` + fmt.Sprintf("%v", this.RootHash) + `,`,
		`MiniBlocks:` + repeatedStringForMiniBlocks + `,`,
		`PubKeyLeader:` + fmt.Sprintf("%v", this.PubKeyLeader) + `,`,
		`ShardRootHash:` + fmt.Sprintf("%v", this.ShardRootHash) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMetaAccountData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MiniBlockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaAccountData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiniBlockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiniBlockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverShardId", wireType)
			}
			m.ReceiverShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderShardId", wireType)
			}
			m.SenderShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetaAccountData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaAccountData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaAccountData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaAccountData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaAccountData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TxCount = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = append(m.CodeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeHash == nil {
				m.CodeHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiniBlocks = append(m.MiniBlocks, &MiniBlockData{})
			if err := m.MiniBlocks[len(m.MiniBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeyLeader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeyLeader = append(m.PubKeyLeader[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKeyLeader == nil {
				m.PubKeyLeader = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardRootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardRootHash = append(m.ShardRootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardRootHash == nil {
				m.ShardRootHash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetaAccountData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaAccountData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetaAccountData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetaAccountData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaAccountData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetaAccountData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetaAccountData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetaAccountData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetaAccountData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetaAccountData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetaAccountData = fmt.Errorf("proto: unexpected end of group")
)
