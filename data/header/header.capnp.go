// Code generated by capnpc-go. DO NOT EDIT.

package header

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// header information, attachable to blocks or miniblocks
type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0xc072f9bae0228573

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0xc072f9bae0228573, s.Struct)
	return str
}

func (s Header) Nonce() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasNonce() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetNonce(v capnp.UInt8List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNonce sets the nonce field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewNonce(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Header) PrevHash() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasPrevHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetPrevHash(v capnp.UInt8List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPrevHash sets the prevHash field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewPrevHash(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Header) PubKeys() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.PointerList{List: p.List()}, err
}

func (s Header) HasPubKeys() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetPubKeys(v capnp.PointerList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPubKeys sets the pubKeys field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Header) NewPubKeys(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Header) ShardId() uint32 {
	return s.Struct.Uint32(0)
}

func (s Header) SetShardId(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Header) TimeStamp() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasTimeStamp() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetTimeStamp(v capnp.UInt8List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewTimeStamp sets the timeStamp field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewTimeStamp(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s Header) Round() uint32 {
	return s.Struct.Uint32(4)
}

func (s Header) SetRound(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s Header) BlockHash() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Header) HasBlockHash() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetBlockHash(v capnp.UInt8List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewBlockHash sets the blockHash field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Header) NewBlockHash(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0xc072f9bae0228573, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

const schema_9096faa5d587481d = "x\xda\\\x90\xb1k\x14A\x14\xc6\xbfof\xe7r\x07" +
	"A\\vA\x8b\xc8\xad\x12!\xa01\\l\xc4\xc6$" +
	"\xd5\xa9M&\xdb\x0bs\xb7\xab\xbbx7\xb3\xccnD" +
	"++\x11l\x14\x05[+{\x1b\x9b\x80`#(\xd8" +
	"je\xa1\xe2?`\xa9\xcd\xca&\x8ap\xd5{\xdf\xef" +
	"\xfb\xbd\xe6\x1d\xff\xbe%F\xea\x84\x00\xf4I\xd5k\xeb" +
	"\x07g\xbe\x1e\xfc\xf2o\xa1\xcf\x91\xed\xa9\xf1\xc3O/" +
	"\x7f?\x7f\x02\xa5\x96\x80\xd1\xcf\xa7\x8c\x06\\\x8a\x06\x1c" +
	"^\xdc\xe6c\xe2R\x9b\xcf\xbc\xb3\xd9\xfa-\xe5\xd6k" +
	"c\xb3\x89\xbb\xbb\x91\x99\xc6l\x14\xb9\xc9r\xffw\\" +
	"\x98\x9a\xcaV\x97\xc7]\xa0\xdf%u@\xd1\xdex\xf6" +
	"B\xbf\xf9\xfc\xe8\x1dt \xb8\xbdF.\x03#\x1e\xb0" +
	"=:JJeo:?7M\xe9\xec\xf9\xc44\x8d" +
	"\x99\x16f2\xcb\x93\xc6%\x93\x99\x9b\xde\xae\x13\xe7\x93" +
	"yi\xcb+G\x11\xd0+2\x00\x02\x02\xe1\xebM@" +
	"\xbf\x92\xd4\x1f\x05C2f\x07?\\\x03\xf4{I\xfd" +
	"C0\x14\"\xa6\x00\xc2o;\x80\xfe\"\x99\xf6)H" +
	"\x19S\x02\x91\xe2\x0e\xb0G\xc9t\x99\x82a c\x06" +
	"@4\xe0\x1e\x90\xf6;\xbe\xdaq\xc5\x98\x0a\x88Ns" +
	"\x13HW:\xbe\xd6\xf1^\x10\xb3\x07Dg\x0f\xfd\xd5" +
	"\x8eoQph\x9d\x9d\xe6<\x06\xeeJ\xb2\x07\xd1\xad" +
	"m\xe5\xf3;cS\x17\x00\x16\xaa\xfb\xd5\xfe\xe4z~" +
	"\xaf\xfe\x87\x17\xda\xba0>\xbb\x9a\xb1\x0f\xc1>\xd86" +
	"\xe5<O\x1b3\x07\xab\x05u\xe8\xdd\xbe\xfd/\x1e\xfe" +
	"klj\xb0X\x10\xff\x04\x00\x00\xff\xff\x13%nJ"

func init() {
	schemas.Register(schema_9096faa5d587481d,
		0xc072f9bae0228573)
}
