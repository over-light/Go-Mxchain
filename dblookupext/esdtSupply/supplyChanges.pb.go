// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: supplyChanges.proto

package esdtSupply

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	github_com_ElrondNetwork_elrond_go_core_data "github.com/ElrondNetwork/elrond-go-core/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EpochByHash is used to store information about a hash to know which epoch it belongs to
type SupplyChange struct {
	TokenID []byte        `protobuf:"bytes,1,opt,name=TokenID,proto3" json:"TokenID,omitempty"`
	Supply  *math_big.Int `protobuf:"bytes,2,opt,name=Supply,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"value"`
}

func (m *SupplyChange) Reset()      { *m = SupplyChange{} }
func (*SupplyChange) ProtoMessage() {}
func (*SupplyChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83d561dc9c161c5, []int{0}
}
func (m *SupplyChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SupplyChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyChange.Merge(m, src)
}
func (m *SupplyChange) XXX_Size() int {
	return m.Size()
}
func (m *SupplyChange) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyChange.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyChange proto.InternalMessageInfo

func (m *SupplyChange) GetTokenID() []byte {
	if m != nil {
		return m.TokenID
	}
	return nil
}

func (m *SupplyChange) GetSupply() *math_big.Int {
	if m != nil {
		return m.Supply
	}
	return nil
}

// ResultsHashesByTxHash is used to store smart contract results hashes and receipt hash for a transaction hash
type SupplyChanges struct {
	SupplyChange []*SupplyChange `protobuf:"bytes,1,rep,name=SupplyChange,proto3" json:"SupplyChange,omitempty"`
}

func (m *SupplyChanges) Reset()      { *m = SupplyChanges{} }
func (*SupplyChanges) ProtoMessage() {}
func (*SupplyChanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83d561dc9c161c5, []int{1}
}
func (m *SupplyChanges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyChanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SupplyChanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyChanges.Merge(m, src)
}
func (m *SupplyChanges) XXX_Size() int {
	return m.Size()
}
func (m *SupplyChanges) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyChanges.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyChanges proto.InternalMessageInfo

func (m *SupplyChanges) GetSupplyChange() []*SupplyChange {
	if m != nil {
		return m.SupplyChange
	}
	return nil
}

func init() {
	proto.RegisterType((*SupplyChange)(nil), "proto.SupplyChange")
	proto.RegisterType((*SupplyChanges)(nil), "proto.SupplyChanges")
}

func init() { proto.RegisterFile("supplyChanges.proto", fileDescriptor_d83d561dc9c161c5) }

var fileDescriptor_d83d561dc9c161c5 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x2e, 0x2d, 0x28,
	0xc8, 0xa9, 0x74, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x05, 0x53, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa,
	0xe9, 0xf9, 0xe9, 0xf9, 0xfa, 0x60, 0xe1, 0xa4, 0xd2, 0x34, 0x30, 0x0f, 0xcc, 0x01, 0xb3, 0x20,
	0xba, 0x94, 0xa6, 0x32, 0x72, 0xf1, 0x04, 0x23, 0x99, 0x26, 0x24, 0xc1, 0xc5, 0x1e, 0x92, 0x9f,
	0x9d, 0x9a, 0xe7, 0xe9, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe3, 0x0a, 0x65, 0x73,
	0xb1, 0x41, 0x54, 0x4a, 0x30, 0x81, 0x24, 0x9c, 0x82, 0x5f, 0xdd, 0x93, 0x67, 0x2d, 0x4b, 0xcc,
	0x29, 0x4d, 0x5d, 0x75, 0x5f, 0xde, 0x2d, 0x37, 0xb1, 0x24, 0x43, 0x3f, 0x29, 0x33, 0x5d, 0xcf,
	0x33, 0xaf, 0xc4, 0x1a, 0xc9, 0x0d, 0xae, 0x39, 0x45, 0xf9, 0x79, 0x29, 0x7e, 0xa9, 0x25, 0xe5,
	0xf9, 0x45, 0xd9, 0xfa, 0xa9, 0x60, 0x9e, 0x6e, 0x7a, 0xbe, 0x6e, 0x72, 0x7e, 0x51, 0xaa, 0x7e,
	0x4a, 0x62, 0x49, 0xa2, 0x9e, 0x53, 0x66, 0xba, 0x67, 0x5e, 0x89, 0x73, 0x62, 0x71, 0x49, 0x6a,
	0x51, 0x10, 0xd4, 0x0a, 0x25, 0x0f, 0x2e, 0x5e, 0x64, 0x67, 0x15, 0x0b, 0x99, 0xa3, 0xba, 0x53,
	0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x18, 0xe2, 0x0d, 0x3d, 0x64, 0xa9, 0x20, 0x14, 0x85,
	0x4e, 0x2e, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28, 0xc7, 0xf0, 0xe1, 0xa1, 0x1c, 0x63, 0xc3,
	0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1,
	0xc6, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e,
	0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xe2, 0x4a,
	0x2d, 0x4e, 0x29, 0x81, 0x98, 0x95, 0xc4, 0x06, 0xb6, 0xc7, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x2d, 0xdd, 0x6c, 0x02, 0x7b, 0x01, 0x00, 0x00,
}

func (this *SupplyChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupplyChange)
	if !ok {
		that2, ok := that.(SupplyChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TokenID, that1.TokenID) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.Supply, that1.Supply) {
			return false
		}
	}
	return true
}
func (this *SupplyChanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupplyChanges)
	if !ok {
		that2, ok := that.(SupplyChanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SupplyChange) != len(that1.SupplyChange) {
		return false
	}
	for i := range this.SupplyChange {
		if !this.SupplyChange[i].Equal(that1.SupplyChange[i]) {
			return false
		}
	}
	return true
}
func (this *SupplyChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&esdtSupply.SupplyChange{")
	s = append(s, "TokenID: "+fmt.Sprintf("%#v", this.TokenID)+",\n")
	s = append(s, "Supply: "+fmt.Sprintf("%#v", this.Supply)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SupplyChanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&esdtSupply.SupplyChanges{")
	if this.SupplyChange != nil {
		s = append(s, "SupplyChange: "+fmt.Sprintf("%#v", this.SupplyChange)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSupplyChanges(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SupplyChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.Supply)
		i -= size
		if _, err := __caster.MarshalTo(m.Supply, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSupplyChanges(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintSupplyChanges(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupplyChanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyChanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyChanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplyChange) > 0 {
		for iNdEx := len(m.SupplyChange) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupplyChange[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSupplyChanges(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSupplyChanges(dAtA []byte, offset int, v uint64) int {
	offset -= sovSupplyChanges(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SupplyChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovSupplyChanges(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.Supply)
		n += 1 + l + sovSupplyChanges(uint64(l))
	}
	return n
}

func (m *SupplyChanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SupplyChange) > 0 {
		for _, e := range m.SupplyChange {
			l = e.Size()
			n += 1 + l + sovSupplyChanges(uint64(l))
		}
	}
	return n
}

func sovSupplyChanges(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSupplyChanges(x uint64) (n int) {
	return sovSupplyChanges(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SupplyChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SupplyChange{`,
		`TokenID:` + fmt.Sprintf("%v", this.TokenID) + `,`,
		`Supply:` + fmt.Sprintf("%v", this.Supply) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SupplyChanges) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSupplyChange := "[]*SupplyChange{"
	for _, f := range this.SupplyChange {
		repeatedStringForSupplyChange += strings.Replace(f.String(), "SupplyChange", "SupplyChange", 1) + ","
	}
	repeatedStringForSupplyChange += "}"
	s := strings.Join([]string{`&SupplyChanges{`,
		`SupplyChange:` + repeatedStringForSupplyChange + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSupplyChanges(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SupplyChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupplyChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplyChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = append(m.TokenID[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenID == nil {
				m.TokenID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplyChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Supply = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupplyChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplyChanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupplyChanges
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyChanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyChanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupplyChanges
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyChange = append(m.SupplyChange, &SupplyChange{})
			if err := m.SupplyChange[len(m.SupplyChange)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupplyChanges(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSupplyChanges
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSupplyChanges(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSupplyChanges
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupplyChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupplyChanges
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSupplyChanges
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSupplyChanges
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSupplyChanges
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSupplyChanges        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSupplyChanges          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSupplyChanges = fmt.Errorf("proto: unexpected end of group")
)
