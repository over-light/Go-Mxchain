// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventsHashesByTxHash.proto

package dblookupext

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ScrHashesAndEpoch is used to store smart contract results and epoch
type ScrHashesAndEpoch struct {
	Epoch                      uint32   `protobuf:"varint,1,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	SmartContractResultsHashes [][]byte `protobuf:"bytes,2,rep,name=SmartContractResultsHashes,proto3" json:"SmartContractResultsHashes,omitempty"`
}

func (m *ScrHashesAndEpoch) Reset()      { *m = ScrHashesAndEpoch{} }
func (*ScrHashesAndEpoch) ProtoMessage() {}
func (*ScrHashesAndEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab219ae8c50f60f, []int{0}
}
func (m *ScrHashesAndEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScrHashesAndEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScrHashesAndEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScrHashesAndEpoch.Merge(m, src)
}
func (m *ScrHashesAndEpoch) XXX_Size() int {
	return m.Size()
}
func (m *ScrHashesAndEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_ScrHashesAndEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_ScrHashesAndEpoch proto.InternalMessageInfo

func (m *ScrHashesAndEpoch) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ScrHashesAndEpoch) GetSmartContractResultsHashes() [][]byte {
	if m != nil {
		return m.SmartContractResultsHashes
	}
	return nil
}

// MiniblockMetadata is used to store smart contract results hashes and receipt hash for a transaction hash
type EventsHashesByTxHash struct {
	ReceiptsHash   []byte               `protobuf:"bytes,1,opt,name=ReceiptsHash,proto3" json:"ReceiptsHash,omitempty"`
	ScrHashesEpoch []*ScrHashesAndEpoch `protobuf:"bytes,2,rep,name=ScrHashesEpoch,proto3" json:"ScrHashesEpoch,omitempty"`
}

func (m *EventsHashesByTxHash) Reset()      { *m = EventsHashesByTxHash{} }
func (*EventsHashesByTxHash) ProtoMessage() {}
func (*EventsHashesByTxHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ab219ae8c50f60f, []int{1}
}
func (m *EventsHashesByTxHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventsHashesByTxHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EventsHashesByTxHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsHashesByTxHash.Merge(m, src)
}
func (m *EventsHashesByTxHash) XXX_Size() int {
	return m.Size()
}
func (m *EventsHashesByTxHash) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsHashesByTxHash.DiscardUnknown(m)
}

var xxx_messageInfo_EventsHashesByTxHash proto.InternalMessageInfo

func (m *EventsHashesByTxHash) GetReceiptsHash() []byte {
	if m != nil {
		return m.ReceiptsHash
	}
	return nil
}

func (m *EventsHashesByTxHash) GetScrHashesEpoch() []*ScrHashesAndEpoch {
	if m != nil {
		return m.ScrHashesEpoch
	}
	return nil
}

func init() {
	proto.RegisterType((*ScrHashesAndEpoch)(nil), "proto.ScrHashesAndEpoch")
	proto.RegisterType((*EventsHashesByTxHash)(nil), "proto.EventsHashesByTxHash")
}

func init() { proto.RegisterFile("eventsHashesByTxHash.proto", fileDescriptor_9ab219ae8c50f60f) }

var fileDescriptor_9ab219ae8c50f60f = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x2d, 0x4b, 0xcd,
	0x2b, 0x29, 0xf6, 0x48, 0x2c, 0xce, 0x48, 0x2d, 0x76, 0xaa, 0x0c, 0xa9, 0x00, 0xb1, 0xf4, 0x0a,
	0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x58, 0xc1, 0x94, 0x94, 0x6e, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92,
	0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e, 0x7a, 0xbe, 0x3e, 0x58, 0x38, 0xa9, 0x34, 0x0d, 0xcc,
	0x03, 0x73, 0xc0, 0x2c, 0x88, 0x2e, 0xa5, 0x4c, 0x2e, 0xc1, 0xe0, 0xe4, 0x22, 0x88, 0x81, 0x8e,
	0x79, 0x29, 0xae, 0x05, 0xf9, 0xc9, 0x19, 0x42, 0x22, 0x5c, 0xac, 0x60, 0x86, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x6f, 0x10, 0x84, 0x23, 0x64, 0xc7, 0x25, 0x15, 0x9c, 0x9b, 0x58, 0x54, 0xe2, 0x9c,
	0x9f, 0x57, 0x52, 0x94, 0x98, 0x5c, 0x12, 0x94, 0x5a, 0x5c, 0x9a, 0x03, 0x73, 0x8c, 0x04, 0x93,
	0x02, 0xb3, 0x06, 0x4f, 0x10, 0x1e, 0x15, 0x4a, 0x35, 0x5c, 0x22, 0xae, 0x58, 0x9c, 0x2f, 0xa4,
	0xc4, 0xc5, 0x13, 0x94, 0x9a, 0x9c, 0x9a, 0x59, 0x00, 0x91, 0x01, 0x5b, 0xca, 0x13, 0x84, 0x22,
	0x26, 0xe4, 0xc0, 0xc5, 0x07, 0x77, 0x26, 0xc4, 0x69, 0x20, 0xfb, 0xb8, 0x8d, 0x24, 0x20, 0xde,
	0xd0, 0xc3, 0xf0, 0x43, 0x10, 0x9a, 0x7a, 0x27, 0xd7, 0x0b, 0x0f, 0xe5, 0x18, 0x6e, 0x3c, 0x94,
	0x63, 0xf8, 0xf0, 0x50, 0x8e, 0xb1, 0xe1, 0x91, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x27, 0x1e,
	0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0x78, 0xe3, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f,
	0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c,
	0x37, 0x1e, 0xcb, 0x31, 0x44, 0x71, 0xa7, 0x24, 0xe5, 0xe4, 0xe7, 0x67, 0x97, 0x16, 0xa4, 0x56,
	0x94, 0x24, 0xb1, 0x81, 0xed, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x66, 0xcf, 0xc8, 0x5d,
	0x8a, 0x01, 0x00, 0x00,
}

func (this *ScrHashesAndEpoch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScrHashesAndEpoch)
	if !ok {
		that2, ok := that.(ScrHashesAndEpoch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if len(this.SmartContractResultsHashes) != len(that1.SmartContractResultsHashes) {
		return false
	}
	for i := range this.SmartContractResultsHashes {
		if !bytes.Equal(this.SmartContractResultsHashes[i], that1.SmartContractResultsHashes[i]) {
			return false
		}
	}
	return true
}
func (this *EventsHashesByTxHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventsHashesByTxHash)
	if !ok {
		that2, ok := that.(EventsHashesByTxHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ReceiptsHash, that1.ReceiptsHash) {
		return false
	}
	if len(this.ScrHashesEpoch) != len(that1.ScrHashesEpoch) {
		return false
	}
	for i := range this.ScrHashesEpoch {
		if !this.ScrHashesEpoch[i].Equal(that1.ScrHashesEpoch[i]) {
			return false
		}
	}
	return true
}
func (this *ScrHashesAndEpoch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dblookupext.ScrHashesAndEpoch{")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "SmartContractResultsHashes: "+fmt.Sprintf("%#v", this.SmartContractResultsHashes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventsHashesByTxHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dblookupext.EventsHashesByTxHash{")
	s = append(s, "ReceiptsHash: "+fmt.Sprintf("%#v", this.ReceiptsHash)+",\n")
	if this.ScrHashesEpoch != nil {
		s = append(s, "ScrHashesEpoch: "+fmt.Sprintf("%#v", this.ScrHashesEpoch)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEventsHashesByTxHash(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ScrHashesAndEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScrHashesAndEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScrHashesAndEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SmartContractResultsHashes) > 0 {
		for iNdEx := len(m.SmartContractResultsHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SmartContractResultsHashes[iNdEx])
			copy(dAtA[i:], m.SmartContractResultsHashes[iNdEx])
			i = encodeVarintEventsHashesByTxHash(dAtA, i, uint64(len(m.SmartContractResultsHashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Epoch != 0 {
		i = encodeVarintEventsHashesByTxHash(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventsHashesByTxHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsHashesByTxHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventsHashesByTxHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScrHashesEpoch) > 0 {
		for iNdEx := len(m.ScrHashesEpoch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScrHashesEpoch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEventsHashesByTxHash(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ReceiptsHash) > 0 {
		i -= len(m.ReceiptsHash)
		copy(dAtA[i:], m.ReceiptsHash)
		i = encodeVarintEventsHashesByTxHash(dAtA, i, uint64(len(m.ReceiptsHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEventsHashesByTxHash(dAtA []byte, offset int, v uint64) int {
	offset -= sovEventsHashesByTxHash(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScrHashesAndEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovEventsHashesByTxHash(uint64(m.Epoch))
	}
	if len(m.SmartContractResultsHashes) > 0 {
		for _, b := range m.SmartContractResultsHashes {
			l = len(b)
			n += 1 + l + sovEventsHashesByTxHash(uint64(l))
		}
	}
	return n
}

func (m *EventsHashesByTxHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReceiptsHash)
	if l > 0 {
		n += 1 + l + sovEventsHashesByTxHash(uint64(l))
	}
	if len(m.ScrHashesEpoch) > 0 {
		for _, e := range m.ScrHashesEpoch {
			l = e.Size()
			n += 1 + l + sovEventsHashesByTxHash(uint64(l))
		}
	}
	return n
}

func sovEventsHashesByTxHash(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEventsHashesByTxHash(x uint64) (n int) {
	return sovEventsHashesByTxHash(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ScrHashesAndEpoch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScrHashesAndEpoch{`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`SmartContractResultsHashes:` + fmt.Sprintf("%v", this.SmartContractResultsHashes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventsHashesByTxHash) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForScrHashesEpoch := "[]*ScrHashesAndEpoch{"
	for _, f := range this.ScrHashesEpoch {
		repeatedStringForScrHashesEpoch += strings.Replace(f.String(), "ScrHashesAndEpoch", "ScrHashesAndEpoch", 1) + ","
	}
	repeatedStringForScrHashesEpoch += "}"
	s := strings.Join([]string{`&EventsHashesByTxHash{`,
		`ReceiptsHash:` + fmt.Sprintf("%v", this.ReceiptsHash) + `,`,
		`ScrHashesEpoch:` + repeatedStringForScrHashesEpoch + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEventsHashesByTxHash(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ScrHashesAndEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsHashesByTxHash
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScrHashesAndEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScrHashesAndEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsHashesByTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractResultsHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsHashesByTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartContractResultsHashes = append(m.SmartContractResultsHashes, make([]byte, postIndex-iNdEx))
			copy(m.SmartContractResultsHashes[len(m.SmartContractResultsHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsHashesByTxHash(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsHashesByTxHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsHashesByTxHash
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsHashesByTxHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsHashesByTxHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsHashesByTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptsHash = append(m.ReceiptsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptsHash == nil {
				m.ReceiptsHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScrHashesEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsHashesByTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScrHashesEpoch = append(m.ScrHashesEpoch, &ScrHashesAndEpoch{})
			if err := m.ScrHashesEpoch[len(m.ScrHashesEpoch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsHashesByTxHash(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsHashesByTxHash
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventsHashesByTxHash(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventsHashesByTxHash
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventsHashesByTxHash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventsHashesByTxHash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEventsHashesByTxHash
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEventsHashesByTxHash
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEventsHashesByTxHash
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEventsHashesByTxHash        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventsHashesByTxHash          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEventsHashesByTxHash = fmt.Errorf("proto: unexpected end of group")
)
