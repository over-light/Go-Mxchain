// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: delegation.proto

package systemSmartContracts

import (
	bytes "bytes"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_data "github.com/ElrondNetwork/elrond-go/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegationManagement struct {
	NumberOfContract     uint32        `protobuf:"varint,1,opt,name=NumberOfContract,proto3" json:"NumberOfContracts"`
	LastAddress          []byte        `protobuf:"bytes,2,opt,name=LastAddress,proto3" json:"LastAddress"`
	MinContractCreateFee *math_big.Int `protobuf:"bytes,3,opt,name=MinContractCreateFee,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"MinContractCreateFee"`
	MinServiceFee        uint32        `protobuf:"varint,4,opt,name=MinServiceFee,proto3" json:"MinServiceFee"`
	MaxServiceFee        uint32        `protobuf:"varint,5,opt,name=MaxServiceFee,proto3" json:"MaxServiceFee"`
	MinOperationValue    *math_big.Int `protobuf:"bytes,6,opt,name=MinOperationValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"MinOperationValue"`
}

func (m *DelegationManagement) Reset()      { *m = DelegationManagement{} }
func (*DelegationManagement) ProtoMessage() {}
func (*DelegationManagement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{0}
}
func (m *DelegationManagement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationManagement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegationManagement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationManagement.Merge(m, src)
}
func (m *DelegationManagement) XXX_Size() int {
	return m.Size()
}
func (m *DelegationManagement) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationManagement.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationManagement proto.InternalMessageInfo

func (m *DelegationManagement) GetNumberOfContract() uint32 {
	if m != nil {
		return m.NumberOfContract
	}
	return 0
}

func (m *DelegationManagement) GetLastAddress() []byte {
	if m != nil {
		return m.LastAddress
	}
	return nil
}

func (m *DelegationManagement) GetMinContractCreateFee() *math_big.Int {
	if m != nil {
		return m.MinContractCreateFee
	}
	return nil
}

func (m *DelegationManagement) GetMinServiceFee() uint32 {
	if m != nil {
		return m.MinServiceFee
	}
	return 0
}

func (m *DelegationManagement) GetMaxServiceFee() uint32 {
	if m != nil {
		return m.MaxServiceFee
	}
	return 0
}

func (m *DelegationManagement) GetMinOperationValue() *math_big.Int {
	if m != nil {
		return m.MinOperationValue
	}
	return nil
}

type DelegationContractList struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=Addresses,proto3" json:"Addresses"`
}

func (m *DelegationContractList) Reset()      { *m = DelegationContractList{} }
func (*DelegationContractList) ProtoMessage() {}
func (*DelegationContractList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{1}
}
func (m *DelegationContractList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationContractList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegationContractList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationContractList.Merge(m, src)
}
func (m *DelegationContractList) XXX_Size() int {
	return m.Size()
}
func (m *DelegationContractList) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationContractList.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationContractList proto.InternalMessageInfo

func (m *DelegationContractList) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type DelegationConfig struct {
	OwnerAddress         []byte        `protobuf:"bytes,1,opt,name=OwnerAddress,proto3" json:"OwnerAddress"`
	ServiceFee           uint64        `protobuf:"varint,2,opt,name=ServiceFee,proto3" json:"ServiceFee"`
	MaxDelegationCap     *math_big.Int `protobuf:"bytes,3,opt,name=MaxDelegationCap,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"MaxDelegationCap"`
	InitialOwnerFunds    *math_big.Int `protobuf:"bytes,4,opt,name=InitialOwnerFunds,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"InitialOwnerFunds"`
	AutomaticActivation  bool          `protobuf:"varint,5,opt,name=AutomaticActivation,proto3" json:"AutomaticActivation"`
	WithDelegationCap    bool          `protobuf:"varint,6,opt,name=WithDelegationCap,proto3" json:"WithDelegationCap"`
	ChangeableServiceFee bool          `protobuf:"varint,7,opt,name=ChangeableServiceFee,proto3" json:"ChangeableServiceFee"`
	CreatedNonce         uint64        `protobuf:"varint,8,opt,name=CreatedNonce,proto3" json:"CreatedNonce"`
}

func (m *DelegationConfig) Reset()      { *m = DelegationConfig{} }
func (*DelegationConfig) ProtoMessage() {}
func (*DelegationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{2}
}
func (m *DelegationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationConfig.Merge(m, src)
}
func (m *DelegationConfig) XXX_Size() int {
	return m.Size()
}
func (m *DelegationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationConfig proto.InternalMessageInfo

func (m *DelegationConfig) GetOwnerAddress() []byte {
	if m != nil {
		return m.OwnerAddress
	}
	return nil
}

func (m *DelegationConfig) GetServiceFee() uint64 {
	if m != nil {
		return m.ServiceFee
	}
	return 0
}

func (m *DelegationConfig) GetMaxDelegationCap() *math_big.Int {
	if m != nil {
		return m.MaxDelegationCap
	}
	return nil
}

func (m *DelegationConfig) GetInitialOwnerFunds() *math_big.Int {
	if m != nil {
		return m.InitialOwnerFunds
	}
	return nil
}

func (m *DelegationConfig) GetAutomaticActivation() bool {
	if m != nil {
		return m.AutomaticActivation
	}
	return false
}

func (m *DelegationConfig) GetWithDelegationCap() bool {
	if m != nil {
		return m.WithDelegationCap
	}
	return false
}

func (m *DelegationConfig) GetChangeableServiceFee() bool {
	if m != nil {
		return m.ChangeableServiceFee
	}
	return false
}

func (m *DelegationConfig) GetCreatedNonce() uint64 {
	if m != nil {
		return m.CreatedNonce
	}
	return 0
}

type DelegationContractStatus struct {
	TotalActive   *math_big.Int `protobuf:"bytes,1,opt,name=TotalActive,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"TotalActive"`
	TotalUnStaked *math_big.Int `protobuf:"bytes,2,opt,name=TotalUnStaked,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"TotalUnStaked"`
	NumDelegators uint32        `protobuf:"varint,3,opt,name=NumDelegators,proto3" json:"NumDelegators"`
	StakedKeys    []*NodesData  `protobuf:"bytes,4,rep,name=StakedKeys,proto3" json:"StakedKeys"`
	NotStakedKeys []*NodesData  `protobuf:"bytes,5,rep,name=NotStakedKeys,proto3" json:"NotStakedKeys"`
}

func (m *DelegationContractStatus) Reset()      { *m = DelegationContractStatus{} }
func (*DelegationContractStatus) ProtoMessage() {}
func (*DelegationContractStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{3}
}
func (m *DelegationContractStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationContractStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegationContractStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationContractStatus.Merge(m, src)
}
func (m *DelegationContractStatus) XXX_Size() int {
	return m.Size()
}
func (m *DelegationContractStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationContractStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationContractStatus proto.InternalMessageInfo

func (m *DelegationContractStatus) GetTotalActive() *math_big.Int {
	if m != nil {
		return m.TotalActive
	}
	return nil
}

func (m *DelegationContractStatus) GetTotalUnStaked() *math_big.Int {
	if m != nil {
		return m.TotalUnStaked
	}
	return nil
}

func (m *DelegationContractStatus) GetNumDelegators() uint32 {
	if m != nil {
		return m.NumDelegators
	}
	return 0
}

func (m *DelegationContractStatus) GetStakedKeys() []*NodesData {
	if m != nil {
		return m.StakedKeys
	}
	return nil
}

func (m *DelegationContractStatus) GetNotStakedKeys() []*NodesData {
	if m != nil {
		return m.NotStakedKeys
	}
	return nil
}

type Fund struct {
	Value   *math_big.Int `protobuf:"bytes,1,opt,name=Value,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"Value"`
	Address []byte        `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address"`
	Nonce   uint64        `protobuf:"varint,3,opt,name=Nonce,proto3" json:"Nonce"`
	Type    uint32        `protobuf:"varint,4,opt,name=Type,proto3" json:"Type"`
}

func (m *Fund) Reset()      { *m = Fund{} }
func (*Fund) ProtoMessage() {}
func (*Fund) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{4}
}
func (m *Fund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Fund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fund.Merge(m, src)
}
func (m *Fund) XXX_Size() int {
	return m.Size()
}
func (m *Fund) XXX_DiscardUnknown() {
	xxx_messageInfo_Fund.DiscardUnknown(m)
}

var xxx_messageInfo_Fund proto.InternalMessageInfo

func (m *Fund) GetValue() *math_big.Int {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Fund) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Fund) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Fund) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type DelegatorData struct {
	TotalActive       *math_big.Int `protobuf:"bytes,1,opt,name=TotalActive,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"TotalActive"`
	UnStakedFunds     [][]byte      `protobuf:"bytes,2,rep,name=UnStakedFunds,proto3" json:"UnStakedFunds"`
	WithdrawOnlyFunds [][]byte      `protobuf:"bytes,3,rep,name=WithdrawOnlyFunds,proto3" json:"WithdrawOnlyFunds"`
}

func (m *DelegatorData) Reset()      { *m = DelegatorData{} }
func (*DelegatorData) ProtoMessage() {}
func (*DelegatorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{5}
}
func (m *DelegatorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DelegatorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorData.Merge(m, src)
}
func (m *DelegatorData) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorData) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorData.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorData proto.InternalMessageInfo

func (m *DelegatorData) GetTotalActive() *math_big.Int {
	if m != nil {
		return m.TotalActive
	}
	return nil
}

func (m *DelegatorData) GetUnStakedFunds() [][]byte {
	if m != nil {
		return m.UnStakedFunds
	}
	return nil
}

func (m *DelegatorData) GetWithdrawOnlyFunds() [][]byte {
	if m != nil {
		return m.WithdrawOnlyFunds
	}
	return nil
}

type GlobalFundData struct {
	ActiveFunds            [][]byte      `protobuf:"bytes,1,rep,name=ActiveFunds,proto3" json:"ActiveFunds"`
	UnStakedFunds          [][]byte      `protobuf:"bytes,2,rep,name=UnStakedFunds,proto3" json:"UnStakedFunds"`
	WithdrawOnlyFunds      [][]byte      `protobuf:"bytes,3,rep,name=WithdrawOnlyFunds,proto3" json:"WithdrawOnlyFunds"`
	TotalUnStakedFromNodes *math_big.Int `protobuf:"bytes,4,opt,name=TotalUnStakedFromNodes,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"TotalUnStakedFromNodes"`
	TotalUnBondedFromNodes *math_big.Int `protobuf:"bytes,5,opt,name=TotalUnBondedFromNodes,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"TotalUnBondedFromNodes"`
}

func (m *GlobalFundData) Reset()      { *m = GlobalFundData{} }
func (*GlobalFundData) ProtoMessage() {}
func (*GlobalFundData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{6}
}
func (m *GlobalFundData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalFundData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalFundData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalFundData.Merge(m, src)
}
func (m *GlobalFundData) XXX_Size() int {
	return m.Size()
}
func (m *GlobalFundData) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalFundData.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalFundData proto.InternalMessageInfo

func (m *GlobalFundData) GetActiveFunds() [][]byte {
	if m != nil {
		return m.ActiveFunds
	}
	return nil
}

func (m *GlobalFundData) GetUnStakedFunds() [][]byte {
	if m != nil {
		return m.UnStakedFunds
	}
	return nil
}

func (m *GlobalFundData) GetWithdrawOnlyFunds() [][]byte {
	if m != nil {
		return m.WithdrawOnlyFunds
	}
	return nil
}

func (m *GlobalFundData) GetTotalUnStakedFromNodes() *math_big.Int {
	if m != nil {
		return m.TotalUnStakedFromNodes
	}
	return nil
}

func (m *GlobalFundData) GetTotalUnBondedFromNodes() *math_big.Int {
	if m != nil {
		return m.TotalUnBondedFromNodes
	}
	return nil
}

type NodesData struct {
	BLSKey    []byte `protobuf:"bytes,1,opt,name=BLSKey,proto3" json:"BLSKey"`
	SignedMsg []byte `protobuf:"bytes,2,opt,name=SignedMsg,proto3" json:"SignedMsg"`
}

func (m *NodesData) Reset()      { *m = NodesData{} }
func (*NodesData) ProtoMessage() {}
func (*NodesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{7}
}
func (m *NodesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesData.Merge(m, src)
}
func (m *NodesData) XXX_Size() int {
	return m.Size()
}
func (m *NodesData) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesData.DiscardUnknown(m)
}

var xxx_messageInfo_NodesData proto.InternalMessageInfo

func (m *NodesData) GetBLSKey() []byte {
	if m != nil {
		return m.BLSKey
	}
	return nil
}

func (m *NodesData) GetSignedMsg() []byte {
	if m != nil {
		return m.SignedMsg
	}
	return nil
}

type RewardComputationData struct {
	RewardsToDistribute *math_big.Int `protobuf:"bytes,1,opt,name=RewardsToDistribute,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"RewardsToDistribute"`
	TotalActive         *math_big.Int `protobuf:"bytes,2,opt,name=TotalActive,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"TotalActive"`
	ServiceFee          uint64        `protobuf:"varint,3,opt,name=ServiceFee,proto3" json:"ServiceFee"`
	StartEpoch          uint32        `protobuf:"varint,4,opt,name=StartEpoch,proto3" json:"StartEpoch"`
	EndEpoch            uint32        `protobuf:"varint,5,opt,name=EndEpoch,proto3" json:"EndEpoch"`
}

func (m *RewardComputationData) Reset()      { *m = RewardComputationData{} }
func (*RewardComputationData) ProtoMessage() {}
func (*RewardComputationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b823c7d67e95582e, []int{8}
}
func (m *RewardComputationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardComputationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RewardComputationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardComputationData.Merge(m, src)
}
func (m *RewardComputationData) XXX_Size() int {
	return m.Size()
}
func (m *RewardComputationData) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardComputationData.DiscardUnknown(m)
}

var xxx_messageInfo_RewardComputationData proto.InternalMessageInfo

func (m *RewardComputationData) GetRewardsToDistribute() *math_big.Int {
	if m != nil {
		return m.RewardsToDistribute
	}
	return nil
}

func (m *RewardComputationData) GetTotalActive() *math_big.Int {
	if m != nil {
		return m.TotalActive
	}
	return nil
}

func (m *RewardComputationData) GetServiceFee() uint64 {
	if m != nil {
		return m.ServiceFee
	}
	return 0
}

func (m *RewardComputationData) GetStartEpoch() uint32 {
	if m != nil {
		return m.StartEpoch
	}
	return 0
}

func (m *RewardComputationData) GetEndEpoch() uint32 {
	if m != nil {
		return m.EndEpoch
	}
	return 0
}

func init() {
	proto.RegisterType((*DelegationManagement)(nil), "proto.DelegationManagement")
	proto.RegisterType((*DelegationContractList)(nil), "proto.DelegationContractList")
	proto.RegisterType((*DelegationConfig)(nil), "proto.DelegationConfig")
	proto.RegisterType((*DelegationContractStatus)(nil), "proto.DelegationContractStatus")
	proto.RegisterType((*Fund)(nil), "proto.Fund")
	proto.RegisterType((*DelegatorData)(nil), "proto.DelegatorData")
	proto.RegisterType((*GlobalFundData)(nil), "proto.GlobalFundData")
	proto.RegisterType((*NodesData)(nil), "proto.NodesData")
	proto.RegisterType((*RewardComputationData)(nil), "proto.RewardComputationData")
}

func init() { proto.RegisterFile("delegation.proto", fileDescriptor_b823c7d67e95582e) }

var fileDescriptor_b823c7d67e95582e = []byte{
	// 1092 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xc1, 0x6b, 0xe3, 0x46,
	0x17, 0xb7, 0xe2, 0x38, 0x9b, 0x4c, 0xe2, 0xfd, 0x9c, 0xd9, 0xec, 0x7e, 0xa6, 0x14, 0x29, 0x08,
	0x0a, 0x81, 0xb2, 0x0e, 0xdb, 0x16, 0xf6, 0xd0, 0x4b, 0x63, 0x27, 0x29, 0x61, 0x63, 0x07, 0xc6,
	0xe9, 0x96, 0x2e, 0x5b, 0xca, 0xd8, 0x9a, 0xc8, 0x62, 0xad, 0x19, 0x23, 0x8d, 0x92, 0x35, 0xf4,
	0xd0, 0xcb, 0x42, 0x4f, 0xa5, 0x3d, 0xf5, 0x54, 0x7a, 0x2d, 0xfb, 0x97, 0xf4, 0x18, 0x7a, 0x28,
	0x39, 0xa9, 0x8d, 0x73, 0x29, 0x3a, 0xed, 0xa5, 0xf7, 0xa2, 0x27, 0xc9, 0x19, 0x45, 0x0e, 0xbd,
	0x98, 0xee, 0x25, 0x9e, 0xf7, 0xde, 0xcc, 0x4f, 0x6f, 0xde, 0xfb, 0xbd, 0xf7, 0x26, 0xa8, 0x66,
	0xb1, 0x21, 0xb3, 0xa9, 0x74, 0x04, 0x6f, 0x8c, 0x3c, 0x21, 0x05, 0xae, 0xc0, 0xcf, 0x3b, 0x0f,
	0x6d, 0x47, 0x0e, 0x82, 0x5e, 0xa3, 0x2f, 0xdc, 0x6d, 0x5b, 0xd8, 0x62, 0x1b, 0xd4, 0xbd, 0xe0,
	0x04, 0x24, 0x10, 0x60, 0x95, 0x9c, 0x32, 0x7f, 0x5a, 0x44, 0x1b, 0xbb, 0x53, 0xa8, 0x36, 0xe5,
	0xd4, 0x66, 0x2e, 0xe3, 0x12, 0xef, 0xa0, 0x5a, 0x27, 0x70, 0x7b, 0xcc, 0x3b, 0x3a, 0x69, 0x09,
	0x2e, 0x3d, 0xda, 0x97, 0x75, 0x6d, 0x53, 0xdb, 0xaa, 0x36, 0xef, 0x47, 0xa1, 0xb1, 0x7e, 0xd3,
	0xe6, 0x93, 0xc2, 0x76, 0xfc, 0x08, 0xad, 0x1e, 0x52, 0x5f, 0xee, 0x58, 0x96, 0xc7, 0x7c, 0xbf,
	0xbe, 0xb0, 0xa9, 0x6d, 0xad, 0x35, 0xff, 0x17, 0x85, 0x86, 0xaa, 0x26, 0xaa, 0x80, 0x7f, 0xd0,
	0xd0, 0x46, 0xdb, 0xe1, 0x19, 0x44, 0xcb, 0x63, 0x54, 0xb2, 0x7d, 0xc6, 0xea, 0x65, 0x38, 0xfc,
	0x65, 0x14, 0x1a, 0x33, 0xed, 0xaf, 0xff, 0x30, 0x76, 0x5c, 0x2a, 0x07, 0xdb, 0x3d, 0xc7, 0x6e,
	0x1c, 0x70, 0xf9, 0xb1, 0x12, 0x85, 0xbd, 0xa1, 0x27, 0xb8, 0xd5, 0x61, 0xf2, 0x4c, 0x78, 0x2f,
	0xb6, 0x19, 0x48, 0x0f, 0x6d, 0xb1, 0x6d, 0x51, 0x49, 0x1b, 0x4d, 0xc7, 0x3e, 0xe0, 0xb2, 0x45,
	0x7d, 0xc9, 0x3c, 0x32, 0x13, 0x1a, 0x3f, 0x46, 0xd5, 0xb6, 0xc3, 0xbb, 0xcc, 0x3b, 0x75, 0xfa,
	0xe0, 0xcb, 0x22, 0x84, 0x61, 0x3d, 0x0a, 0x8d, 0xbc, 0x81, 0xe4, 0x45, 0x38, 0x48, 0x5f, 0x2a,
	0x07, 0x2b, 0xca, 0x41, 0xd5, 0x40, 0xf2, 0x22, 0xfe, 0x56, 0x43, 0xeb, 0x6d, 0x87, 0x1f, 0x8d,
	0x98, 0x07, 0x69, 0x79, 0x4a, 0x87, 0x01, 0xab, 0x2f, 0x41, 0x08, 0x9e, 0xc5, 0xd1, 0x2f, 0x18,
	0xe7, 0x73, 0xff, 0x22, 0xae, 0xb9, 0x87, 0x1e, 0x5c, 0xd3, 0x23, 0x8b, 0xcd, 0xa1, 0xe3, 0x4b,
	0xfc, 0x3e, 0x5a, 0x49, 0xb3, 0xc6, 0xfc, 0xba, 0xb6, 0x59, 0xde, 0x5a, 0x6b, 0x56, 0xa3, 0xd0,
	0xb8, 0x56, 0x92, 0xeb, 0xa5, 0xf9, 0x73, 0x05, 0xd5, 0x72, 0x38, 0x27, 0x8e, 0x8d, 0x3f, 0x42,
	0x6b, 0x47, 0x67, 0x9c, 0x79, 0x19, 0x41, 0x34, 0xb8, 0x60, 0x2d, 0x0a, 0x8d, 0x9c, 0x9e, 0xe4,
	0x24, 0xdc, 0x40, 0x48, 0x09, 0x69, 0x4c, 0xaa, 0xc5, 0xe6, 0xdd, 0x28, 0x34, 0x14, 0x2d, 0x51,
	0xd6, 0xf8, 0x95, 0x86, 0x6a, 0x6d, 0xfa, 0x52, 0xf9, 0x3a, 0x1d, 0xa5, 0x74, 0xfa, 0x22, 0x0a,
	0x8d, 0x82, 0x6d, 0x3e, 0xa1, 0x2c, 0xc0, 0x42, 0x52, 0x0f, 0xb8, 0x23, 0x1d, 0x3a, 0x84, 0xfb,
	0xec, 0x07, 0xdc, 0xf2, 0x81, 0x4b, 0x69, 0x52, 0x0b, 0xc6, 0x39, 0x25, 0xb5, 0x80, 0x8b, 0x0f,
	0xd0, 0xbd, 0x9d, 0x40, 0x0a, 0x97, 0x4a, 0xa7, 0xbf, 0xd3, 0x97, 0xce, 0x29, 0x38, 0x09, 0xf4,
	0x5c, 0x6e, 0xfe, 0x3f, 0x0a, 0x8d, 0x59, 0x66, 0x32, 0x4b, 0x89, 0x5b, 0x68, 0xfd, 0x73, 0x47,
	0x0e, 0xf2, 0xd1, 0x5d, 0x02, 0x20, 0xe8, 0x13, 0x05, 0x23, 0x29, 0xaa, 0xf0, 0x21, 0xda, 0x68,
	0x0d, 0x28, 0xb7, 0x19, 0xed, 0x0d, 0x99, 0x92, 0xdc, 0x3b, 0x80, 0x53, 0x8f, 0x8b, 0x7e, 0x96,
	0x9d, 0xcc, 0xd4, 0xc6, 0xb4, 0x4a, 0x8a, 0xd7, 0xea, 0x08, 0xde, 0x67, 0xf5, 0x65, 0xa0, 0x08,
	0xd0, 0x4a, 0xd5, 0x93, 0x9c, 0x64, 0xfe, 0x5e, 0x46, 0xf5, 0x22, 0xd3, 0xbb, 0x92, 0xca, 0xc0,
	0xc7, 0xa7, 0x68, 0xf5, 0x58, 0x48, 0x3a, 0x84, 0x8b, 0xb3, 0x94, 0xa8, 0xc7, 0x71, 0x27, 0x53,
	0xd4, 0xf3, 0x49, 0x97, 0x8a, 0x88, 0xbf, 0x46, 0x55, 0x10, 0x3f, 0xe3, 0x5d, 0x49, 0x5f, 0x30,
	0x2b, 0xed, 0xa1, 0x4f, 0xe3, 0x0e, 0x92, 0x33, 0xcc, 0xe7, 0xdb, 0x79, 0xcc, 0xb8, 0x7f, 0x75,
	0x02, 0x37, 0x0d, 0x8a, 0xf0, 0x7c, 0xa8, 0x9a, 0xb4, 0x7f, 0xe5, 0x0c, 0x24, 0x2f, 0xe2, 0x4f,
	0x10, 0x4a, 0x20, 0x9e, 0xb0, 0x71, 0x4c, 0xf1, 0xf2, 0xd6, 0xea, 0x07, 0xb5, 0x64, 0xe0, 0x34,
	0x3a, 0xc2, 0x62, 0xfe, 0x2e, 0x95, 0x34, 0x2d, 0xda, 0xe9, 0x3e, 0xa2, 0xac, 0xf1, 0x01, 0xaa,
	0x76, 0x84, 0x54, 0x40, 0x2a, 0xb7, 0x80, 0x24, 0xce, 0xa8, 0x5b, 0x49, 0x5e, 0x34, 0x7f, 0xd3,
	0xd0, 0x62, 0x4c, 0x7b, 0x6c, 0xa1, 0x4a, 0xd2, 0x48, 0x93, 0xf4, 0x75, 0xa2, 0xd0, 0xa8, 0xcc,
	0xb1, 0x79, 0x26, 0x58, 0xf8, 0x3d, 0x74, 0x27, 0x3f, 0xf0, 0x56, 0xa3, 0xd0, 0xc8, 0x54, 0x24,
	0x5b, 0x60, 0x03, 0x55, 0x12, 0x76, 0x96, 0x81, 0x9d, 0x2b, 0xb1, 0x33, 0x09, 0x2d, 0x93, 0x1f,
	0xfc, 0x2e, 0x5a, 0x3c, 0x1e, 0x8f, 0xb2, 0x61, 0xb3, 0x1c, 0x85, 0x06, 0xc8, 0x04, 0xfe, 0x9a,
	0xaf, 0x16, 0x50, 0x75, 0x1a, 0xf0, 0x38, 0x10, 0x6f, 0x8d, 0xa2, 0x8f, 0x51, 0x35, 0x23, 0x4c,
	0xd2, 0xd1, 0x16, 0x60, 0x14, 0x40, 0x5e, 0x72, 0x06, 0x92, 0x17, 0xb3, 0xce, 0x61, 0x79, 0xf4,
	0xec, 0x88, 0x0f, 0xc7, 0xc9, 0xe1, 0x32, 0x1c, 0x9e, 0x76, 0x8e, 0x9c, 0x91, 0x14, 0x55, 0xe6,
	0xdf, 0x65, 0x74, 0xf7, 0xd3, 0xa1, 0xe8, 0xd1, 0x61, 0x2c, 0x43, 0x20, 0x1e, 0xa1, 0xd5, 0xc4,
	0xb5, 0x04, 0x31, 0x99, 0x4c, 0xf0, 0xea, 0x50, 0xd4, 0x44, 0x15, 0xde, 0xee, 0x1d, 0xf0, 0x8f,
	0x1a, 0x7a, 0x90, 0x2b, 0xbc, 0x7d, 0x4f, 0xb8, 0xc0, 0xf0, 0x74, 0x3a, 0x7c, 0x15, 0x85, 0xc6,
	0x2d, 0x3b, 0xe6, 0x93, 0xd0, 0x5b, 0xc0, 0x55, 0xcf, 0x9a, 0x82, 0x5b, 0xaa, 0x67, 0x95, 0x82,
	0x67, 0x37, 0x76, 0xcc, 0xd7, 0xb3, 0x1b, 0xe0, 0xe6, 0x73, 0xb4, 0x32, 0xed, 0x01, 0xd8, 0x44,
	0x4b, 0xcd, 0xc3, 0xee, 0x13, 0x36, 0x4e, 0x59, 0x8f, 0xa2, 0xd0, 0x48, 0x35, 0x24, 0xfd, 0x8d,
	0x5f, 0x2b, 0x5d, 0xc7, 0xe6, 0xcc, 0x6a, 0xfb, 0x76, 0x5a, 0x98, 0xf0, 0x5a, 0x99, 0x2a, 0xc9,
	0xf5, 0xd2, 0x7c, 0x5d, 0x46, 0xf7, 0x09, 0x3b, 0xa3, 0x9e, 0xd5, 0x12, 0xee, 0x28, 0x90, 0x30,
	0x12, 0xe0, 0x53, 0xdf, 0x69, 0xe8, 0x5e, 0x62, 0xf1, 0x8f, 0xc5, 0xae, 0xe3, 0x4b, 0xcf, 0xe9,
	0x05, 0x32, 0x2b, 0xb7, 0xe7, 0xf1, 0xe8, 0x9c, 0x61, 0x9e, 0x4f, 0x2c, 0x66, 0x21, 0xdf, 0x2c,
	0xfb, 0x85, 0xff, 0xaa, 0xec, 0xf3, 0xaf, 0xb0, 0xf2, 0xbf, 0xbe, 0xc2, 0x1a, 0x30, 0x12, 0x3c,
	0xb9, 0x37, 0x12, 0xfd, 0x41, 0xda, 0xd4, 0xb2, 0x01, 0x90, 0x6a, 0x89, 0xb2, 0xc6, 0x5b, 0x68,
	0x79, 0x8f, 0x5b, 0xc9, 0xee, 0xe4, 0xd9, 0xbc, 0x16, 0x85, 0xc6, 0x54, 0x47, 0xa6, 0xab, 0x66,
	0xe7, 0xfc, 0x52, 0x2f, 0x5d, 0x5c, 0xea, 0xa5, 0x37, 0x97, 0xba, 0xf6, 0xcd, 0x44, 0xd7, 0x7e,
	0x99, 0xe8, 0xda, 0xaf, 0x13, 0x5d, 0x3b, 0x9f, 0xe8, 0xda, 0xc5, 0x44, 0xd7, 0xfe, 0x9c, 0xe8,
	0xda, 0x5f, 0x13, 0xbd, 0xf4, 0x66, 0xa2, 0x6b, 0xdf, 0x5f, 0xe9, 0xa5, 0xf3, 0x2b, 0xbd, 0x74,
	0x71, 0xa5, 0x97, 0x9e, 0x6d, 0xf8, 0x63, 0x5f, 0x32, 0xb7, 0xeb, 0x52, 0x4f, 0x4e, 0xff, 0x8f,
	0xe9, 0x2d, 0xc1, 0x88, 0xf9, 0xf0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x2f, 0x7e, 0x25,
	0x62, 0x0d, 0x00, 0x00,
}

func (this *DelegationManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegationManagement)
	if !ok {
		that2, ok := that.(DelegationManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumberOfContract != that1.NumberOfContract {
		return false
	}
	if !bytes.Equal(this.LastAddress, that1.LastAddress) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.MinContractCreateFee, that1.MinContractCreateFee) {
			return false
		}
	}
	if this.MinServiceFee != that1.MinServiceFee {
		return false
	}
	if this.MaxServiceFee != that1.MaxServiceFee {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.MinOperationValue, that1.MinOperationValue) {
			return false
		}
	}
	return true
}
func (this *DelegationContractList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegationContractList)
	if !ok {
		that2, ok := that.(DelegationContractList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if !bytes.Equal(this.Addresses[i], that1.Addresses[i]) {
			return false
		}
	}
	return true
}
func (this *DelegationConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegationConfig)
	if !ok {
		that2, ok := that.(DelegationConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.OwnerAddress, that1.OwnerAddress) {
		return false
	}
	if this.ServiceFee != that1.ServiceFee {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.MaxDelegationCap, that1.MaxDelegationCap) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.InitialOwnerFunds, that1.InitialOwnerFunds) {
			return false
		}
	}
	if this.AutomaticActivation != that1.AutomaticActivation {
		return false
	}
	if this.WithDelegationCap != that1.WithDelegationCap {
		return false
	}
	if this.ChangeableServiceFee != that1.ChangeableServiceFee {
		return false
	}
	if this.CreatedNonce != that1.CreatedNonce {
		return false
	}
	return true
}
func (this *DelegationContractStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegationContractStatus)
	if !ok {
		that2, ok := that.(DelegationContractStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.TotalActive, that1.TotalActive) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.TotalUnStaked, that1.TotalUnStaked) {
			return false
		}
	}
	if this.NumDelegators != that1.NumDelegators {
		return false
	}
	if len(this.StakedKeys) != len(that1.StakedKeys) {
		return false
	}
	for i := range this.StakedKeys {
		if !this.StakedKeys[i].Equal(that1.StakedKeys[i]) {
			return false
		}
	}
	if len(this.NotStakedKeys) != len(that1.NotStakedKeys) {
		return false
	}
	for i := range this.NotStakedKeys {
		if !this.NotStakedKeys[i].Equal(that1.NotStakedKeys[i]) {
			return false
		}
	}
	return true
}
func (this *Fund) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fund)
	if !ok {
		that2, ok := that.(Fund)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.Value, that1.Value) {
			return false
		}
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *DelegatorData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegatorData)
	if !ok {
		that2, ok := that.(DelegatorData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.TotalActive, that1.TotalActive) {
			return false
		}
	}
	if len(this.UnStakedFunds) != len(that1.UnStakedFunds) {
		return false
	}
	for i := range this.UnStakedFunds {
		if !bytes.Equal(this.UnStakedFunds[i], that1.UnStakedFunds[i]) {
			return false
		}
	}
	if len(this.WithdrawOnlyFunds) != len(that1.WithdrawOnlyFunds) {
		return false
	}
	for i := range this.WithdrawOnlyFunds {
		if !bytes.Equal(this.WithdrawOnlyFunds[i], that1.WithdrawOnlyFunds[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalFundData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalFundData)
	if !ok {
		that2, ok := that.(GlobalFundData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ActiveFunds) != len(that1.ActiveFunds) {
		return false
	}
	for i := range this.ActiveFunds {
		if !bytes.Equal(this.ActiveFunds[i], that1.ActiveFunds[i]) {
			return false
		}
	}
	if len(this.UnStakedFunds) != len(that1.UnStakedFunds) {
		return false
	}
	for i := range this.UnStakedFunds {
		if !bytes.Equal(this.UnStakedFunds[i], that1.UnStakedFunds[i]) {
			return false
		}
	}
	if len(this.WithdrawOnlyFunds) != len(that1.WithdrawOnlyFunds) {
		return false
	}
	for i := range this.WithdrawOnlyFunds {
		if !bytes.Equal(this.WithdrawOnlyFunds[i], that1.WithdrawOnlyFunds[i]) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.TotalUnStakedFromNodes, that1.TotalUnStakedFromNodes) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.TotalUnBondedFromNodes, that1.TotalUnBondedFromNodes) {
			return false
		}
	}
	return true
}
func (this *NodesData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodesData)
	if !ok {
		that2, ok := that.(NodesData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BLSKey, that1.BLSKey) {
		return false
	}
	if !bytes.Equal(this.SignedMsg, that1.SignedMsg) {
		return false
	}
	return true
}
func (this *RewardComputationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardComputationData)
	if !ok {
		that2, ok := that.(RewardComputationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.RewardsToDistribute, that1.RewardsToDistribute) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.TotalActive, that1.TotalActive) {
			return false
		}
	}
	if this.ServiceFee != that1.ServiceFee {
		return false
	}
	if this.StartEpoch != that1.StartEpoch {
		return false
	}
	if this.EndEpoch != that1.EndEpoch {
		return false
	}
	return true
}
func (this *DelegationManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&systemSmartContracts.DelegationManagement{")
	s = append(s, "NumberOfContract: "+fmt.Sprintf("%#v", this.NumberOfContract)+",\n")
	s = append(s, "LastAddress: "+fmt.Sprintf("%#v", this.LastAddress)+",\n")
	s = append(s, "MinContractCreateFee: "+fmt.Sprintf("%#v", this.MinContractCreateFee)+",\n")
	s = append(s, "MinServiceFee: "+fmt.Sprintf("%#v", this.MinServiceFee)+",\n")
	s = append(s, "MaxServiceFee: "+fmt.Sprintf("%#v", this.MaxServiceFee)+",\n")
	s = append(s, "MinOperationValue: "+fmt.Sprintf("%#v", this.MinOperationValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegationContractList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&systemSmartContracts.DelegationContractList{")
	s = append(s, "Addresses: "+fmt.Sprintf("%#v", this.Addresses)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegationConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&systemSmartContracts.DelegationConfig{")
	s = append(s, "OwnerAddress: "+fmt.Sprintf("%#v", this.OwnerAddress)+",\n")
	s = append(s, "ServiceFee: "+fmt.Sprintf("%#v", this.ServiceFee)+",\n")
	s = append(s, "MaxDelegationCap: "+fmt.Sprintf("%#v", this.MaxDelegationCap)+",\n")
	s = append(s, "InitialOwnerFunds: "+fmt.Sprintf("%#v", this.InitialOwnerFunds)+",\n")
	s = append(s, "AutomaticActivation: "+fmt.Sprintf("%#v", this.AutomaticActivation)+",\n")
	s = append(s, "WithDelegationCap: "+fmt.Sprintf("%#v", this.WithDelegationCap)+",\n")
	s = append(s, "ChangeableServiceFee: "+fmt.Sprintf("%#v", this.ChangeableServiceFee)+",\n")
	s = append(s, "CreatedNonce: "+fmt.Sprintf("%#v", this.CreatedNonce)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegationContractStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&systemSmartContracts.DelegationContractStatus{")
	s = append(s, "TotalActive: "+fmt.Sprintf("%#v", this.TotalActive)+",\n")
	s = append(s, "TotalUnStaked: "+fmt.Sprintf("%#v", this.TotalUnStaked)+",\n")
	s = append(s, "NumDelegators: "+fmt.Sprintf("%#v", this.NumDelegators)+",\n")
	if this.StakedKeys != nil {
		s = append(s, "StakedKeys: "+fmt.Sprintf("%#v", this.StakedKeys)+",\n")
	}
	if this.NotStakedKeys != nil {
		s = append(s, "NotStakedKeys: "+fmt.Sprintf("%#v", this.NotStakedKeys)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Fund) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&systemSmartContracts.Fund{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegatorData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&systemSmartContracts.DelegatorData{")
	s = append(s, "TotalActive: "+fmt.Sprintf("%#v", this.TotalActive)+",\n")
	s = append(s, "UnStakedFunds: "+fmt.Sprintf("%#v", this.UnStakedFunds)+",\n")
	s = append(s, "WithdrawOnlyFunds: "+fmt.Sprintf("%#v", this.WithdrawOnlyFunds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalFundData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&systemSmartContracts.GlobalFundData{")
	s = append(s, "ActiveFunds: "+fmt.Sprintf("%#v", this.ActiveFunds)+",\n")
	s = append(s, "UnStakedFunds: "+fmt.Sprintf("%#v", this.UnStakedFunds)+",\n")
	s = append(s, "WithdrawOnlyFunds: "+fmt.Sprintf("%#v", this.WithdrawOnlyFunds)+",\n")
	s = append(s, "TotalUnStakedFromNodes: "+fmt.Sprintf("%#v", this.TotalUnStakedFromNodes)+",\n")
	s = append(s, "TotalUnBondedFromNodes: "+fmt.Sprintf("%#v", this.TotalUnBondedFromNodes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodesData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&systemSmartContracts.NodesData{")
	s = append(s, "BLSKey: "+fmt.Sprintf("%#v", this.BLSKey)+",\n")
	s = append(s, "SignedMsg: "+fmt.Sprintf("%#v", this.SignedMsg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RewardComputationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&systemSmartContracts.RewardComputationData{")
	s = append(s, "RewardsToDistribute: "+fmt.Sprintf("%#v", this.RewardsToDistribute)+",\n")
	s = append(s, "TotalActive: "+fmt.Sprintf("%#v", this.TotalActive)+",\n")
	s = append(s, "ServiceFee: "+fmt.Sprintf("%#v", this.ServiceFee)+",\n")
	s = append(s, "StartEpoch: "+fmt.Sprintf("%#v", this.StartEpoch)+",\n")
	s = append(s, "EndEpoch: "+fmt.Sprintf("%#v", this.EndEpoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDelegation(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DelegationManagement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.MinOperationValue)
		i -= size
		if _, err := __caster.MarshalTo(m.MinOperationValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.MaxServiceFee != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.MaxServiceFee))
		i--
		dAtA[i] = 0x28
	}
	if m.MinServiceFee != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.MinServiceFee))
		i--
		dAtA[i] = 0x20
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.MinContractCreateFee)
		i -= size
		if _, err := __caster.MarshalTo(m.MinContractCreateFee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LastAddress) > 0 {
		i -= len(m.LastAddress)
		copy(dAtA[i:], m.LastAddress)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.LastAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.NumberOfContract != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.NumberOfContract))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationContractList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationContractList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationContractList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintDelegation(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedNonce != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.CreatedNonce))
		i--
		dAtA[i] = 0x40
	}
	if m.ChangeableServiceFee {
		i--
		if m.ChangeableServiceFee {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.WithDelegationCap {
		i--
		if m.WithDelegationCap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.AutomaticActivation {
		i--
		if m.AutomaticActivation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.InitialOwnerFunds)
		i -= size
		if _, err := __caster.MarshalTo(m.InitialOwnerFunds, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.MaxDelegationCap)
		i -= size
		if _, err := __caster.MarshalTo(m.MaxDelegationCap, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ServiceFee != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.ServiceFee))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationContractStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationContractStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationContractStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotStakedKeys) > 0 {
		for iNdEx := len(m.NotStakedKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NotStakedKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.StakedKeys) > 0 {
		for iNdEx := len(m.StakedKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakedKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NumDelegators != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.NumDelegators))
		i--
		dAtA[i] = 0x18
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.TotalUnStaked)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalUnStaked, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.TotalActive)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalActive, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Fund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Nonce != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.Value)
		i -= size
		if _, err := __caster.MarshalTo(m.Value, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DelegatorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawOnlyFunds) > 0 {
		for iNdEx := len(m.WithdrawOnlyFunds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WithdrawOnlyFunds[iNdEx])
			copy(dAtA[i:], m.WithdrawOnlyFunds[iNdEx])
			i = encodeVarintDelegation(dAtA, i, uint64(len(m.WithdrawOnlyFunds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UnStakedFunds) > 0 {
		for iNdEx := len(m.UnStakedFunds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnStakedFunds[iNdEx])
			copy(dAtA[i:], m.UnStakedFunds[iNdEx])
			i = encodeVarintDelegation(dAtA, i, uint64(len(m.UnStakedFunds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.TotalActive)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalActive, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GlobalFundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalFundData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalFundData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.TotalUnBondedFromNodes)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalUnBondedFromNodes, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.TotalUnStakedFromNodes)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalUnStakedFromNodes, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.WithdrawOnlyFunds) > 0 {
		for iNdEx := len(m.WithdrawOnlyFunds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WithdrawOnlyFunds[iNdEx])
			copy(dAtA[i:], m.WithdrawOnlyFunds[iNdEx])
			i = encodeVarintDelegation(dAtA, i, uint64(len(m.WithdrawOnlyFunds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UnStakedFunds) > 0 {
		for iNdEx := len(m.UnStakedFunds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnStakedFunds[iNdEx])
			copy(dAtA[i:], m.UnStakedFunds[iNdEx])
			i = encodeVarintDelegation(dAtA, i, uint64(len(m.UnStakedFunds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ActiveFunds) > 0 {
		for iNdEx := len(m.ActiveFunds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ActiveFunds[iNdEx])
			copy(dAtA[i:], m.ActiveFunds[iNdEx])
			i = encodeVarintDelegation(dAtA, i, uint64(len(m.ActiveFunds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignedMsg) > 0 {
		i -= len(m.SignedMsg)
		copy(dAtA[i:], m.SignedMsg)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.SignedMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BLSKey) > 0 {
		i -= len(m.BLSKey)
		copy(dAtA[i:], m.BLSKey)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.BLSKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardComputationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardComputationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardComputationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndEpoch != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.EndEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.StartEpoch != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.StartEpoch))
		i--
		dAtA[i] = 0x20
	}
	if m.ServiceFee != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.ServiceFee))
		i--
		dAtA[i] = 0x18
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.TotalActive)
		i -= size
		if _, err := __caster.MarshalTo(m.TotalActive, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.RewardsToDistribute)
		i -= size
		if _, err := __caster.MarshalTo(m.RewardsToDistribute, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDelegation(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumberOfContract != 0 {
		n += 1 + sovDelegation(uint64(m.NumberOfContract))
	}
	l = len(m.LastAddress)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.MinContractCreateFee)
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.MinServiceFee != 0 {
		n += 1 + sovDelegation(uint64(m.MinServiceFee))
	}
	if m.MaxServiceFee != 0 {
		n += 1 + sovDelegation(uint64(m.MaxServiceFee))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.MinOperationValue)
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *DelegationContractList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, b := range m.Addresses {
			l = len(b)
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	return n
}

func (m *DelegationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.ServiceFee != 0 {
		n += 1 + sovDelegation(uint64(m.ServiceFee))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.MaxDelegationCap)
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.InitialOwnerFunds)
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.AutomaticActivation {
		n += 2
	}
	if m.WithDelegationCap {
		n += 2
	}
	if m.ChangeableServiceFee {
		n += 2
	}
	if m.CreatedNonce != 0 {
		n += 1 + sovDelegation(uint64(m.CreatedNonce))
	}
	return n
}

func (m *DelegationContractStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.TotalActive)
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.TotalUnStaked)
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.NumDelegators != 0 {
		n += 1 + sovDelegation(uint64(m.NumDelegators))
	}
	if len(m.StakedKeys) > 0 {
		for _, e := range m.StakedKeys {
			l = e.Size()
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	if len(m.NotStakedKeys) > 0 {
		for _, e := range m.NotStakedKeys {
			l = e.Size()
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	return n
}

func (m *Fund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.Value)
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovDelegation(uint64(m.Nonce))
	}
	if m.Type != 0 {
		n += 1 + sovDelegation(uint64(m.Type))
	}
	return n
}

func (m *DelegatorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.TotalActive)
		n += 1 + l + sovDelegation(uint64(l))
	}
	if len(m.UnStakedFunds) > 0 {
		for _, b := range m.UnStakedFunds {
			l = len(b)
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	if len(m.WithdrawOnlyFunds) > 0 {
		for _, b := range m.WithdrawOnlyFunds {
			l = len(b)
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	return n
}

func (m *GlobalFundData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActiveFunds) > 0 {
		for _, b := range m.ActiveFunds {
			l = len(b)
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	if len(m.UnStakedFunds) > 0 {
		for _, b := range m.UnStakedFunds {
			l = len(b)
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	if len(m.WithdrawOnlyFunds) > 0 {
		for _, b := range m.WithdrawOnlyFunds {
			l = len(b)
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.TotalUnStakedFromNodes)
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.TotalUnBondedFromNodes)
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *NodesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BLSKey)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.SignedMsg)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *RewardComputationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.RewardsToDistribute)
		n += 1 + l + sovDelegation(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.TotalActive)
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.ServiceFee != 0 {
		n += 1 + sovDelegation(uint64(m.ServiceFee))
	}
	if m.StartEpoch != 0 {
		n += 1 + sovDelegation(uint64(m.StartEpoch))
	}
	if m.EndEpoch != 0 {
		n += 1 + sovDelegation(uint64(m.EndEpoch))
	}
	return n
}

func sovDelegation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegation(x uint64) (n int) {
	return sovDelegation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DelegationManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegationManagement{`,
		`NumberOfContract:` + fmt.Sprintf("%v", this.NumberOfContract) + `,`,
		`LastAddress:` + fmt.Sprintf("%v", this.LastAddress) + `,`,
		`MinContractCreateFee:` + fmt.Sprintf("%v", this.MinContractCreateFee) + `,`,
		`MinServiceFee:` + fmt.Sprintf("%v", this.MinServiceFee) + `,`,
		`MaxServiceFee:` + fmt.Sprintf("%v", this.MaxServiceFee) + `,`,
		`MinOperationValue:` + fmt.Sprintf("%v", this.MinOperationValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegationContractList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegationContractList{`,
		`Addresses:` + fmt.Sprintf("%v", this.Addresses) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegationConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegationConfig{`,
		`OwnerAddress:` + fmt.Sprintf("%v", this.OwnerAddress) + `,`,
		`ServiceFee:` + fmt.Sprintf("%v", this.ServiceFee) + `,`,
		`MaxDelegationCap:` + fmt.Sprintf("%v", this.MaxDelegationCap) + `,`,
		`InitialOwnerFunds:` + fmt.Sprintf("%v", this.InitialOwnerFunds) + `,`,
		`AutomaticActivation:` + fmt.Sprintf("%v", this.AutomaticActivation) + `,`,
		`WithDelegationCap:` + fmt.Sprintf("%v", this.WithDelegationCap) + `,`,
		`ChangeableServiceFee:` + fmt.Sprintf("%v", this.ChangeableServiceFee) + `,`,
		`CreatedNonce:` + fmt.Sprintf("%v", this.CreatedNonce) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegationContractStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStakedKeys := "[]*NodesData{"
	for _, f := range this.StakedKeys {
		repeatedStringForStakedKeys += strings.Replace(f.String(), "NodesData", "NodesData", 1) + ","
	}
	repeatedStringForStakedKeys += "}"
	repeatedStringForNotStakedKeys := "[]*NodesData{"
	for _, f := range this.NotStakedKeys {
		repeatedStringForNotStakedKeys += strings.Replace(f.String(), "NodesData", "NodesData", 1) + ","
	}
	repeatedStringForNotStakedKeys += "}"
	s := strings.Join([]string{`&DelegationContractStatus{`,
		`TotalActive:` + fmt.Sprintf("%v", this.TotalActive) + `,`,
		`TotalUnStaked:` + fmt.Sprintf("%v", this.TotalUnStaked) + `,`,
		`NumDelegators:` + fmt.Sprintf("%v", this.NumDelegators) + `,`,
		`StakedKeys:` + repeatedStringForStakedKeys + `,`,
		`NotStakedKeys:` + repeatedStringForNotStakedKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fund) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Fund{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegatorData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegatorData{`,
		`TotalActive:` + fmt.Sprintf("%v", this.TotalActive) + `,`,
		`UnStakedFunds:` + fmt.Sprintf("%v", this.UnStakedFunds) + `,`,
		`WithdrawOnlyFunds:` + fmt.Sprintf("%v", this.WithdrawOnlyFunds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalFundData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalFundData{`,
		`ActiveFunds:` + fmt.Sprintf("%v", this.ActiveFunds) + `,`,
		`UnStakedFunds:` + fmt.Sprintf("%v", this.UnStakedFunds) + `,`,
		`WithdrawOnlyFunds:` + fmt.Sprintf("%v", this.WithdrawOnlyFunds) + `,`,
		`TotalUnStakedFromNodes:` + fmt.Sprintf("%v", this.TotalUnStakedFromNodes) + `,`,
		`TotalUnBondedFromNodes:` + fmt.Sprintf("%v", this.TotalUnBondedFromNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodesData{`,
		`BLSKey:` + fmt.Sprintf("%v", this.BLSKey) + `,`,
		`SignedMsg:` + fmt.Sprintf("%v", this.SignedMsg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RewardComputationData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RewardComputationData{`,
		`RewardsToDistribute:` + fmt.Sprintf("%v", this.RewardsToDistribute) + `,`,
		`TotalActive:` + fmt.Sprintf("%v", this.TotalActive) + `,`,
		`ServiceFee:` + fmt.Sprintf("%v", this.ServiceFee) + `,`,
		`StartEpoch:` + fmt.Sprintf("%v", this.StartEpoch) + `,`,
		`EndEpoch:` + fmt.Sprintf("%v", this.EndEpoch) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDelegation(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DelegationManagement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationManagement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationManagement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfContract", wireType)
			}
			m.NumberOfContract = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfContract |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastAddress = append(m.LastAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.LastAddress == nil {
				m.LastAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinContractCreateFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MinContractCreateFee = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinServiceFee", wireType)
			}
			m.MinServiceFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinServiceFee |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxServiceFee", wireType)
			}
			m.MaxServiceFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxServiceFee |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOperationValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MinOperationValue = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationContractList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationContractList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationContractList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, make([]byte, postIndex-iNdEx))
			copy(m.Addresses[len(m.Addresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = append(m.OwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnerAddress == nil {
				m.OwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			m.ServiceFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegationCap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MaxDelegationCap = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialOwnerFunds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.InitialOwnerFunds = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticActivation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutomaticActivation = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDelegationCap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithDelegationCap = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeableServiceFee", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeableServiceFee = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedNonce", wireType)
			}
			m.CreatedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationContractStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationContractStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationContractStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalActive = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnStaked", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalUnStaked = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDelegators", wireType)
			}
			m.NumDelegators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDelegators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakedKeys = append(m.StakedKeys, &NodesData{})
			if err := m.StakedKeys[len(m.StakedKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotStakedKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotStakedKeys = append(m.NotStakedKeys, &NodesData{})
			if err := m.NotStakedKeys[len(m.NotStakedKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Value = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalActive = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedFunds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnStakedFunds = append(m.UnStakedFunds, make([]byte, postIndex-iNdEx))
			copy(m.UnStakedFunds[len(m.UnStakedFunds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawOnlyFunds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawOnlyFunds = append(m.WithdrawOnlyFunds, make([]byte, postIndex-iNdEx))
			copy(m.WithdrawOnlyFunds[len(m.WithdrawOnlyFunds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalFundData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalFundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalFundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveFunds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveFunds = append(m.ActiveFunds, make([]byte, postIndex-iNdEx))
			copy(m.ActiveFunds[len(m.ActiveFunds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedFunds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnStakedFunds = append(m.UnStakedFunds, make([]byte, postIndex-iNdEx))
			copy(m.UnStakedFunds[len(m.UnStakedFunds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawOnlyFunds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawOnlyFunds = append(m.WithdrawOnlyFunds, make([]byte, postIndex-iNdEx))
			copy(m.WithdrawOnlyFunds[len(m.WithdrawOnlyFunds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnStakedFromNodes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalUnStakedFromNodes = tmp
				}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnBondedFromNodes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalUnBondedFromNodes = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BLSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BLSKey = append(m.BLSKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BLSKey == nil {
				m.BLSKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedMsg = append(m.SignedMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedMsg == nil {
				m.SignedMsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardComputationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardComputationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardComputationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsToDistribute", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.RewardsToDistribute = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActive", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.TotalActive = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFee", wireType)
			}
			m.ServiceFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEpoch", wireType)
			}
			m.StartEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEpoch", wireType)
			}
			m.EndEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegation = fmt.Errorf("proto: unexpected end of group")
)
