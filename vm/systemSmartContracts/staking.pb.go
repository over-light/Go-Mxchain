// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: staking.proto

package systemSmartContracts

import (
	bytes "bytes"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_data "github.com/ElrondNetwork/elrond-go/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakingData struct {
	StartNonce    uint64        `protobuf:"varint,1,opt,name=StartNonce,proto3" json:"StartNonce"`
	Staked        bool          `protobuf:"varint,2,opt,name=Staked,proto3" json:"Staked"`
	UnStakedNonce uint64        `protobuf:"varint,3,opt,name=UnStakedNonce,proto3" json:"UnStakedNonce"`
	Address       []byte        `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address"`
	StakeValue    *math_big.Int `protobuf:"bytes,5,opt,name=StakeValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"StakeValue"`
}

func (m *StakingData) Reset()      { *m = StakingData{} }
func (*StakingData) ProtoMessage() {}
func (*StakingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_289e7c8aea278311, []int{0}
}
func (m *StakingData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingData.Merge(m, src)
}
func (m *StakingData) XXX_Size() int {
	return m.Size()
}
func (m *StakingData) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingData.DiscardUnknown(m)
}

var xxx_messageInfo_StakingData proto.InternalMessageInfo

func (m *StakingData) GetStartNonce() uint64 {
	if m != nil {
		return m.StartNonce
	}
	return 0
}

func (m *StakingData) GetStaked() bool {
	if m != nil {
		return m.Staked
	}
	return false
}

func (m *StakingData) GetUnStakedNonce() uint64 {
	if m != nil {
		return m.UnStakedNonce
	}
	return 0
}

func (m *StakingData) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *StakingData) GetStakeValue() *math_big.Int {
	if m != nil {
		return m.StakeValue
	}
	return nil
}

func init() {
	proto.RegisterType((*StakingData)(nil), "proto.StakingData")
}

func init() { proto.RegisterFile("staking.proto", fileDescriptor_289e7c8aea278311) }

var fileDescriptor_289e7c8aea278311 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xfe, 0x6d, 0x7f, 0xe4, 0x52, 0x24, 0x22, 0x86, 0x88, 0xc1, 0xa9, 0x2a, 0x21,
	0x75, 0x69, 0x32, 0x30, 0x30, 0x30, 0x35, 0x85, 0xa1, 0x0c, 0x1d, 0x12, 0xc1, 0xc0, 0xe6, 0x34,
	0x26, 0x8d, 0xda, 0xc4, 0xc8, 0xbe, 0x15, 0x62, 0xe3, 0x11, 0x78, 0x0c, 0xc4, 0x03, 0xf0, 0x0c,
	0x8c, 0x1d, 0x3b, 0x05, 0x9a, 0x2e, 0x28, 0x53, 0x1f, 0x01, 0xe1, 0xa4, 0x52, 0x3a, 0xdd, 0x73,
	0x3e, 0xfb, 0x1e, 0x1d, 0xd9, 0xb8, 0x2d, 0x81, 0xce, 0xa2, 0x24, 0xb4, 0x1e, 0x05, 0x07, 0xae,
	0x37, 0xd4, 0x38, 0xed, 0x87, 0x11, 0x4c, 0x17, 0xbe, 0x35, 0xe1, 0xb1, 0x1d, 0xf2, 0x90, 0xdb,
	0x0a, 0xfb, 0x8b, 0x07, 0xe5, 0x94, 0x51, 0xaa, 0xd8, 0xea, 0x7e, 0xd4, 0x70, 0xcb, 0x2b, 0x72,
	0xae, 0x28, 0x50, 0xdd, 0xc2, 0xd8, 0x03, 0x2a, 0x60, 0xcc, 0x93, 0x09, 0x33, 0x50, 0x07, 0xf5,
	0xea, 0xce, 0x51, 0x9e, 0x9a, 0x15, 0xea, 0x56, 0xb4, 0xde, 0xc5, 0xcd, 0xbf, 0x75, 0x16, 0x18,
	0xb5, 0x0e, 0xea, 0x1d, 0x38, 0x38, 0x4f, 0xcd, 0x92, 0xb8, 0xe5, 0xd4, 0x2f, 0x70, 0xfb, 0x36,
	0x29, 0x74, 0x11, 0xfb, 0x4f, 0xc5, 0x1e, 0xe7, 0xa9, 0xb9, 0x7f, 0xe0, 0xee, 0x5b, 0xfd, 0x0c,
	0xff, 0x1f, 0x04, 0x81, 0x60, 0x52, 0x1a, 0xf5, 0x0e, 0xea, 0x1d, 0x3a, 0xad, 0x3c, 0x35, 0x77,
	0xc8, 0xdd, 0x09, 0x5d, 0xaa, 0xce, 0x33, 0x76, 0x47, 0xe7, 0x0b, 0x66, 0x34, 0xd4, 0x4d, 0xaf,
	0xec, 0x5c, 0xd2, 0xf7, 0x2f, 0x73, 0x10, 0x53, 0x98, 0xda, 0x7e, 0x14, 0x5a, 0xa3, 0x04, 0x2e,
	0x2b, 0xaf, 0x74, 0x3d, 0x17, 0x3c, 0x09, 0xc6, 0x0c, 0x9e, 0xb8, 0x98, 0xd9, 0x4c, 0xb9, 0x7e,
	0xc8, 0xed, 0x80, 0x02, 0xb5, 0x9c, 0x28, 0x1c, 0x25, 0x30, 0xa4, 0x12, 0x98, 0x70, 0x2b, 0x81,
	0xce, 0xcd, 0x72, 0x4d, 0xb4, 0xd5, 0x9a, 0x68, 0xdb, 0x35, 0x41, 0x2f, 0x19, 0x41, 0x6f, 0x19,
	0x41, 0x9f, 0x19, 0x41, 0xcb, 0x8c, 0xa0, 0xef, 0x8c, 0xa0, 0x9f, 0x8c, 0x68, 0xdb, 0x8c, 0xa0,
	0xd7, 0x0d, 0xd1, 0x96, 0x1b, 0xa2, 0xad, 0x36, 0x44, 0xbb, 0x3f, 0x91, 0xcf, 0x12, 0x58, 0xec,
	0xc5, 0x54, 0xc0, 0x90, 0x27, 0x20, 0xe8, 0x04, 0xa4, 0xdf, 0x54, 0x7f, 0x71, 0xfe, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0x8e, 0xd0, 0xe7, 0x29, 0xd2, 0x01, 0x00, 0x00,
}

func (this *StakingData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StakingData)
	if !ok {
		that2, ok := that.(StakingData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartNonce != that1.StartNonce {
		return false
	}
	if this.Staked != that1.Staked {
		return false
	}
	if this.UnStakedNonce != that1.UnStakedNonce {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.StakeValue, that1.StakeValue) {
			return false
		}
	}
	return true
}
func (this *StakingData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&systemSmartContracts.StakingData{")
	s = append(s, "StartNonce: "+fmt.Sprintf("%#v", this.StartNonce)+",\n")
	s = append(s, "Staked: "+fmt.Sprintf("%#v", this.Staked)+",\n")
	s = append(s, "UnStakedNonce: "+fmt.Sprintf("%#v", this.UnStakedNonce)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "StakeValue: "+fmt.Sprintf("%#v", this.StakeValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStaking(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StakingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.StakeValue)
		i -= size
		if _, err := __caster.MarshalTo(m.StakeValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.UnStakedNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.UnStakedNonce))
		i--
		dAtA[i] = 0x18
	}
	if m.Staked {
		i--
		if m.Staked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.StartNonce != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.StartNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakingData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartNonce != 0 {
		n += 1 + sovStaking(uint64(m.StartNonce))
	}
	if m.Staked {
		n += 2
	}
	if m.UnStakedNonce != 0 {
		n += 1 + sovStaking(uint64(m.UnStakedNonce))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.StakeValue)
		n += 1 + l + sovStaking(uint64(l))
	}
	return n
}

func sovStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaking(x uint64) (n int) {
	return sovStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StakingData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StakingData{`,
		`StartNonce:` + fmt.Sprintf("%v", this.StartNonce) + `,`,
		`Staked:` + fmt.Sprintf("%v", this.Staked) + `,`,
		`UnStakedNonce:` + fmt.Sprintf("%v", this.UnStakedNonce) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`StakeValue:` + fmt.Sprintf("%v", this.StakeValue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStaking(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StakingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartNonce", wireType)
			}
			m.StartNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Staked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedNonce", wireType)
			}
			m.UnStakedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnStakedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.StakeValue = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaking = fmt.Errorf("proto: unexpected end of group")
)
