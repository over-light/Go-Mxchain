syntax = "proto3";

package proto;

option go_package = "systemSmartContracts";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message AuctionData {
    uint64   RegisterNonce    = 1 [(gogoproto.jsontag) = "RegisterNonce"];
    uint32   Epoch            = 2 [(gogoproto.jsontag) = "Epoch"];
    bytes    RewardAddress    = 3 [(gogoproto.jsontag) = "RewardAddress"];
    bytes    TotalStakeValue  = 4 [(gogoproto.jsontag) = "TotalStakeValue", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
    bytes    LockedStake      = 5 [(gogoproto.jsontag) = "LockedStake", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
    bytes    MaxStakePerNode  = 6 [(gogoproto.jsontag) = "MaxStakePerNode", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
    repeated bytes BlsPubKeys = 7 [(gogoproto.jsontag) = "BlsPubKeys"];
}

message AuctionConfig {
    uint32 NumNodes      = 1 [(gogoproto.jsontag) = "NumNodes"];
    bytes  MinStakeValue = 2 [(gogoproto.jsontag) = "MinStakeValue", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
    bytes  TotalSupply   = 3 [(gogoproto.jsontag) = "TotalSupply", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
    bytes  MinStep       = 4 [(gogoproto.jsontag) = "MinStep", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
    bytes  NodePrice     = 5 [(gogoproto.jsontag) = "NodePrice", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
    bytes  UnJailPrice   = 6 [(gogoproto.jsontag) = "UnJailPrice", (gogoproto.casttypewith) = "math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster"];
}