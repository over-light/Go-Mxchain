// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bootstrapData.proto

package bootstrapStorage

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//MiniBlocksInMeta is used to store all mini blocks hashes for a metablock hash
type MiniBlocksInMeta struct {
	MetaHash         []byte   `protobuf:"bytes,1,opt,name=MetaHash,proto3" json:"MetaHash,omitempty"`
	MiniBlocksHashes [][]byte `protobuf:"bytes,2,rep,name=MiniBlocksHashes,proto3" json:"MiniBlocksHashes,omitempty"`
}

func (m *MiniBlocksInMeta) Reset()      { *m = MiniBlocksInMeta{} }
func (*MiniBlocksInMeta) ProtoMessage() {}
func (*MiniBlocksInMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9e3de0f7706101, []int{0}
}
func (m *MiniBlocksInMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiniBlocksInMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiniBlocksInMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiniBlocksInMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiniBlocksInMeta.Merge(m, src)
}
func (m *MiniBlocksInMeta) XXX_Size() int {
	return m.Size()
}
func (m *MiniBlocksInMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_MiniBlocksInMeta.DiscardUnknown(m)
}

var xxx_messageInfo_MiniBlocksInMeta proto.InternalMessageInfo

func (m *MiniBlocksInMeta) GetMetaHash() []byte {
	if m != nil {
		return m.MetaHash
	}
	return nil
}

func (m *MiniBlocksInMeta) GetMiniBlocksHashes() [][]byte {
	if m != nil {
		return m.MiniBlocksHashes
	}
	return nil
}

//BootstrapHeaderInfo is used to store information about a header
type BootstrapHeaderInfo struct {
	ShardId uint32 `protobuf:"varint,1,opt,name=ShardId,proto3" json:"ShardId,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Hash    []byte `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *BootstrapHeaderInfo) Reset()      { *m = BootstrapHeaderInfo{} }
func (*BootstrapHeaderInfo) ProtoMessage() {}
func (*BootstrapHeaderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9e3de0f7706101, []int{1}
}
func (m *BootstrapHeaderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapHeaderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapHeaderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapHeaderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapHeaderInfo.Merge(m, src)
}
func (m *BootstrapHeaderInfo) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapHeaderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapHeaderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapHeaderInfo proto.InternalMessageInfo

func (m *BootstrapHeaderInfo) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *BootstrapHeaderInfo) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BootstrapHeaderInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

//PendingMiniBlockInfo is used to store information about the number of pending miniblocks
type PendingMiniBlockInfo struct {
	ShardID              uint32 `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	NumPendingMiniBlocks uint32 `protobuf:"varint,2,opt,name=NumPendingMiniBlocks,proto3" json:"NumPendingMiniBlocks,omitempty"`
}

func (m *PendingMiniBlockInfo) Reset()      { *m = PendingMiniBlockInfo{} }
func (*PendingMiniBlockInfo) ProtoMessage() {}
func (*PendingMiniBlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9e3de0f7706101, []int{2}
}
func (m *PendingMiniBlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingMiniBlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingMiniBlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingMiniBlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingMiniBlockInfo.Merge(m, src)
}
func (m *PendingMiniBlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingMiniBlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingMiniBlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingMiniBlockInfo proto.InternalMessageInfo

func (m *PendingMiniBlockInfo) GetShardID() uint32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *PendingMiniBlockInfo) GetNumPendingMiniBlocks() uint32 {
	if m != nil {
		return m.NumPendingMiniBlocks
	}
	return 0
}

// BootstrapData is used to store information that are needed for bootstrap
type BootstrapData struct {
	LastHeader                BootstrapHeaderInfo    `protobuf:"bytes,1,opt,name=LastHeader,proto3" json:"LastHeader"`
	LastCrossNotarizedHeaders []BootstrapHeaderInfo  `protobuf:"bytes,2,rep,name=LastCrossNotarizedHeaders,proto3" json:"LastCrossNotarizedHeaders"`
	LastSelfNotarizedHeaders  []BootstrapHeaderInfo  `protobuf:"bytes,7,rep,name=LastSelfNotarizedHeaders,proto3" json:"LastSelfNotarizedHeaders"`
	ProcessedMiniBlocks       []MiniBlocksInMeta     `protobuf:"bytes,4,rep,name=ProcessedMiniBlocks,proto3" json:"ProcessedMiniBlocks"`
	PendingMiniBlocks         []PendingMiniBlockInfo `protobuf:"bytes,8,rep,name=PendingMiniBlocks,proto3" json:"PendingMiniBlocks"`
	HighestFinalBlockNonce    uint64                 `protobuf:"varint,5,opt,name=HighestFinalBlockNonce,proto3" json:"HighestFinalBlockNonce,omitempty"`
	LastRound                 int64                  `protobuf:"varint,6,opt,name=LastRound,proto3" json:"LastRound,omitempty"`
}

func (m *BootstrapData) Reset()      { *m = BootstrapData{} }
func (*BootstrapData) ProtoMessage() {}
func (*BootstrapData) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9e3de0f7706101, []int{3}
}
func (m *BootstrapData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapData.Merge(m, src)
}
func (m *BootstrapData) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapData) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapData.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapData proto.InternalMessageInfo

func (m *BootstrapData) GetLastHeader() BootstrapHeaderInfo {
	if m != nil {
		return m.LastHeader
	}
	return BootstrapHeaderInfo{}
}

func (m *BootstrapData) GetLastCrossNotarizedHeaders() []BootstrapHeaderInfo {
	if m != nil {
		return m.LastCrossNotarizedHeaders
	}
	return nil
}

func (m *BootstrapData) GetLastSelfNotarizedHeaders() []BootstrapHeaderInfo {
	if m != nil {
		return m.LastSelfNotarizedHeaders
	}
	return nil
}

func (m *BootstrapData) GetProcessedMiniBlocks() []MiniBlocksInMeta {
	if m != nil {
		return m.ProcessedMiniBlocks
	}
	return nil
}

func (m *BootstrapData) GetPendingMiniBlocks() []PendingMiniBlockInfo {
	if m != nil {
		return m.PendingMiniBlocks
	}
	return nil
}

func (m *BootstrapData) GetHighestFinalBlockNonce() uint64 {
	if m != nil {
		return m.HighestFinalBlockNonce
	}
	return 0
}

func (m *BootstrapData) GetLastRound() int64 {
	if m != nil {
		return m.LastRound
	}
	return 0
}

type RoundNum struct {
	Num int64 `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
}

func (m *RoundNum) Reset()      { *m = RoundNum{} }
func (*RoundNum) ProtoMessage() {}
func (*RoundNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9e3de0f7706101, []int{4}
}
func (m *RoundNum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoundNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoundNum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoundNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundNum.Merge(m, src)
}
func (m *RoundNum) XXX_Size() int {
	return m.Size()
}
func (m *RoundNum) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundNum.DiscardUnknown(m)
}

var xxx_messageInfo_RoundNum proto.InternalMessageInfo

func (m *RoundNum) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*MiniBlocksInMeta)(nil), "proto.MiniBlocksInMeta")
	proto.RegisterType((*BootstrapHeaderInfo)(nil), "proto.BootstrapHeaderInfo")
	proto.RegisterType((*PendingMiniBlockInfo)(nil), "proto.PendingMiniBlockInfo")
	proto.RegisterType((*BootstrapData)(nil), "proto.BootstrapData")
	proto.RegisterType((*RoundNum)(nil), "proto.RoundNum")
}

func init() { proto.RegisterFile("bootstrapData.proto", fileDescriptor_cd9e3de0f7706101) }

var fileDescriptor_cd9e3de0f7706101 = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xda, 0x4e,
	0x10, 0xc7, 0xbd, 0xb1, 0x49, 0xf8, 0xcd, 0x2f, 0x48, 0x74, 0x41, 0xad, 0x4b, 0xa3, 0x2d, 0xf2,
	0x09, 0x55, 0x2a, 0x91, 0x52, 0xa9, 0xe7, 0xca, 0x45, 0x11, 0x48, 0x8d, 0x13, 0x99, 0x53, 0xa3,
	0xaa, 0xd2, 0x82, 0x17, 0x63, 0x15, 0xbc, 0x91, 0x77, 0x7d, 0xe9, 0xa9, 0xb7, 0x5e, 0xfb, 0x18,
	0x7d, 0x94, 0x1c, 0x39, 0xe6, 0x54, 0x15, 0x73, 0xe9, 0x31, 0x8f, 0x50, 0x79, 0x4c, 0x28, 0x09,
	0x20, 0xe5, 0xb4, 0xf3, 0x9d, 0xf1, 0x7c, 0x76, 0xe7, 0x8f, 0xa1, 0x36, 0x90, 0x52, 0x2b, 0x9d,
	0xf0, 0xab, 0x0e, 0xd7, 0xbc, 0x7d, 0x95, 0x48, 0x2d, 0x69, 0x09, 0x8f, 0xc6, 0xeb, 0x30, 0xd2,
	0xe3, 0x74, 0xd0, 0x1e, 0xca, 0xe9, 0x71, 0x28, 0x43, 0x79, 0x8c, 0xee, 0x41, 0x3a, 0x42, 0x85,
	0x02, 0xad, 0x22, 0xcb, 0xb9, 0x84, 0xea, 0x59, 0x14, 0x47, 0xee, 0x44, 0x0e, 0xbf, 0xa8, 0x5e,
	0x7c, 0x26, 0x34, 0xa7, 0x0d, 0x28, 0xe7, 0x67, 0x97, 0xab, 0xb1, 0x4d, 0x9a, 0xa4, 0x75, 0xe8,
	0xaf, 0x34, 0x7d, 0xb5, 0xfe, 0x7d, 0xee, 0x11, 0xca, 0xde, 0x6b, 0x9a, 0xad, 0x43, 0x7f, 0xc3,
	0xef, 0x7c, 0x84, 0x9a, 0x7b, 0xf7, 0xd0, 0xae, 0xe0, 0x81, 0x48, 0x7a, 0xf1, 0x48, 0x52, 0x1b,
	0x0e, 0xfa, 0x63, 0x9e, 0x04, 0xbd, 0x00, 0xe9, 0x15, 0xff, 0x4e, 0xd2, 0x3a, 0x94, 0x3c, 0x19,
	0x0f, 0x85, 0xbd, 0xd7, 0x24, 0x2d, 0xcb, 0x2f, 0x04, 0xa5, 0x60, 0xe1, 0x53, 0x4c, 0x7c, 0x0a,
	0xda, 0x4e, 0x00, 0xf5, 0x0b, 0x11, 0x07, 0x51, 0x1c, 0xae, 0x6e, 0xbd, 0xcf, 0xee, 0xdc, 0x67,
	0x77, 0xe8, 0x09, 0xd4, 0xbd, 0x74, 0xfa, 0x30, 0x49, 0xe1, 0x55, 0x15, 0x7f, 0x6b, 0xcc, 0xf9,
	0x6e, 0x41, 0xc5, 0x5d, 0x6f, 0x35, 0x7d, 0x07, 0xf0, 0x81, 0x2b, 0x5d, 0x54, 0x83, 0x57, 0xfc,
	0x7f, 0xd2, 0x28, 0x5a, 0xd9, 0xde, 0x52, 0xab, 0x6b, 0x5d, 0xff, 0x7a, 0x69, 0xf8, 0x6b, 0x39,
	0xf4, 0x33, 0x3c, 0xcf, 0xd5, 0xfb, 0x44, 0x2a, 0xe5, 0x49, 0xcd, 0x93, 0xe8, 0xab, 0x08, 0x8a,
	0x58, 0xd1, 0xc9, 0xc7, 0x00, 0x77, 0x23, 0xe8, 0x27, 0xb0, 0xf3, 0x60, 0x5f, 0x4c, 0x46, 0x1b,
	0xf8, 0x83, 0x47, 0xe2, 0x77, 0x12, 0xe8, 0x39, 0xd4, 0x2e, 0x12, 0x39, 0x14, 0x4a, 0x89, 0x60,
	0xad, 0x89, 0x16, 0x82, 0x9f, 0x2d, 0xc1, 0x0f, 0x17, 0x6a, 0x49, 0xdd, 0x96, 0x49, 0xcf, 0xe1,
	0xc9, 0xe6, 0x4c, 0xca, 0x88, 0x7b, 0xb1, 0xc4, 0x6d, 0x1b, 0xf4, 0x12, 0xb9, 0x99, 0x4b, 0xdf,
	0xc2, 0xd3, 0x6e, 0x14, 0x8e, 0x85, 0xd2, 0xa7, 0x51, 0xcc, 0x27, 0xe8, 0x2d, 0x96, 0xaa, 0x84,
	0x4b, 0xb5, 0x23, 0x4a, 0x8f, 0xe0, 0xbf, 0xbc, 0x6a, 0x5f, 0xa6, 0x71, 0x60, 0xef, 0x37, 0x49,
	0xcb, 0xf4, 0xff, 0x39, 0x9c, 0x23, 0x28, 0xa3, 0xe1, 0xa5, 0x53, 0x5a, 0x05, 0xd3, 0x4b, 0xa7,
	0x38, 0x7c, 0xd3, 0xcf, 0x4d, 0xf7, 0x74, 0x36, 0x67, 0xc6, 0xcd, 0x9c, 0x19, 0xb7, 0x73, 0x46,
	0xbe, 0x65, 0x8c, 0xfc, 0xcc, 0x18, 0xb9, 0xce, 0x18, 0x99, 0x65, 0x8c, 0xfc, 0xce, 0x18, 0xf9,
	0x93, 0x31, 0xe3, 0x36, 0x63, 0xe4, 0xc7, 0x82, 0x19, 0xb3, 0x05, 0x33, 0x6e, 0x16, 0xcc, 0xb8,
	0xac, 0xae, 0xfe, 0xe2, 0xbe, 0x96, 0x09, 0x0f, 0xc5, 0x60, 0x1f, 0x0b, 0x7e, 0xf3, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xf9, 0xa7, 0xa9, 0x63, 0xe0, 0x03, 0x00, 0x00,
}

func (this *MiniBlocksInMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MiniBlocksInMeta)
	if !ok {
		that2, ok := that.(MiniBlocksInMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.MetaHash, that1.MetaHash) {
		return false
	}
	if len(this.MiniBlocksHashes) != len(that1.MiniBlocksHashes) {
		return false
	}
	for i := range this.MiniBlocksHashes {
		if !bytes.Equal(this.MiniBlocksHashes[i], that1.MiniBlocksHashes[i]) {
			return false
		}
	}
	return true
}
func (this *BootstrapHeaderInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BootstrapHeaderInfo)
	if !ok {
		that2, ok := that.(BootstrapHeaderInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	return true
}
func (this *PendingMiniBlockInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingMiniBlockInfo)
	if !ok {
		that2, ok := that.(PendingMiniBlockInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShardID != that1.ShardID {
		return false
	}
	if this.NumPendingMiniBlocks != that1.NumPendingMiniBlocks {
		return false
	}
	return true
}
func (this *BootstrapData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BootstrapData)
	if !ok {
		that2, ok := that.(BootstrapData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LastHeader.Equal(&that1.LastHeader) {
		return false
	}
	if len(this.LastCrossNotarizedHeaders) != len(that1.LastCrossNotarizedHeaders) {
		return false
	}
	for i := range this.LastCrossNotarizedHeaders {
		if !this.LastCrossNotarizedHeaders[i].Equal(&that1.LastCrossNotarizedHeaders[i]) {
			return false
		}
	}
	if len(this.LastSelfNotarizedHeaders) != len(that1.LastSelfNotarizedHeaders) {
		return false
	}
	for i := range this.LastSelfNotarizedHeaders {
		if !this.LastSelfNotarizedHeaders[i].Equal(&that1.LastSelfNotarizedHeaders[i]) {
			return false
		}
	}
	if len(this.ProcessedMiniBlocks) != len(that1.ProcessedMiniBlocks) {
		return false
	}
	for i := range this.ProcessedMiniBlocks {
		if !this.ProcessedMiniBlocks[i].Equal(&that1.ProcessedMiniBlocks[i]) {
			return false
		}
	}
	if len(this.PendingMiniBlocks) != len(that1.PendingMiniBlocks) {
		return false
	}
	for i := range this.PendingMiniBlocks {
		if !this.PendingMiniBlocks[i].Equal(&that1.PendingMiniBlocks[i]) {
			return false
		}
	}
	if this.HighestFinalBlockNonce != that1.HighestFinalBlockNonce {
		return false
	}
	if this.LastRound != that1.LastRound {
		return false
	}
	return true
}
func (this *RoundNum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoundNum)
	if !ok {
		that2, ok := that.(RoundNum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *MiniBlocksInMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bootstrapStorage.MiniBlocksInMeta{")
	s = append(s, "MetaHash: "+fmt.Sprintf("%#v", this.MetaHash)+",\n")
	s = append(s, "MiniBlocksHashes: "+fmt.Sprintf("%#v", this.MiniBlocksHashes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BootstrapHeaderInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bootstrapStorage.BootstrapHeaderInfo{")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingMiniBlockInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bootstrapStorage.PendingMiniBlockInfo{")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "NumPendingMiniBlocks: "+fmt.Sprintf("%#v", this.NumPendingMiniBlocks)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BootstrapData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&bootstrapStorage.BootstrapData{")
	s = append(s, "LastHeader: "+strings.Replace(this.LastHeader.GoString(), `&`, ``, 1)+",\n")
	if this.LastCrossNotarizedHeaders != nil {
		vs := make([]BootstrapHeaderInfo, len(this.LastCrossNotarizedHeaders))
		for i := range vs {
			vs[i] = this.LastCrossNotarizedHeaders[i]
		}
		s = append(s, "LastCrossNotarizedHeaders: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.LastSelfNotarizedHeaders != nil {
		vs := make([]BootstrapHeaderInfo, len(this.LastSelfNotarizedHeaders))
		for i := range vs {
			vs[i] = this.LastSelfNotarizedHeaders[i]
		}
		s = append(s, "LastSelfNotarizedHeaders: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.ProcessedMiniBlocks != nil {
		vs := make([]MiniBlocksInMeta, len(this.ProcessedMiniBlocks))
		for i := range vs {
			vs[i] = this.ProcessedMiniBlocks[i]
		}
		s = append(s, "ProcessedMiniBlocks: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.PendingMiniBlocks != nil {
		vs := make([]PendingMiniBlockInfo, len(this.PendingMiniBlocks))
		for i := range vs {
			vs[i] = this.PendingMiniBlocks[i]
		}
		s = append(s, "PendingMiniBlocks: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "HighestFinalBlockNonce: "+fmt.Sprintf("%#v", this.HighestFinalBlockNonce)+",\n")
	s = append(s, "LastRound: "+fmt.Sprintf("%#v", this.LastRound)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoundNum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bootstrapStorage.RoundNum{")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBootstrapData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MiniBlocksInMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiniBlocksInMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiniBlocksInMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MiniBlocksHashes) > 0 {
		for iNdEx := len(m.MiniBlocksHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MiniBlocksHashes[iNdEx])
			copy(dAtA[i:], m.MiniBlocksHashes[iNdEx])
			i = encodeVarintBootstrapData(dAtA, i, uint64(len(m.MiniBlocksHashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MetaHash) > 0 {
		i -= len(m.MetaHash)
		copy(dAtA[i:], m.MetaHash)
		i = encodeVarintBootstrapData(dAtA, i, uint64(len(m.MetaHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BootstrapHeaderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapHeaderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootstrapHeaderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBootstrapData(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintBootstrapData(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardId != 0 {
		i = encodeVarintBootstrapData(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingMiniBlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingMiniBlockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingMiniBlockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumPendingMiniBlocks != 0 {
		i = encodeVarintBootstrapData(dAtA, i, uint64(m.NumPendingMiniBlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardID != 0 {
		i = encodeVarintBootstrapData(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BootstrapData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BootstrapData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingMiniBlocks) > 0 {
		for iNdEx := len(m.PendingMiniBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingMiniBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBootstrapData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.LastSelfNotarizedHeaders) > 0 {
		for iNdEx := len(m.LastSelfNotarizedHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastSelfNotarizedHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBootstrapData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.LastRound != 0 {
		i = encodeVarintBootstrapData(dAtA, i, uint64(m.LastRound))
		i--
		dAtA[i] = 0x30
	}
	if m.HighestFinalBlockNonce != 0 {
		i = encodeVarintBootstrapData(dAtA, i, uint64(m.HighestFinalBlockNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ProcessedMiniBlocks) > 0 {
		for iNdEx := len(m.ProcessedMiniBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProcessedMiniBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBootstrapData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LastCrossNotarizedHeaders) > 0 {
		for iNdEx := len(m.LastCrossNotarizedHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastCrossNotarizedHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBootstrapData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.LastHeader.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBootstrapData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RoundNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundNum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoundNum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintBootstrapData(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBootstrapData(dAtA []byte, offset int, v uint64) int {
	offset -= sovBootstrapData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MiniBlocksInMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetaHash)
	if l > 0 {
		n += 1 + l + sovBootstrapData(uint64(l))
	}
	if len(m.MiniBlocksHashes) > 0 {
		for _, b := range m.MiniBlocksHashes {
			l = len(b)
			n += 1 + l + sovBootstrapData(uint64(l))
		}
	}
	return n
}

func (m *BootstrapHeaderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardId != 0 {
		n += 1 + sovBootstrapData(uint64(m.ShardId))
	}
	if m.Nonce != 0 {
		n += 1 + sovBootstrapData(uint64(m.Nonce))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBootstrapData(uint64(l))
	}
	return n
}

func (m *PendingMiniBlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovBootstrapData(uint64(m.ShardID))
	}
	if m.NumPendingMiniBlocks != 0 {
		n += 1 + sovBootstrapData(uint64(m.NumPendingMiniBlocks))
	}
	return n
}

func (m *BootstrapData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LastHeader.Size()
	n += 1 + l + sovBootstrapData(uint64(l))
	if len(m.LastCrossNotarizedHeaders) > 0 {
		for _, e := range m.LastCrossNotarizedHeaders {
			l = e.Size()
			n += 1 + l + sovBootstrapData(uint64(l))
		}
	}
	if len(m.ProcessedMiniBlocks) > 0 {
		for _, e := range m.ProcessedMiniBlocks {
			l = e.Size()
			n += 1 + l + sovBootstrapData(uint64(l))
		}
	}
	if m.HighestFinalBlockNonce != 0 {
		n += 1 + sovBootstrapData(uint64(m.HighestFinalBlockNonce))
	}
	if m.LastRound != 0 {
		n += 1 + sovBootstrapData(uint64(m.LastRound))
	}
	if len(m.LastSelfNotarizedHeaders) > 0 {
		for _, e := range m.LastSelfNotarizedHeaders {
			l = e.Size()
			n += 1 + l + sovBootstrapData(uint64(l))
		}
	}
	if len(m.PendingMiniBlocks) > 0 {
		for _, e := range m.PendingMiniBlocks {
			l = e.Size()
			n += 1 + l + sovBootstrapData(uint64(l))
		}
	}
	return n
}

func (m *RoundNum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovBootstrapData(uint64(m.Num))
	}
	return n
}

func sovBootstrapData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBootstrapData(x uint64) (n int) {
	return sovBootstrapData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MiniBlocksInMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MiniBlocksInMeta{`,
		`MetaHash:` + fmt.Sprintf("%v", this.MetaHash) + `,`,
		`MiniBlocksHashes:` + fmt.Sprintf("%v", this.MiniBlocksHashes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BootstrapHeaderInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BootstrapHeaderInfo{`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingMiniBlockInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingMiniBlockInfo{`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`NumPendingMiniBlocks:` + fmt.Sprintf("%v", this.NumPendingMiniBlocks) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BootstrapData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLastCrossNotarizedHeaders := "[]BootstrapHeaderInfo{"
	for _, f := range this.LastCrossNotarizedHeaders {
		repeatedStringForLastCrossNotarizedHeaders += strings.Replace(strings.Replace(f.String(), "BootstrapHeaderInfo", "BootstrapHeaderInfo", 1), `&`, ``, 1) + ","
	}
	repeatedStringForLastCrossNotarizedHeaders += "}"
	repeatedStringForProcessedMiniBlocks := "[]MiniBlocksInMeta{"
	for _, f := range this.ProcessedMiniBlocks {
		repeatedStringForProcessedMiniBlocks += strings.Replace(strings.Replace(f.String(), "MiniBlocksInMeta", "MiniBlocksInMeta", 1), `&`, ``, 1) + ","
	}
	repeatedStringForProcessedMiniBlocks += "}"
	repeatedStringForLastSelfNotarizedHeaders := "[]BootstrapHeaderInfo{"
	for _, f := range this.LastSelfNotarizedHeaders {
		repeatedStringForLastSelfNotarizedHeaders += strings.Replace(strings.Replace(f.String(), "BootstrapHeaderInfo", "BootstrapHeaderInfo", 1), `&`, ``, 1) + ","
	}
	repeatedStringForLastSelfNotarizedHeaders += "}"
	repeatedStringForPendingMiniBlocks := "[]PendingMiniBlockInfo{"
	for _, f := range this.PendingMiniBlocks {
		repeatedStringForPendingMiniBlocks += strings.Replace(strings.Replace(f.String(), "PendingMiniBlockInfo", "PendingMiniBlockInfo", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPendingMiniBlocks += "}"
	s := strings.Join([]string{`&BootstrapData{`,
		`LastHeader:` + strings.Replace(strings.Replace(this.LastHeader.String(), "BootstrapHeaderInfo", "BootstrapHeaderInfo", 1), `&`, ``, 1) + `,`,
		`LastCrossNotarizedHeaders:` + repeatedStringForLastCrossNotarizedHeaders + `,`,
		`ProcessedMiniBlocks:` + repeatedStringForProcessedMiniBlocks + `,`,
		`HighestFinalBlockNonce:` + fmt.Sprintf("%v", this.HighestFinalBlockNonce) + `,`,
		`LastRound:` + fmt.Sprintf("%v", this.LastRound) + `,`,
		`LastSelfNotarizedHeaders:` + repeatedStringForLastSelfNotarizedHeaders + `,`,
		`PendingMiniBlocks:` + repeatedStringForPendingMiniBlocks + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoundNum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoundNum{`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBootstrapData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MiniBlocksInMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrapData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiniBlocksInMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiniBlocksInMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBootstrapData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaHash = append(m.MetaHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MetaHash == nil {
				m.MetaHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniBlocksHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBootstrapData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiniBlocksHashes = append(m.MiniBlocksHashes, make([]byte, postIndex-iNdEx))
			copy(m.MiniBlocksHashes[len(m.MiniBlocksHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrapData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapHeaderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrapData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapHeaderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapHeaderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBootstrapData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrapData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingMiniBlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrapData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingMiniBlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingMiniBlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPendingMiniBlocks", wireType)
			}
			m.NumPendingMiniBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPendingMiniBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrapData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrapData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrapData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCrossNotarizedHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrapData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastCrossNotarizedHeaders = append(m.LastCrossNotarizedHeaders, BootstrapHeaderInfo{})
			if err := m.LastCrossNotarizedHeaders[len(m.LastCrossNotarizedHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedMiniBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrapData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessedMiniBlocks = append(m.ProcessedMiniBlocks, MiniBlocksInMeta{})
			if err := m.ProcessedMiniBlocks[len(m.ProcessedMiniBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestFinalBlockNonce", wireType)
			}
			m.HighestFinalBlockNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestFinalBlockNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRound", wireType)
			}
			m.LastRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRound |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSelfNotarizedHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrapData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSelfNotarizedHeaders = append(m.LastSelfNotarizedHeaders, BootstrapHeaderInfo{})
			if err := m.LastSelfNotarizedHeaders[len(m.LastSelfNotarizedHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingMiniBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrapData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingMiniBlocks = append(m.PendingMiniBlocks, PendingMiniBlockInfo{})
			if err := m.PendingMiniBlocks[len(m.PendingMiniBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrapData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrapData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrapData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrapData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBootstrapData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBootstrapData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrapData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBootstrapData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBootstrapData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBootstrapData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBootstrapData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBootstrapData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBootstrapData = fmt.Errorf("proto: unexpected end of group")
)
