package schnorr_test

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/ElrondNetwork/elrond-go-sandbox/crypto/schnorr"
)

func logError(err error) {
	if err != nil {
		fmt.Println(err.Error())
	}
}

func TestGeneratePair(t *testing.T) {
	kg := schnorr.NewKeyGenerator()
	priv, pub := kg.GeneratePair()
	message := string("abcdefg")
	sig, err := priv.Sign([]byte(message))
	logError(err)
	ok, err := pub.Verify([]byte(message), sig)
	logError(err)
	assert.True(t, ok, "Message could not be verified with provided signature")
}

func TestPrivateKeyToByteArray(t *testing.T) {
	kg := schnorr.NewKeyGenerator()
	priv, pub := kg.GeneratePair()
	byteArrayPriv, err := priv.ToByteArray()
	logError(err)
	recreatedPrivateKey, err := kg.PrivateKeyFromByteArray(byteArrayPriv)
	logError(err)
	message := string("abcdefg")
	sig, err := recreatedPrivateKey.Sign([]byte(message))
	logError(err)
	ok, err := pub.Verify([]byte(message), sig)
	logError(err)
	assert.True(t, ok, "Message could not be verified with provided signature")
}

func TestPrivateKeyFromByteArray(t *testing.T) {
	kg := schnorr.NewKeyGenerator()
	message := string("abcdefg")
	sk, err := kg.PrivateKeyFromByteArray([]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32})
	logError(err)
	pub := sk.GeneratePublic()

	sig, err := sk.Sign([]byte(message))
	logError(err)
	ok, err := pub.Verify([]byte(message), sig)
	logError(err)
	assert.True(t, ok, "sig not correct")
}

func TestPrivateKeyFromNilByteArray(t *testing.T) {
	kg := schnorr.NewKeyGenerator()
	_, err := kg.PrivateKeyFromByteArray(nil)
	assert.NotNil(t, err, "should not be able to create private key from nil byte array")
}

func TestPublicKeyFromByteArray(t *testing.T) {
	kg := schnorr.NewKeyGenerator()
	message := string("abcdefg")
	priv, pub := kg.GeneratePair()
	byteArrayPublicKey, err := pub.ToByteArray()
	logError(err)
	recreatedPubKey, err := kg.PublicKeyFromByteArray(byteArrayPublicKey)
	logError(err)
	sig, err := priv.Sign([]byte(message))
	logError(err)
	ok, err := recreatedPubKey.Verify([]byte(message), sig)
	logError(err)
	assert.True(t, ok, "incorect build of public key from generated byte array")
}

func TestPublicKeyFromNilByteArray(t *testing.T) {
	kg := schnorr.NewKeyGenerator()
	_, err := kg.PublicKeyFromByteArray(nil)
	assert.NotNil(t, err, "should not be able to create public key from nil byte array")
}

func TestTamperedMessage(t *testing.T) {
	kg := schnorr.NewKeyGenerator()
	message := string("abcdefg")
	tamperedM := string("ijklmnop")
	priv, pub := kg.GeneratePair()

	// Generate correct signature
	sig, err := priv.Sign([]byte(message))
	logError(err)
	ok, err := pub.Verify([]byte(tamperedM), sig)
	logError(err)
	assert.False(t, ok, "could verify signature with tampered message")
}

func TestWrongPublicKey(t *testing.T) {
	kg := schnorr.NewKeyGenerator()
	message := string("abcdefg")
	priv, _ := kg.GeneratePair()
	_, pub2 := kg.GeneratePair()
	// Change pubkey
	sig, err := priv.Sign([]byte(message))
	logError(err)
	ok, err := pub2.Verify([]byte(message), sig)
	logError(err)
	assert.False(t, ok, "could verify signature with wrong public key")
}