// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heartbeat.proto

package heartbeat

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Heartbeat represents the heartbeat message that is sent between peers
type Heartbeat struct {
	Payload         []byte `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Pubkey          []byte `protobuf:"bytes,2,opt,name=Pubkey,proto3" json:"Pubkey,omitempty"`
	Signature       []byte `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
	ShardID         uint32 `protobuf:"varint,4,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	VersionNumber   string `protobuf:"bytes,5,opt,name=VersionNumber,proto3" json:"VersionNumber,omitempty"`
	NodeDisplayName string `protobuf:"bytes,6,opt,name=NodeDisplayName,proto3" json:"NodeDisplayName,omitempty"`
}

func (m *Heartbeat) Reset()      { *m = Heartbeat{} }
func (*Heartbeat) ProtoMessage() {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c667767fb9826a9, []int{0}
}
func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return m.Size()
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Heartbeat) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Heartbeat) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Heartbeat) GetShardID() uint32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *Heartbeat) GetVersionNumber() string {
	if m != nil {
		return m.VersionNumber
	}
	return ""
}

func (m *Heartbeat) GetNodeDisplayName() string {
	if m != nil {
		return m.NodeDisplayName
	}
	return ""
}

// HeartbeatDTO is the struct used for handling DB operations for heartbeatMessageInfo struct
type HeartbeatDTO struct {
	MaxDurationPeerUnresponsive *types.Duration  `protobuf:"bytes,1,opt,name=MaxDurationPeerUnresponsive,proto3" json:"MaxDurationPeerUnresponsive,omitempty"`
	MaxInactiveTime             *types.Duration  `protobuf:"bytes,2,opt,name=MaxInactiveTime,proto3" json:"MaxInactiveTime,omitempty"`
	TotalUpTime                 *types.Duration  `protobuf:"bytes,3,opt,name=TotalUpTime,proto3" json:"TotalUpTime,omitempty"`
	TotalDownTime               *types.Duration  `protobuf:"bytes,4,opt,name=TotalDownTime,proto3" json:"TotalDownTime,omitempty"`
	TimeStamp                   *types.Timestamp `protobuf:"bytes,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	IsActive                    bool             `protobuf:"varint,6,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	ReceivedShardID             uint32           `protobuf:"varint,7,opt,name=ReceivedShardID,proto3" json:"ReceivedShardID,omitempty"`
	ComputedShardID             uint32           `protobuf:"varint,8,opt,name=ComputedShardID,proto3" json:"ComputedShardID,omitempty"`
	VersionNumber               string           `protobuf:"bytes,9,opt,name=VersionNumber,proto3" json:"VersionNumber,omitempty"`
	NodeDisplayName             string           `protobuf:"bytes,10,opt,name=NodeDisplayName,proto3" json:"NodeDisplayName,omitempty"`
	PeerType                    string           `protobuf:"bytes,11,opt,name=PeerType,proto3" json:"PeerType,omitempty"`
	IsValidator                 bool             `protobuf:"varint,12,opt,name=IsValidator,proto3" json:"IsValidator,omitempty"`
	LastUptimeDowntime          *types.Timestamp `protobuf:"bytes,13,opt,name=LastUptimeDowntime,proto3" json:"LastUptimeDowntime,omitempty"`
	GenesisTime                 *types.Timestamp `protobuf:"bytes,14,opt,name=GenesisTime,proto3" json:"GenesisTime,omitempty"`
}

func (m *HeartbeatDTO) Reset()      { *m = HeartbeatDTO{} }
func (*HeartbeatDTO) ProtoMessage() {}
func (*HeartbeatDTO) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c667767fb9826a9, []int{1}
}
func (m *HeartbeatDTO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatDTO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatDTO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatDTO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatDTO.Merge(m, src)
}
func (m *HeartbeatDTO) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatDTO) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatDTO.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatDTO proto.InternalMessageInfo

func (m *HeartbeatDTO) GetMaxDurationPeerUnresponsive() *types.Duration {
	if m != nil {
		return m.MaxDurationPeerUnresponsive
	}
	return nil
}

func (m *HeartbeatDTO) GetMaxInactiveTime() *types.Duration {
	if m != nil {
		return m.MaxInactiveTime
	}
	return nil
}

func (m *HeartbeatDTO) GetTotalUpTime() *types.Duration {
	if m != nil {
		return m.TotalUpTime
	}
	return nil
}

func (m *HeartbeatDTO) GetTotalDownTime() *types.Duration {
	if m != nil {
		return m.TotalDownTime
	}
	return nil
}

func (m *HeartbeatDTO) GetTimeStamp() *types.Timestamp {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

func (m *HeartbeatDTO) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *HeartbeatDTO) GetReceivedShardID() uint32 {
	if m != nil {
		return m.ReceivedShardID
	}
	return 0
}

func (m *HeartbeatDTO) GetComputedShardID() uint32 {
	if m != nil {
		return m.ComputedShardID
	}
	return 0
}

func (m *HeartbeatDTO) GetVersionNumber() string {
	if m != nil {
		return m.VersionNumber
	}
	return ""
}

func (m *HeartbeatDTO) GetNodeDisplayName() string {
	if m != nil {
		return m.NodeDisplayName
	}
	return ""
}

func (m *HeartbeatDTO) GetPeerType() string {
	if m != nil {
		return m.PeerType
	}
	return ""
}

func (m *HeartbeatDTO) GetIsValidator() bool {
	if m != nil {
		return m.IsValidator
	}
	return false
}

func (m *HeartbeatDTO) GetLastUptimeDowntime() *types.Timestamp {
	if m != nil {
		return m.LastUptimeDowntime
	}
	return nil
}

func (m *HeartbeatDTO) GetGenesisTime() *types.Timestamp {
	if m != nil {
		return m.GenesisTime
	}
	return nil
}

type DbTimeStamp struct {
	TS *types.Timestamp `protobuf:"bytes,1,opt,name=TS,proto3" json:"TS,omitempty"`
}

func (m *DbTimeStamp) Reset()      { *m = DbTimeStamp{} }
func (*DbTimeStamp) ProtoMessage() {}
func (*DbTimeStamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c667767fb9826a9, []int{2}
}
func (m *DbTimeStamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DbTimeStamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DbTimeStamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DbTimeStamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbTimeStamp.Merge(m, src)
}
func (m *DbTimeStamp) XXX_Size() int {
	return m.Size()
}
func (m *DbTimeStamp) XXX_DiscardUnknown() {
	xxx_messageInfo_DbTimeStamp.DiscardUnknown(m)
}

var xxx_messageInfo_DbTimeStamp proto.InternalMessageInfo

func (m *DbTimeStamp) GetTS() *types.Timestamp {
	if m != nil {
		return m.TS
	}
	return nil
}

func init() {
	proto.RegisterType((*Heartbeat)(nil), "proto.Heartbeat")
	proto.RegisterType((*HeartbeatDTO)(nil), "proto.HeartbeatDTO")
	proto.RegisterType((*DbTimeStamp)(nil), "proto.DbTimeStamp")
}

func init() { proto.RegisterFile("heartbeat.proto", fileDescriptor_3c667767fb9826a9) }

var fileDescriptor_3c667767fb9826a9 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x8f, 0xd2, 0x40,
	0x14, 0xee, 0xec, 0x4f, 0x3a, 0x05, 0x49, 0xe6, 0x60, 0x2a, 0x9a, 0x91, 0x10, 0x0f, 0xc4, 0x03,
	0x9b, 0xac, 0x17, 0x8d, 0x26, 0x1b, 0xdd, 0x26, 0x8a, 0x71, 0x91, 0x94, 0xb2, 0x07, 0x3d, 0x4d,
	0xb7, 0x4f, 0x76, 0x22, 0xed, 0x34, 0xed, 0x14, 0x97, 0x9b, 0x7f, 0x82, 0x7f, 0x86, 0xff, 0x88,
	0x89, 0x47, 0x8e, 0x7b, 0x94, 0x72, 0xf1, 0xc8, 0x9f, 0x60, 0x3a, 0x50, 0x60, 0xd9, 0x0d, 0x78,
	0x9a, 0x7c, 0xef, 0x7d, 0xdf, 0x17, 0xde, 0xfb, 0x1e, 0xc5, 0xe5, 0x4b, 0x60, 0x91, 0x74, 0x81,
	0xc9, 0x46, 0x18, 0x09, 0x29, 0xc8, 0xbe, 0x7a, 0x2a, 0x8f, 0x7b, 0x42, 0xf4, 0xfa, 0x70, 0xa4,
	0x90, 0x9b, 0x7c, 0x39, 0x92, 0xdc, 0x87, 0x58, 0x32, 0x3f, 0x9c, 0xf1, 0x2a, 0x74, 0x9d, 0xe0,
	0x25, 0x11, 0x93, 0x5c, 0x04, 0xb3, 0x7e, 0xed, 0x17, 0xc2, 0xfa, 0xbb, 0xdc, 0x9b, 0x98, 0xf8,
	0xb0, 0xcd, 0x86, 0x7d, 0xc1, 0x3c, 0x13, 0x55, 0x51, 0xbd, 0x68, 0xe7, 0x90, 0xdc, 0xc7, 0x07,
	0xed, 0xc4, 0xfd, 0x0a, 0x43, 0x73, 0x47, 0x35, 0xe6, 0x88, 0x3c, 0xc2, 0x7a, 0x87, 0xf7, 0x02,
	0x26, 0x93, 0x08, 0xcc, 0x5d, 0xd5, 0x5a, 0x16, 0x32, 0xbf, 0xce, 0x25, 0x8b, 0xbc, 0xa6, 0x65,
	0xee, 0x55, 0x51, 0xbd, 0x64, 0xe7, 0x90, 0x3c, 0xc1, 0xa5, 0x73, 0x88, 0x62, 0x2e, 0x82, 0x56,
	0xe2, 0xbb, 0x10, 0x99, 0xfb, 0x55, 0x54, 0xd7, 0xed, 0x9b, 0x45, 0x52, 0xc7, 0xe5, 0x96, 0xf0,
	0xc0, 0xe2, 0x71, 0xd8, 0x67, 0xc3, 0x16, 0xf3, 0xc1, 0x3c, 0x50, 0xbc, 0xf5, 0x72, 0x6d, 0xba,
	0x8f, 0x8b, 0x8b, 0x39, 0x2c, 0xe7, 0x23, 0xf9, 0x8c, 0x1f, 0x9e, 0xb1, 0x2b, 0x6b, 0x3e, 0x6d,
	0x1b, 0x20, 0xea, 0x06, 0x11, 0xc4, 0xa1, 0x08, 0x62, 0x3e, 0x00, 0x35, 0x9e, 0x71, 0xfc, 0xa0,
	0x31, 0x5b, 0x4f, 0x23, 0x5f, 0x4f, 0x23, 0x17, 0xd8, 0x9b, 0xd4, 0xe4, 0x14, 0x97, 0xcf, 0xd8,
	0x55, 0x33, 0x60, 0x17, 0x92, 0x0f, 0xc0, 0xe1, 0x3e, 0xa8, 0xb5, 0x6c, 0x34, 0x5c, 0x57, 0x90,
	0x97, 0xd8, 0x70, 0x84, 0x64, 0xfd, 0x6e, 0xa8, 0x0c, 0x76, 0xb7, 0x19, 0xac, 0xb2, 0xc9, 0x09,
	0x2e, 0x29, 0x68, 0x89, 0x6f, 0x81, 0x92, 0xef, 0x6d, 0x93, 0xdf, 0xe4, 0x93, 0xe7, 0x58, 0xcf,
	0xde, 0x4e, 0x76, 0x2b, 0x6a, 0xf9, 0xc6, 0x71, 0xe5, 0x96, 0xd8, 0xc9, 0xaf, 0xc9, 0x5e, 0x92,
	0x49, 0x05, 0x17, 0x9a, 0xf1, 0x6b, 0x35, 0x87, 0x4a, 0xa3, 0x60, 0x2f, 0x70, 0x16, 0x98, 0x0d,
	0x17, 0xc0, 0x07, 0xe0, 0xe5, 0xc1, 0x1f, 0xaa, 0xe0, 0xd7, 0xcb, 0x19, 0xf3, 0x54, 0xf8, 0x61,
	0x22, 0x97, 0xcc, 0xc2, 0x8c, 0xb9, 0x56, 0xbe, 0x7d, 0x2a, 0xfa, 0x7f, 0x9e, 0x0a, 0xbe, 0xf3,
	0x54, 0xb2, 0xdf, 0x9f, 0x05, 0xea, 0x0c, 0x43, 0x30, 0x0d, 0x45, 0x59, 0x60, 0x52, 0xc5, 0x46,
	0x33, 0x3e, 0x67, 0x7d, 0xee, 0x31, 0x29, 0x22, 0xb3, 0xa8, 0xc6, 0x5b, 0x2d, 0x91, 0xf7, 0x98,
	0x7c, 0x60, 0xb1, 0xec, 0x86, 0xd9, 0x3f, 0x2d, 0xdb, 0x66, 0xf6, 0x9a, 0xa5, 0xad, 0x0b, 0xbc,
	0x43, 0x45, 0x5e, 0x61, 0xe3, 0x2d, 0x04, 0x10, 0xf3, 0x58, 0x45, 0x78, 0x6f, 0xab, 0xc9, 0x2a,
	0xbd, 0xf6, 0x02, 0x1b, 0x96, 0xbb, 0x8c, 0xe5, 0x29, 0xde, 0x71, 0x3a, 0xf3, 0xbb, 0xde, 0xe4,
	0xb1, 0xe3, 0x74, 0xde, 0x9c, 0x8c, 0xc6, 0x54, 0xbb, 0x1e, 0x53, 0x6d, 0x3a, 0xa6, 0xe8, 0x7b,
	0x4a, 0xd1, 0xcf, 0x94, 0xa2, 0xdf, 0x29, 0x45, 0xa3, 0x94, 0xa2, 0x3f, 0x29, 0x45, 0x7f, 0x53,
	0xaa, 0x4d, 0x53, 0x8a, 0x7e, 0x4c, 0xa8, 0x36, 0x9a, 0x50, 0xed, 0x7a, 0x42, 0xb5, 0x4f, 0xfa,
	0xe2, 0x23, 0xe4, 0x1e, 0x28, 0xe3, 0x67, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x32, 0xbe, 0x6a,
	0x48, 0x98, 0x04, 0x00, 0x00,
}

func (this *Heartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Heartbeat)
	if !ok {
		that2, ok := that.(Heartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !bytes.Equal(this.Pubkey, that1.Pubkey) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if this.ShardID != that1.ShardID {
		return false
	}
	if this.VersionNumber != that1.VersionNumber {
		return false
	}
	if this.NodeDisplayName != that1.NodeDisplayName {
		return false
	}
	return true
}
func (this *HeartbeatDTO) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeartbeatDTO)
	if !ok {
		that2, ok := that.(HeartbeatDTO)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxDurationPeerUnresponsive.Equal(that1.MaxDurationPeerUnresponsive) {
		return false
	}
	if !this.MaxInactiveTime.Equal(that1.MaxInactiveTime) {
		return false
	}
	if !this.TotalUpTime.Equal(that1.TotalUpTime) {
		return false
	}
	if !this.TotalDownTime.Equal(that1.TotalDownTime) {
		return false
	}
	if !this.TimeStamp.Equal(that1.TimeStamp) {
		return false
	}
	if this.IsActive != that1.IsActive {
		return false
	}
	if this.ReceivedShardID != that1.ReceivedShardID {
		return false
	}
	if this.ComputedShardID != that1.ComputedShardID {
		return false
	}
	if this.VersionNumber != that1.VersionNumber {
		return false
	}
	if this.NodeDisplayName != that1.NodeDisplayName {
		return false
	}
	if this.PeerType != that1.PeerType {
		return false
	}
	if this.IsValidator != that1.IsValidator {
		return false
	}
	if !this.LastUptimeDowntime.Equal(that1.LastUptimeDowntime) {
		return false
	}
	if !this.GenesisTime.Equal(that1.GenesisTime) {
		return false
	}
	return true
}
func (this *DbTimeStamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DbTimeStamp)
	if !ok {
		that2, ok := that.(DbTimeStamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TS.Equal(that1.TS) {
		return false
	}
	return true
}
func (this *Heartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&heartbeat.Heartbeat{")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "Pubkey: "+fmt.Sprintf("%#v", this.Pubkey)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "ShardID: "+fmt.Sprintf("%#v", this.ShardID)+",\n")
	s = append(s, "VersionNumber: "+fmt.Sprintf("%#v", this.VersionNumber)+",\n")
	s = append(s, "NodeDisplayName: "+fmt.Sprintf("%#v", this.NodeDisplayName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeartbeatDTO) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&heartbeat.HeartbeatDTO{")
	if this.MaxDurationPeerUnresponsive != nil {
		s = append(s, "MaxDurationPeerUnresponsive: "+fmt.Sprintf("%#v", this.MaxDurationPeerUnresponsive)+",\n")
	}
	if this.MaxInactiveTime != nil {
		s = append(s, "MaxInactiveTime: "+fmt.Sprintf("%#v", this.MaxInactiveTime)+",\n")
	}
	if this.TotalUpTime != nil {
		s = append(s, "TotalUpTime: "+fmt.Sprintf("%#v", this.TotalUpTime)+",\n")
	}
	if this.TotalDownTime != nil {
		s = append(s, "TotalDownTime: "+fmt.Sprintf("%#v", this.TotalDownTime)+",\n")
	}
	if this.TimeStamp != nil {
		s = append(s, "TimeStamp: "+fmt.Sprintf("%#v", this.TimeStamp)+",\n")
	}
	s = append(s, "IsActive: "+fmt.Sprintf("%#v", this.IsActive)+",\n")
	s = append(s, "ReceivedShardID: "+fmt.Sprintf("%#v", this.ReceivedShardID)+",\n")
	s = append(s, "ComputedShardID: "+fmt.Sprintf("%#v", this.ComputedShardID)+",\n")
	s = append(s, "VersionNumber: "+fmt.Sprintf("%#v", this.VersionNumber)+",\n")
	s = append(s, "NodeDisplayName: "+fmt.Sprintf("%#v", this.NodeDisplayName)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "IsValidator: "+fmt.Sprintf("%#v", this.IsValidator)+",\n")
	if this.LastUptimeDowntime != nil {
		s = append(s, "LastUptimeDowntime: "+fmt.Sprintf("%#v", this.LastUptimeDowntime)+",\n")
	}
	if this.GenesisTime != nil {
		s = append(s, "GenesisTime: "+fmt.Sprintf("%#v", this.GenesisTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DbTimeStamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&heartbeat.DbTimeStamp{")
	if this.TS != nil {
		s = append(s, "TS: "+fmt.Sprintf("%#v", this.TS)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHeartbeat(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Heartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Heartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeDisplayName) > 0 {
		i -= len(m.NodeDisplayName)
		copy(dAtA[i:], m.NodeDisplayName)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.NodeDisplayName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.VersionNumber) > 0 {
		i -= len(m.VersionNumber)
		copy(dAtA[i:], m.VersionNumber)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.VersionNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ShardID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ShardID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeartbeatDTO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatDTO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatDTO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GenesisTime != nil {
		{
			size, err := m.GenesisTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.LastUptimeDowntime != nil {
		{
			size, err := m.LastUptimeDowntime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.IsValidator {
		i--
		if m.IsValidator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.PeerType) > 0 {
		i -= len(m.PeerType)
		copy(dAtA[i:], m.PeerType)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.PeerType)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NodeDisplayName) > 0 {
		i -= len(m.NodeDisplayName)
		copy(dAtA[i:], m.NodeDisplayName)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.NodeDisplayName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.VersionNumber) > 0 {
		i -= len(m.VersionNumber)
		copy(dAtA[i:], m.VersionNumber)
		i = encodeVarintHeartbeat(dAtA, i, uint64(len(m.VersionNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ComputedShardID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ComputedShardID))
		i--
		dAtA[i] = 0x40
	}
	if m.ReceivedShardID != 0 {
		i = encodeVarintHeartbeat(dAtA, i, uint64(m.ReceivedShardID))
		i--
		dAtA[i] = 0x38
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.TimeStamp != nil {
		{
			size, err := m.TimeStamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TotalDownTime != nil {
		{
			size, err := m.TotalDownTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TotalUpTime != nil {
		{
			size, err := m.TotalUpTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxInactiveTime != nil {
		{
			size, err := m.MaxInactiveTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MaxDurationPeerUnresponsive != nil {
		{
			size, err := m.MaxDurationPeerUnresponsive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DbTimeStamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DbTimeStamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DbTimeStamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TS != nil {
		{
			size, err := m.TS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHeartbeat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHeartbeat(dAtA []byte, offset int, v uint64) int {
	offset -= sovHeartbeat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovHeartbeat(uint64(m.ShardID))
	}
	l = len(m.VersionNumber)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.NodeDisplayName)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *HeartbeatDTO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxDurationPeerUnresponsive != nil {
		l = m.MaxDurationPeerUnresponsive.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.MaxInactiveTime != nil {
		l = m.MaxInactiveTime.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.TotalUpTime != nil {
		l = m.TotalUpTime.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.TotalDownTime != nil {
		l = m.TotalDownTime.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.TimeStamp != nil {
		l = m.TimeStamp.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.ReceivedShardID != 0 {
		n += 1 + sovHeartbeat(uint64(m.ReceivedShardID))
	}
	if m.ComputedShardID != 0 {
		n += 1 + sovHeartbeat(uint64(m.ComputedShardID))
	}
	l = len(m.VersionNumber)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.NodeDisplayName)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	l = len(m.PeerType)
	if l > 0 {
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.IsValidator {
		n += 2
	}
	if m.LastUptimeDowntime != nil {
		l = m.LastUptimeDowntime.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	if m.GenesisTime != nil {
		l = m.GenesisTime.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *DbTimeStamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TS != nil {
		l = m.TS.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func sovHeartbeat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHeartbeat(x uint64) (n int) {
	return sovHeartbeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Heartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Heartbeat{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Pubkey:` + fmt.Sprintf("%v", this.Pubkey) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`ShardID:` + fmt.Sprintf("%v", this.ShardID) + `,`,
		`VersionNumber:` + fmt.Sprintf("%v", this.VersionNumber) + `,`,
		`NodeDisplayName:` + fmt.Sprintf("%v", this.NodeDisplayName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartbeatDTO) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartbeatDTO{`,
		`MaxDurationPeerUnresponsive:` + strings.Replace(fmt.Sprintf("%v", this.MaxDurationPeerUnresponsive), "Duration", "types.Duration", 1) + `,`,
		`MaxInactiveTime:` + strings.Replace(fmt.Sprintf("%v", this.MaxInactiveTime), "Duration", "types.Duration", 1) + `,`,
		`TotalUpTime:` + strings.Replace(fmt.Sprintf("%v", this.TotalUpTime), "Duration", "types.Duration", 1) + `,`,
		`TotalDownTime:` + strings.Replace(fmt.Sprintf("%v", this.TotalDownTime), "Duration", "types.Duration", 1) + `,`,
		`TimeStamp:` + strings.Replace(fmt.Sprintf("%v", this.TimeStamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`IsActive:` + fmt.Sprintf("%v", this.IsActive) + `,`,
		`ReceivedShardID:` + fmt.Sprintf("%v", this.ReceivedShardID) + `,`,
		`ComputedShardID:` + fmt.Sprintf("%v", this.ComputedShardID) + `,`,
		`VersionNumber:` + fmt.Sprintf("%v", this.VersionNumber) + `,`,
		`NodeDisplayName:` + fmt.Sprintf("%v", this.NodeDisplayName) + `,`,
		`PeerType:` + fmt.Sprintf("%v", this.PeerType) + `,`,
		`IsValidator:` + fmt.Sprintf("%v", this.IsValidator) + `,`,
		`LastUptimeDowntime:` + strings.Replace(fmt.Sprintf("%v", this.LastUptimeDowntime), "Timestamp", "types.Timestamp", 1) + `,`,
		`GenesisTime:` + strings.Replace(fmt.Sprintf("%v", this.GenesisTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DbTimeStamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DbTimeStamp{`,
		`TS:` + strings.Replace(fmt.Sprintf("%v", this.TS), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHeartbeat(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Heartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeDisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatDTO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatDTO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatDTO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDurationPeerUnresponsive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxDurationPeerUnresponsive == nil {
				m.MaxDurationPeerUnresponsive = &types.Duration{}
			}
			if err := m.MaxDurationPeerUnresponsive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInactiveTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxInactiveTime == nil {
				m.MaxInactiveTime = &types.Duration{}
			}
			if err := m.MaxInactiveTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUpTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalUpTime == nil {
				m.TotalUpTime = &types.Duration{}
			}
			if err := m.TotalUpTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDownTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalDownTime == nil {
				m.TotalDownTime = &types.Duration{}
			}
			if err := m.TotalDownTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStamp == nil {
				m.TimeStamp = &types.Timestamp{}
			}
			if err := m.TimeStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedShardID", wireType)
			}
			m.ReceivedShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputedShardID", wireType)
			}
			m.ComputedShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputedShardID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeDisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValidator = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUptimeDowntime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUptimeDowntime == nil {
				m.LastUptimeDowntime = &types.Timestamp{}
			}
			if err := m.LastUptimeDowntime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenesisTime == nil {
				m.GenesisTime = &types.Timestamp{}
			}
			if err := m.GenesisTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DbTimeStamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DbTimeStamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DbTimeStamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TS == nil {
				m.TS = &types.Timestamp{}
			}
			if err := m.TS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeartbeat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHeartbeat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHeartbeat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHeartbeat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHeartbeat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeartbeat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHeartbeat = fmt.Errorf("proto: unexpected end of group")
)
