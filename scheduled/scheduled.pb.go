// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scheduled.proto

package scheduled

import (
	bytes "bytes"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_data "github.com/ElrondNetwork/elrond-go/data"
	github_com_ElrondNetwork_elrond_vm_common "github.com/ElrondNetwork/elrond-vm-common"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SmartContractResult struct {
	Nonce          uint64                                             `protobuf:"varint,1,opt,name=Nonce,proto3" json:"nonce"`
	Value          *math_big.Int                                      `protobuf:"bytes,2,opt,name=Value,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"value"`
	RcvAddr        []byte                                             `protobuf:"bytes,3,opt,name=RcvAddr,proto3" json:"receiver"`
	SndAddr        []byte                                             `protobuf:"bytes,4,opt,name=SndAddr,proto3" json:"sender"`
	RelayerAddr    []byte                                             `protobuf:"bytes,5,opt,name=RelayerAddr,proto3" json:"relayer"`
	RelayedValue   *math_big.Int                                      `protobuf:"bytes,6,opt,name=RelayedValue,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go/data.BigIntCaster" json:"relayedValue"`
	Code           []byte                                             `protobuf:"bytes,7,opt,name=Code,proto3" json:"code,omitempty"`
	Data           []byte                                             `protobuf:"bytes,8,opt,name=Data,proto3" json:"data,omitempty"`
	PrevTxHash     []byte                                             `protobuf:"bytes,9,opt,name=PrevTxHash,proto3" json:"prevTxHash"`
	OriginalTxHash []byte                                             `protobuf:"bytes,10,opt,name=OriginalTxHash,proto3" json:"originalTxHash"`
	GasLimit       uint64                                             `protobuf:"varint,11,opt,name=GasLimit,proto3" json:"gasLimit"`
	GasPrice       uint64                                             `protobuf:"varint,12,opt,name=GasPrice,proto3" json:"gasPrice"`
	CallType       github_com_ElrondNetwork_elrond_vm_common.CallType `protobuf:"varint,13,opt,name=CallType,proto3,casttype=github.com/ElrondNetwork/elrond-vm-common.CallType" json:"callType"`
	CodeMetadata   []byte                                             `protobuf:"bytes,14,opt,name=CodeMetadata,proto3" json:"codeMetadata,omitempty"`
	ReturnMessage  []byte                                             `protobuf:"bytes,15,opt,name=ReturnMessage,proto3" json:"returnMessage,omitempty"`
	OriginalSender []byte                                             `protobuf:"bytes,16,opt,name=OriginalSender,proto3" json:"originalSender,omitempty"`
}

func (m *SmartContractResult) Reset()      { *m = SmartContractResult{} }
func (*SmartContractResult) ProtoMessage() {}
func (*SmartContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80076f37bd30c16, []int{0}
}
func (m *SmartContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmartContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SmartContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartContractResult.Merge(m, src)
}
func (m *SmartContractResult) XXX_Size() int {
	return m.Size()
}
func (m *SmartContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_SmartContractResult proto.InternalMessageInfo

func (m *SmartContractResult) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SmartContractResult) GetValue() *math_big.Int {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SmartContractResult) GetRcvAddr() []byte {
	if m != nil {
		return m.RcvAddr
	}
	return nil
}

func (m *SmartContractResult) GetSndAddr() []byte {
	if m != nil {
		return m.SndAddr
	}
	return nil
}

func (m *SmartContractResult) GetRelayerAddr() []byte {
	if m != nil {
		return m.RelayerAddr
	}
	return nil
}

func (m *SmartContractResult) GetRelayedValue() *math_big.Int {
	if m != nil {
		return m.RelayedValue
	}
	return nil
}

func (m *SmartContractResult) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *SmartContractResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SmartContractResult) GetPrevTxHash() []byte {
	if m != nil {
		return m.PrevTxHash
	}
	return nil
}

func (m *SmartContractResult) GetOriginalTxHash() []byte {
	if m != nil {
		return m.OriginalTxHash
	}
	return nil
}

func (m *SmartContractResult) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *SmartContractResult) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *SmartContractResult) GetCallType() github_com_ElrondNetwork_elrond_vm_common.CallType {
	if m != nil {
		return m.CallType
	}
	return 0
}

func (m *SmartContractResult) GetCodeMetadata() []byte {
	if m != nil {
		return m.CodeMetadata
	}
	return nil
}

func (m *SmartContractResult) GetReturnMessage() []byte {
	if m != nil {
		return m.ReturnMessage
	}
	return nil
}

func (m *SmartContractResult) GetOriginalSender() []byte {
	if m != nil {
		return m.OriginalSender
	}
	return nil
}

// ScheduledSCRs holds information about scheduled SCRs per block type
type ScheduledSCRs struct {
	BlockType  int32                 `protobuf:"varint,1,opt,name=BlockType,proto3" json:"BlockType,omitempty"`
	TxHandlers []SmartContractResult `protobuf:"bytes,2,rep,name=TxHandlers,proto3" json:"TxHandlers"`
}

func (m *ScheduledSCRs) Reset()      { *m = ScheduledSCRs{} }
func (*ScheduledSCRs) ProtoMessage() {}
func (*ScheduledSCRs) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80076f37bd30c16, []int{1}
}
func (m *ScheduledSCRs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledSCRs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScheduledSCRs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledSCRs.Merge(m, src)
}
func (m *ScheduledSCRs) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledSCRs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledSCRs.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledSCRs proto.InternalMessageInfo

func (m *ScheduledSCRs) GetBlockType() int32 {
	if m != nil {
		return m.BlockType
	}
	return 0
}

func (m *ScheduledSCRs) GetTxHandlers() []SmartContractResult {
	if m != nil {
		return m.TxHandlers
	}
	return nil
}

func init() {
	proto.RegisterType((*SmartContractResult)(nil), "proto.SmartContractResult")
	proto.RegisterType((*ScheduledSCRs)(nil), "proto.ScheduledSCRs")
}

func init() { proto.RegisterFile("scheduled.proto", fileDescriptor_f80076f37bd30c16) }

var fileDescriptor_f80076f37bd30c16 = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x31, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0xe3, 0x36, 0x69, 0x92, 0x4b, 0x9a, 0xfe, 0x75, 0x7f, 0x09, 0x4e, 0xa5, 0xba, 0x8b,
	0x2a, 0x54, 0x65, 0x20, 0x89, 0x54, 0x36, 0x90, 0x10, 0x75, 0x8a, 0xa0, 0x12, 0x2d, 0xd5, 0xa5,
	0x30, 0x30, 0x20, 0x5d, 0xec, 0xc3, 0xb1, 0x6a, 0xfb, 0xa2, 0xf3, 0x25, 0x90, 0x8d, 0x8f, 0xc0,
	0xc7, 0x40, 0x7c, 0x92, 0x2e, 0x48, 0x1d, 0x3b, 0x19, 0xea, 0x2e, 0xc8, 0x53, 0x67, 0x26, 0xe4,
	0x73, 0x9a, 0x38, 0x15, 0x12, 0x0b, 0x53, 0x72, 0xcf, 0xf3, 0x7b, 0x9f, 0x37, 0xf7, 0xda, 0x79,
	0xc1, 0x46, 0x68, 0x0d, 0xb9, 0x3d, 0xf6, 0xb8, 0xdd, 0x19, 0x49, 0xa1, 0x04, 0x2c, 0xe9, 0x8f,
	0xcd, 0xb6, 0xe3, 0xaa, 0xe1, 0x78, 0xd0, 0xb1, 0x84, 0xdf, 0x75, 0x84, 0x23, 0xba, 0x5a, 0x1e,
	0x8c, 0xdf, 0xeb, 0x93, 0x3e, 0xe8, 0x6f, 0x59, 0xd5, 0xf6, 0xb7, 0x32, 0xf8, 0xbf, 0xef, 0x33,
	0xa9, 0x7a, 0x22, 0x50, 0x92, 0x59, 0x8a, 0xf2, 0x70, 0xec, 0x29, 0x48, 0x40, 0xe9, 0x48, 0x04,
	0x16, 0x47, 0x46, 0xd3, 0x68, 0x15, 0xcd, 0x6a, 0x12, 0x91, 0x52, 0x90, 0x0a, 0x34, 0xd3, 0xa1,
	0x0d, 0x4a, 0x6f, 0x98, 0x37, 0xe6, 0x68, 0xa5, 0x69, 0xb4, 0xea, 0xe6, 0x51, 0x0a, 0x4c, 0x52,
	0xe1, 0xeb, 0x77, 0xb2, 0xe7, 0x33, 0x35, 0xec, 0x0e, 0x5c, 0xa7, 0x73, 0x10, 0xa8, 0xc7, 0xb9,
	0x1f, 0xf4, 0xcc, 0x93, 0x22, 0xb0, 0x8f, 0xb8, 0xfa, 0x20, 0xe4, 0x69, 0x97, 0xeb, 0x53, 0xdb,
	0x11, 0x5d, 0x9b, 0x29, 0xd6, 0x31, 0x5d, 0xe7, 0x20, 0x50, 0x3d, 0x16, 0x2a, 0x2e, 0x69, 0x16,
	0x0e, 0x77, 0x40, 0x99, 0x5a, 0x93, 0x3d, 0xdb, 0x96, 0x68, 0x55, 0xf7, 0xa9, 0x27, 0x11, 0xa9,
	0x48, 0x6e, 0x71, 0x77, 0xc2, 0x25, 0xbd, 0x31, 0xe1, 0x7d, 0x50, 0xee, 0x07, 0xb6, 0xe6, 0x8a,
	0x9a, 0x03, 0x49, 0x44, 0xd6, 0x42, 0x1e, 0xd8, 0x29, 0x35, 0xb3, 0x60, 0x1b, 0xd4, 0x28, 0xf7,
	0xd8, 0x94, 0x4b, 0x4d, 0x96, 0x34, 0x59, 0x4b, 0x22, 0x52, 0x96, 0x99, 0x4c, 0xf3, 0x3e, 0x9c,
	0x82, 0x7a, 0x76, 0xb4, 0xb3, 0x9b, 0xae, 0x69, 0xfe, 0x75, 0x12, 0x91, 0xba, 0xcc, 0xe9, 0xff,
	0xe6, 0xc2, 0x4b, 0xad, 0xe0, 0x0e, 0x28, 0xf6, 0x84, 0xcd, 0x51, 0x59, 0xb7, 0x84, 0x49, 0x44,
	0x1a, 0x96, 0xb0, 0xf9, 0x03, 0xe1, 0xbb, 0x8a, 0xfb, 0x23, 0x35, 0xa5, 0xda, 0x4f, 0xb9, 0x7d,
	0xa6, 0x18, 0xaa, 0x2c, 0xb8, 0x34, 0x3a, 0xcf, 0xa5, 0x3e, 0xec, 0x00, 0x70, 0x2c, 0xf9, 0xe4,
	0xe4, 0xe3, 0x0b, 0x16, 0x0e, 0x51, 0x55, 0xd3, 0x8d, 0x24, 0x22, 0x60, 0x34, 0x57, 0x69, 0x8e,
	0x80, 0x8f, 0x40, 0xe3, 0x95, 0x74, 0x1d, 0x37, 0x60, 0xde, 0xac, 0x06, 0x2c, 0x3a, 0x88, 0x25,
	0x87, 0xde, 0x22, 0x61, 0x0b, 0x54, 0x9e, 0xb3, 0xf0, 0xa5, 0xeb, 0xbb, 0x0a, 0xd5, 0xf4, 0xdb,
	0xa3, 0x1f, 0x9a, 0x33, 0xd3, 0xe8, 0xdc, 0x9d, 0x91, 0xc7, 0xd2, 0xb5, 0x38, 0xaa, 0x2f, 0x91,
	0x5a, 0xa3, 0x73, 0x17, 0xbe, 0x03, 0x95, 0x1e, 0xf3, 0xbc, 0x93, 0xe9, 0x88, 0xa3, 0xf5, 0xa6,
	0xd1, 0x5a, 0x35, 0xcd, 0x94, 0xb4, 0x66, 0xda, 0xaf, 0x88, 0xec, 0xfe, 0x6d, 0xea, 0x13, 0xbf,
	0x6d, 0x09, 0xdf, 0x17, 0x41, 0xe7, 0x26, 0x89, 0xce, 0x33, 0xe1, 0x13, 0x50, 0x4f, 0xe7, 0x79,
	0xc8, 0x15, 0x4b, 0xe7, 0x87, 0x1a, 0xfa, 0xb6, 0x9b, 0x49, 0x44, 0xee, 0x58, 0x39, 0x3d, 0x37,
	0xd7, 0x25, 0x1e, 0xee, 0x81, 0x75, 0xca, 0xd5, 0x58, 0x06, 0x87, 0x3c, 0x0c, 0x99, 0xc3, 0xd1,
	0x86, 0x0e, 0xb8, 0x97, 0x44, 0xe4, 0xae, 0xcc, 0x1b, 0xb9, 0x84, 0xe5, 0x0a, 0xb8, 0xbf, 0x18,
	0x79, 0x5f, 0xbf, 0xb7, 0xe8, 0x3f, 0x9d, 0xb1, 0x95, 0x44, 0x04, 0x89, 0x25, 0x27, 0x17, 0x72,
	0xab, 0x66, 0x5b, 0x80, 0xf5, 0xfe, 0xcd, 0x62, 0xe8, 0xf7, 0x68, 0x08, 0xb7, 0x40, 0xd5, 0xf4,
	0x84, 0x75, 0xaa, 0x47, 0x97, 0xfe, 0x99, 0x4b, 0x74, 0x21, 0xc0, 0xa7, 0x00, 0xa4, 0x4f, 0x2d,
	0xb0, 0x3d, 0x2e, 0x43, 0xb4, 0xd2, 0x5c, 0x6d, 0xd5, 0x76, 0x37, 0xb3, 0xd5, 0xd0, 0xf9, 0xc3,
	0x5a, 0x30, 0x8b, 0x67, 0x11, 0x29, 0xd0, 0x5c, 0x8d, 0xd9, 0x3b, 0xbf, 0xc4, 0x85, 0x8b, 0x4b,
	0x5c, 0xb8, 0xbe, 0xc4, 0xc6, 0xa7, 0x18, 0x1b, 0x5f, 0x62, 0x6c, 0x9c, 0xc5, 0xd8, 0x38, 0x8f,
	0xb1, 0x71, 0x11, 0x63, 0xe3, 0x47, 0x8c, 0x8d, 0x9f, 0x31, 0x2e, 0x5c, 0xc7, 0xd8, 0xf8, 0x7c,
	0x85, 0x0b, 0xe7, 0x57, 0xb8, 0x70, 0x71, 0x85, 0x0b, 0x6f, 0xab, 0xf3, 0x0d, 0x36, 0x58, 0xd3,
	0x1d, 0x1f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x58, 0x21, 0xc5, 0x11, 0xd5, 0x04, 0x00, 0x00,
}

func (this *SmartContractResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmartContractResult)
	if !ok {
		that2, ok := that.(SmartContractResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.Value, that1.Value) {
			return false
		}
	}
	if !bytes.Equal(this.RcvAddr, that1.RcvAddr) {
		return false
	}
	if !bytes.Equal(this.SndAddr, that1.SndAddr) {
		return false
	}
	if !bytes.Equal(this.RelayerAddr, that1.RelayerAddr) {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		if !__caster.Equal(this.RelayedValue, that1.RelayedValue) {
			return false
		}
	}
	if !bytes.Equal(this.Code, that1.Code) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !bytes.Equal(this.PrevTxHash, that1.PrevTxHash) {
		return false
	}
	if !bytes.Equal(this.OriginalTxHash, that1.OriginalTxHash) {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.GasPrice != that1.GasPrice {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if !bytes.Equal(this.CodeMetadata, that1.CodeMetadata) {
		return false
	}
	if !bytes.Equal(this.ReturnMessage, that1.ReturnMessage) {
		return false
	}
	if !bytes.Equal(this.OriginalSender, that1.OriginalSender) {
		return false
	}
	return true
}
func (this *ScheduledSCRs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScheduledSCRs)
	if !ok {
		that2, ok := that.(ScheduledSCRs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockType != that1.BlockType {
		return false
	}
	if len(this.TxHandlers) != len(that1.TxHandlers) {
		return false
	}
	for i := range this.TxHandlers {
		if !this.TxHandlers[i].Equal(&that1.TxHandlers[i]) {
			return false
		}
	}
	return true
}
func (this *SmartContractResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&scheduled.SmartContractResult{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "RcvAddr: "+fmt.Sprintf("%#v", this.RcvAddr)+",\n")
	s = append(s, "SndAddr: "+fmt.Sprintf("%#v", this.SndAddr)+",\n")
	s = append(s, "RelayerAddr: "+fmt.Sprintf("%#v", this.RelayerAddr)+",\n")
	s = append(s, "RelayedValue: "+fmt.Sprintf("%#v", this.RelayedValue)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "PrevTxHash: "+fmt.Sprintf("%#v", this.PrevTxHash)+",\n")
	s = append(s, "OriginalTxHash: "+fmt.Sprintf("%#v", this.OriginalTxHash)+",\n")
	s = append(s, "GasLimit: "+fmt.Sprintf("%#v", this.GasLimit)+",\n")
	s = append(s, "GasPrice: "+fmt.Sprintf("%#v", this.GasPrice)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "CodeMetadata: "+fmt.Sprintf("%#v", this.CodeMetadata)+",\n")
	s = append(s, "ReturnMessage: "+fmt.Sprintf("%#v", this.ReturnMessage)+",\n")
	s = append(s, "OriginalSender: "+fmt.Sprintf("%#v", this.OriginalSender)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduledSCRs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&scheduled.ScheduledSCRs{")
	s = append(s, "BlockType: "+fmt.Sprintf("%#v", this.BlockType)+",\n")
	if this.TxHandlers != nil {
		vs := make([]SmartContractResult, len(this.TxHandlers))
		for i := range vs {
			vs[i] = this.TxHandlers[i]
		}
		s = append(s, "TxHandlers: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringScheduled(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SmartContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmartContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalSender) > 0 {
		i -= len(m.OriginalSender)
		copy(dAtA[i:], m.OriginalSender)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.OriginalSender)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ReturnMessage) > 0 {
		i -= len(m.ReturnMessage)
		copy(dAtA[i:], m.ReturnMessage)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.ReturnMessage)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CodeMetadata) > 0 {
		i -= len(m.CodeMetadata)
		copy(dAtA[i:], m.CodeMetadata)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.CodeMetadata)))
		i--
		dAtA[i] = 0x72
	}
	if m.CallType != 0 {
		i = encodeVarintScheduled(dAtA, i, uint64(m.CallType))
		i--
		dAtA[i] = 0x68
	}
	if m.GasPrice != 0 {
		i = encodeVarintScheduled(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x60
	}
	if m.GasLimit != 0 {
		i = encodeVarintScheduled(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x58
	}
	if len(m.OriginalTxHash) > 0 {
		i -= len(m.OriginalTxHash)
		copy(dAtA[i:], m.OriginalTxHash)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.OriginalTxHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PrevTxHash) > 0 {
		i -= len(m.PrevTxHash)
		copy(dAtA[i:], m.PrevTxHash)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.PrevTxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x3a
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.RelayedValue)
		i -= size
		if _, err := __caster.MarshalTo(m.RelayedValue, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintScheduled(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.RelayerAddr) > 0 {
		i -= len(m.RelayerAddr)
		copy(dAtA[i:], m.RelayerAddr)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.RelayerAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SndAddr) > 0 {
		i -= len(m.SndAddr)
		copy(dAtA[i:], m.SndAddr)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.SndAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RcvAddr) > 0 {
		i -= len(m.RcvAddr)
		copy(dAtA[i:], m.RcvAddr)
		i = encodeVarintScheduled(dAtA, i, uint64(len(m.RcvAddr)))
		i--
		dAtA[i] = 0x1a
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		size := __caster.Size(m.Value)
		i -= size
		if _, err := __caster.MarshalTo(m.Value, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintScheduled(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Nonce != 0 {
		i = encodeVarintScheduled(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScheduledSCRs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledSCRs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledSCRs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHandlers) > 0 {
		for iNdEx := len(m.TxHandlers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxHandlers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScheduled(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockType != 0 {
		i = encodeVarintScheduled(dAtA, i, uint64(m.BlockType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintScheduled(dAtA []byte, offset int, v uint64) int {
	offset -= sovScheduled(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SmartContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovScheduled(uint64(m.Nonce))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.Value)
		n += 1 + l + sovScheduled(uint64(l))
	}
	l = len(m.RcvAddr)
	if l > 0 {
		n += 1 + l + sovScheduled(uint64(l))
	}
	l = len(m.SndAddr)
	if l > 0 {
		n += 1 + l + sovScheduled(uint64(l))
	}
	l = len(m.RelayerAddr)
	if l > 0 {
		n += 1 + l + sovScheduled(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
		l = __caster.Size(m.RelayedValue)
		n += 1 + l + sovScheduled(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovScheduled(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovScheduled(uint64(l))
	}
	l = len(m.PrevTxHash)
	if l > 0 {
		n += 1 + l + sovScheduled(uint64(l))
	}
	l = len(m.OriginalTxHash)
	if l > 0 {
		n += 1 + l + sovScheduled(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovScheduled(uint64(m.GasLimit))
	}
	if m.GasPrice != 0 {
		n += 1 + sovScheduled(uint64(m.GasPrice))
	}
	if m.CallType != 0 {
		n += 1 + sovScheduled(uint64(m.CallType))
	}
	l = len(m.CodeMetadata)
	if l > 0 {
		n += 1 + l + sovScheduled(uint64(l))
	}
	l = len(m.ReturnMessage)
	if l > 0 {
		n += 1 + l + sovScheduled(uint64(l))
	}
	l = len(m.OriginalSender)
	if l > 0 {
		n += 2 + l + sovScheduled(uint64(l))
	}
	return n
}

func (m *ScheduledSCRs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockType != 0 {
		n += 1 + sovScheduled(uint64(m.BlockType))
	}
	if len(m.TxHandlers) > 0 {
		for _, e := range m.TxHandlers {
			l = e.Size()
			n += 1 + l + sovScheduled(uint64(l))
		}
	}
	return n
}

func sovScheduled(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScheduled(x uint64) (n int) {
	return sovScheduled(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SmartContractResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmartContractResult{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`RcvAddr:` + fmt.Sprintf("%v", this.RcvAddr) + `,`,
		`SndAddr:` + fmt.Sprintf("%v", this.SndAddr) + `,`,
		`RelayerAddr:` + fmt.Sprintf("%v", this.RelayerAddr) + `,`,
		`RelayedValue:` + fmt.Sprintf("%v", this.RelayedValue) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`PrevTxHash:` + fmt.Sprintf("%v", this.PrevTxHash) + `,`,
		`OriginalTxHash:` + fmt.Sprintf("%v", this.OriginalTxHash) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`GasPrice:` + fmt.Sprintf("%v", this.GasPrice) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`CodeMetadata:` + fmt.Sprintf("%v", this.CodeMetadata) + `,`,
		`ReturnMessage:` + fmt.Sprintf("%v", this.ReturnMessage) + `,`,
		`OriginalSender:` + fmt.Sprintf("%v", this.OriginalSender) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduledSCRs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTxHandlers := "[]SmartContractResult{"
	for _, f := range this.TxHandlers {
		repeatedStringForTxHandlers += strings.Replace(strings.Replace(f.String(), "SmartContractResult", "SmartContractResult", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTxHandlers += "}"
	s := strings.Join([]string{`&ScheduledSCRs{`,
		`BlockType:` + fmt.Sprintf("%v", this.BlockType) + `,`,
		`TxHandlers:` + repeatedStringForTxHandlers + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringScheduled(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SmartContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduled
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Value = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcvAddr = append(m.RcvAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.RcvAddr == nil {
				m.RcvAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SndAddr = append(m.SndAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.SndAddr == nil {
				m.SndAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerAddr = append(m.RelayerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.RelayerAddr == nil {
				m.RelayerAddr = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayedValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.RelayedValue = tmp
				}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevTxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevTxHash = append(m.PrevTxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevTxHash == nil {
				m.PrevTxHash = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalTxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalTxHash = append(m.OriginalTxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalTxHash == nil {
				m.OriginalTxHash = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= github_com_ElrondNetwork_elrond_vm_common.CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeMetadata = append(m.CodeMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeMetadata == nil {
				m.CodeMetadata = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnMessage = append(m.ReturnMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.ReturnMessage == nil {
				m.ReturnMessage = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalSender = append(m.OriginalSender[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalSender == nil {
				m.OriginalSender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduled(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheduled
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheduled
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledSCRs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduled
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledSCRs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledSCRs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockType", wireType)
			}
			m.BlockType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHandlers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduled
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheduled
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHandlers = append(m.TxHandlers, SmartContractResult{})
			if err := m.TxHandlers[len(m.TxHandlers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduled(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheduled
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheduled
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScheduled(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScheduled
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScheduled
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScheduled
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScheduled
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScheduled
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScheduled        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScheduled          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScheduled = fmt.Errorf("proto: unexpected end of group")
)
