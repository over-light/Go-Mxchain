# GeneralSettings section of the node
[GeneralSettings]
   # StatusPollingIntervalSec represents the no of seconds between multiple polling for the status for AppStatusHandler
   StatusPollingIntervalSec = 2

   # MaxComputableRounds represents the max number of rounds computable in a round
   # by the validator statistics processor
   MaxComputableRounds = 100

[StoragePruning]
   # If the Enabled flag is set to false, then the storers won't divide epochs into separate dbs
   Enabled = true

   # If this flag is set to true, the node won't delete any database between epochs
   FullArchive = false

   # NumEpochsToKeep - if the flag above is set to false, this will set the number of epochs to keep in the storage.
   # Epochs older that (current epoch - NumOfEpochsToKeep) will be removed
   NumEpochsToKeep = 3

   # NumActivePersisters - this will set the number of persisters to keep active at a moment. This works for both
   # full archive or not nodes. In case of a node which doesn't have a full archive, it has to be smaller or equal
   # to the NumOfEpochsToKeep flag
   NumActivePersisters = 2

[MiniBlocksStorage]
    [MiniBlocksStorage.Cache]
        Size = 300
        Type = "LRU"
    [MiniBlocksStorage.DB]
        FilePath = "MiniBlocks"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 100
        MaxOpenFiles = 10

[MiniBlockHeadersStorage]
    [MiniBlockHeadersStorage.Cache]
        Size = 300
        Type = "LRU"
    [MiniBlockHeadersStorage.DB]
        FilePath = "MiniBlockHeaders"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 100
        MaxOpenFiles = 10

[PeerBlockBodyStorage]
    [PeerBlockBodyStorage.Cache]
        Size = 1000
        Type = "LRU"
    [PeerBlockBodyStorage.DB]
        FilePath = "PeerBlocks"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 100
        MaxOpenFiles = 10

[BlockHeaderStorage]
    [BlockHeaderStorage.Cache]
        Size = 1000
        Type = "LRU"
    [BlockHeaderStorage.DB]
        FilePath = "BlockHeaders"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 100
        MaxOpenFiles = 10

[BootstrapStorage]
    [BootstrapStorage.Cache]
        Size = 1000
        Type = "LRU"
    [BootstrapStorage.DB]
        FilePath = "BootstrapData"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 1
        MaxOpenFiles = 10

[MetaBlockStorage]
    [MetaBlockStorage.Cache]
        Size = 1000
        Type = "LRU"
    [MetaBlockStorage.DB]
        FilePath = "MetaBlock"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 100
        MaxOpenFiles = 10

[TxStorage]
    [TxStorage.Cache]
        Size = 75000
        Type = "LRU"
    [TxStorage.DB]
        FilePath = "Transactions"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 20000
        MaxOpenFiles = 10

[UnsignedTransactionStorage]
    [UnsignedTransactionStorage.Cache]
        Size = 75000
        Type = "LRU"
    [UnsignedTransactionStorage.DB]
        FilePath = "UnsignedTransactions"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 20000
        MaxOpenFiles = 10

[RewardTxStorage]
    [RewardTxStorage.Cache]
        Size = 75000
        Type = "LRU"
    [RewardTxStorage.DB]
        FilePath = "RewardTransactions"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 20000
        MaxOpenFiles = 10

[StatusMetricsStorage]
    [StatusMetricsStorage.Cache]
        Size = 1000
        Type = "LRU"
    [StatusMetricsStorage.DB]
        FilePath = "StatusMetricsStorageDB"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 100
        MaxOpenFiles = 10

[ShardHdrNonceHashStorage]
    [ShardHdrNonceHashStorage.Cache]
        Size = 1000
        Type = "LRU"
    [ShardHdrNonceHashStorage.DB]
        FilePath = "ShardHdrHashNonce"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 100
        MaxOpenFiles = 10

[MetaHdrNonceHashStorage]
    [MetaHdrNonceHashStorage.Cache]
        Size = 1000
        Type = "LRU"
    [MetaHdrNonceHashStorage.DB]
        FilePath = "MetaHdrHashNonce"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 100
        MaxOpenFiles = 10

[AccountsTrieStorage]
    [AccountsTrieStorage.Cache]
        Size = 75000
        Type = "LRU"
    [AccountsTrieStorage.DB]
        FilePath = "AccountsTrie/MainDB"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 45000
        MaxOpenFiles = 10

[EvictionWaitingList]
    Size = 1000
    [EvictionWaitingList.DB]
        FilePath = "EvictionWaitingList"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 100
        MaxOpenFiles = 10

[TrieSnapshotDB]
     FilePath = "TrieSnapshot"
     Type = "LvlDBSerial"
     BatchDelaySeconds = 2
     MaxBatchSize = 40000
     MaxOpenFiles = 10

[PeerAccountsTrieStorage]
    [PeerAccountsTrieStorage.Cache]
        Size = 5000
        Type = "LRU"
    [PeerAccountsTrieStorage.DB]
        FilePath = "PeerAccountsTrie/MainDB"
        Type = "LvlDBSerial"
        BatchDelaySeconds = 2
        MaxBatchSize = 1000
        MaxOpenFiles = 10

[HeadersPoolConfig]
    MaxHeadersPerShard = 1000
    NumElementsToRemoveOnEviction = 200

[BadBlocksCache]
    Size = 1000
    Type = "LRU"

[TxBlockBodyDataPool]
    Size = 300
    Type = "LRU"

[PeerBlockBodyDataPool]
    Size = 1000
    Type = "LRU"

[TxDataPool]
    Size = 900000
    SizeInBytes = 524288000
    Type = "TxCache"
    Shards = 16

[TrieNodesDataPool]
    Size = 50000
    Type = "LRU"

[UnsignedTransactionDataPool]
    Size = 75000
    Type = "LRU"

[RewardTransactionDataPool]
    Size = 75000
    Type = "LRU"

#PublicKeyShardId represents the main cache used to map Elrond block signing public keys to their associated
#peer id's. Both public key and peer id are verified before they are appended in this cache. In time, the current node
#will learn a large majority (or even the whole network) of the nodes that make up the network. The public key provided
#by this map is then fed to the nodes coordinator that will output the shard id in which that public key resides.
#The component that handles these cachers will also have a reversed lookup map that will ensure that there won't be
#unlimited peer ids with the same public key. This will prevent eclipse attacks.
[PublicKeyPeerId]
    Size = 30000
    Type = "LRU"

#PublicKeyShardId is the fallback cache used to map public keys to the shard they belong. Normally, this mapping
#is done by the nodes coordinator implementation but this fallback map is only used whenever nodes coordinator has a wrong
#view about the peers in a shard. Not required to have a large size as this is a fallback cache anyway.
[PublicKeyShardId]
    Size = 100
    Type = "LRU"

#PeerIdShardId is the fallback cache used in network sharding to allow direct connection between
#peer id and shard. It is used when mapping observers that can not be computed through nodes coordination implementation
#The size should be kept low as to not allow eclipse attacks on the nodes by peers that advertise themselves that belong
#to the targeted node's shard
[PeerIdShardId]
    Size = 5
    Type = "LRU"

[Address]
    Length = 32
    Prefix = "0x"

[BLSPublicKey]
    Length = 128
    Prefix = "0x"

[Hasher]
   Type = "blake2b"

[MultisigHasher]
   Type = "blake2b"

# The main marshalizer, used in internod communication
# Type idenftifies the marshalizer
# SizeCheckDelta the maximum allow drift between the input data buffer and
#     the reencoded version (in percents).
#     0 disables the feature.
[Marshalizer]
   Type = "protobuf"
   SizeCheckDelta = 0

# The marshalizer used for smartcontracts data exchage
[VmMarshalizer]
   Type = "json"

# The marshalizer used in transction signing
[TxSignMarshalizer]
   Type = "json"

# TODO: change this config to real numbers before merging to development
[EpochStartConfig]
    MinRoundsBetweenEpochs = 30
    RoundsPerEpoch         = 50

# ResourceStats, if enabled, will output in a folder called "stats"
# resource statistics. For example: number of active go routines, memory allocation, number of GC sweeps, etc.
# RefreshIntervalInSec will tell how often a new line containing stats should be added in stats file
[ResourceStats]
   Enabled = true
   RefreshIntervalInSec = 30

# Heartbeat, if enabled, will output a heartbeat singal once x seconds,
# where x in [MinTimeToWaitBetweenBroadcastsInSec, MaxTimeToWaitBetweenBroadcastsInSec)
[Heartbeat]
   Enabled = true
   MinTimeToWaitBetweenBroadcastsInSec = 20
   MaxTimeToWaitBetweenBroadcastsInSec = 25
   DurationInSecToConsiderUnresponsive = 60
   [Heartbeat.HeartbeatStorage]
       [Heartbeat.HeartbeatStorage.Cache]
           Size = 1000
           Type = "LRU"
       [Heartbeat.HeartbeatStorage.DB]
           FilePath = "HeartbeatStorage"
           Type = "LvlDBSerial"
           BatchDelaySeconds = 5
           MaxBatchSize = 100
           MaxOpenFiles = 10

# Consensus type which will be used (the current implementation can manage "bn" and "bls")
# When consensus type is "bls" the multisig hasher type should be "blake2b"
[Consensus]
   Type = "bls"

[NTPConfig]
   Hosts = ["time.google.com", "time.cloudflare.com",  "time.apple.com", "time.windows.com"]
   Port = 123
   TimeoutMilliseconds = 100
   SyncPeriodSeconds = 3600
   Version = 0  # Setting 0 means 'use default value'

[StateTriesConfig]
    CheckpointRoundsModulus = 100
    AccountsStatePruningEnabled = true
    PeerStatePruningEnabled = true
